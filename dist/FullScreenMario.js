/**
 * FullScreenMario-JSON - v0.0.0 
 * Generated on 2014-12-26
 */
/**
 * EightBittr.js
 * 
 * An abstract class used exclusively as the parent of GameStartr. EightBittr
 * contains useful functions for manipulating Things that are independent of
 * the required GameStartr modules.
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
var EightBittr = (function () {
    "use strict";
    
    /**
     * EightBittr constructor. Settings arguments are used to initialize 
     * "constant" values and check for requirements.
     * 
     * @constructor
     * @param {Object} [settings]   An Object containing all other arguments.
     * @param {String[]} [constants]   The names of attributes that should exist 
     *                                 in both the EightBittr constructor and 
     *                                 child instances.
     * @param {Object} [requirements]   A mapping of required settings that must
     *                                  exist globally and/or locally.
     */
    function EightBittr(settings) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            constants, requirements, i;
        
        settings = settings || {};
        EightBitter.constructor = settings.constructor || EightBittr,
        
        // Constants, such as unitsize and scale, are always copied first
        constants = settings.constants;
        if (constants) {
            for (i = 0; i < constants.length; i += 1) {
                EightBitter[constants[i]] = EightBitter.constructor[constants[i]];
            }
        }
        
        requirements = settings.requirements;
        if (requirements) {
            if (requirements.global) {
                checkRequirements(window, requirements.global, "global");
            }
            if (requirements.self) {
                checkRequirements(EightBitter, requirements.self, "self");
            }
        }
    }
    
    /**
     * Given an associate array of requirement names to the files that should
     * include them, this makes sure each of those requirements is a property of
     * the given Object. 
     * 
     * @param {Mixed} self    Generally either the window (for global checks,
     *                         such as utility classes) or an EightBitter.    
     * @param {Object} requirements   An associative array of properties to 
     *                                check for under self.
     * @param {String} name   The name referring to self, printed out in an
     *                        Error if needed.
     */
    function checkRequirements(self, requirements, name) {
        var fails = [],
            requirement;
        
        // For each requirement in the given object, if it isn't visible as a
        // member of self (evaluates to falsy), complain
        for (requirement in requirements) {
            if (requirements.hasOwnProperty(requirement) && !self[requirement]) {
                fails.push(requirement);
            }
        }
        
        // If there was at least one failure added to the fails array, throw
        // an error with each fail split by endlines
        if (fails.length) {
            throw new Error("Missing " + fails.length + " requirement(s) "
                + "in " + name + ".\n"
                + fails.map(function (requirement, i) {
                    return i + ". " + requirement + ": is the '"
                            + requirements[requirement] + "' file included?";
                }).join("\n"));
        }
    }
    
    /**
     * Resets the EightBittr by calling all of the named reset member Functions
     * on itself.
     * 
     * @param {EightBittr} EightBitter
     * @param {String[]} resets   The ordered Array of reset Functions to be 
     *                            called.
     * @param {Object} [customs]   Additional arguments to pass to all reset
     *                             Functions.
     */
    function reset(EightBitter, resets, customs) {
        var i;
        
        for (i = 0; i < resets.length; i += 1) {
            EightBitter[resets[i]](EightBitter, customs)
        }
    }
    
    /**
     * Resets the EightBittr in a timed manner by calling all the named reset
     * member Functions on itself and adding the time (in milliseconds) along 
     * along with the total process time to an Array, which is then returned.
     * 
     * @param {EightBittr} EightBitter
     * @param {String[]} resets   The ordered Array of reset Functions to be 
     *                            called.
     * @param {Object} [customs]   Additional arguments to pass to all reset
     *                             Functions.
     * @return {String[]} 
     */
    function resetTimed(EightBitter, resets, customs) {
        var timeStart = performance.now(),
            times = [],
            timeEach, i;
        
        for (i = 0; i < resets.length; i += 1) {
            timeEach = performance.now();
            EightBitter[resets[i]](EightBitter, customs);
            
            times.push({
                "name": resets[i],
                "time": performance.now() - timeEach
            });
        }
        
        times.push({
            "name": "resetTimed",
            "time": performance.now() - timeStart
        });
        
        return times;
    }
    
    /**
     * EightBittr.get is provided as a shortcut function to make binding member
     * functions, particularily those using "this.unitsize" (where this needs to
     * be an EightBitter, not an external calling object). At the very simplest,
     * this.get(func) acts as a shortcut to this.bind(this, func).
     * In addition, if the name is given as "a.b", EightBitter.followPath will
     * be used on "a.b".split('.') (so EightBitter.prototype[a][b] is returned).
     * 
     * @this {EightBittr}
     * @param {Mixed} name   Either the function itself, or a string of the path
     *                       to the function (after ".prototype.").
     * @return {Function}   A function, bound to set "this" to the calling
     *                      EightBitter
     */
    EightBittr.prototype.get = function(name) {
        var EightBitter = EightBittr.prototype.ensureCorrectCaller.call(this),
            func;
        
        // If name is a string, turn it into a function path, and follow it
        if (name.constructor === String) {
            func = followPathHard(EightBitter, name.split('.'), 0);
        }
        // If it's already a path (array), follow it
        else if (name instanceof Array) {
            func = followPathHard(EightBitter, name, 0);
        }
        // Otherwise func is just name
        else {
            func = name;
        }
        
        // Don't allow func to be undefined or some non-function object
        if (typeof(func) !== "function") {
            throw new Error(name + " is not defined in this EightBitter", self);
        }
        
        // Bind the function to this
        return func.bind(EightBitter);
    };
    
    
    /* HTML functions
    */
    
    /**
     * Creates and returns a new HTML <canvas> element, with an optional scaling
     * multiplier. Image smoothing is disabled.
     * 
     * @param {Number} width   How wide the canvas should be.
     * @param {Number} height   How tall the canvas should be.
     * @param {Number} [scaling]   How much to scale the style of the canvas (by
     *                             default, 1 for not at all).
     * @return {HTMLCanvasElement}
     */
    function createCanvas(width, height, scaling) {
        var canvas = document.createElement("canvas"),
            context = canvas.getContext("2d");
        
        canvas.width = width;
        canvas.height = height;
        
        scaling = scaling || 1;
        
        // Scaling 1 by default, but may be different (e.g. unitsize)
        canvas.style.width = (width * scaling) + "px";
        canvas.style.height = (height * scaling) + "px";
        
        // For speed's sake, disable image smoothing in all browsers
        context.imageSmoothingEnabled = false;
        context.webkitImageSmoothingEnabled = false;
        context.mozImageSmoothingEnabled = false;
        context.msImageSmoothingEnabled = false;
        context.oImageSmoothingEnabled = false;
        
        return canvas;
    }
    

    /* Physics functions 
    */
    
    /**
     * Shifts a Thing vertically by changing its top and bottom attributes.
     * 
     * @param {Thing} thing
     * @param {Number} dy
     */
    function shiftVert(thing, dy) {
        thing.top += dy;
        thing.bottom += dy;
    }
    
    /**
     * Shifts a Thing horizontally by changing its top and bottom attributes.
     * 
     * @param {Thing} thing
     * @param {Number} dy
     */
    function shiftHoriz(thing, dx) {
        thing.left += dx;
        thing.right += dx;
    }
    
    /**
     * Sets the top of a Thing to a set number, changing the bottom based on its
     * height and the EightBittr's unisize.
     * 
     * @param {Thing} thing
     * @param {Number} top
     */
    function setTop(thing, top) {
        thing.top = top;
        thing.bottom = thing.top + thing.height * thing.EightBitter.unitsize;
    }
    
    /**
     * Sets the right of a Thing to a set number, changing the left based on its
     * width and the EightBittr's unisize.
     * 
     * @param {Thing} thing
     * @param {Number} right
     */
    function setRight(thing, right) {
        thing.right = right;
        thing.left = thing.right - thing.width * thing.EightBitter.unitsize;
    }
    
    /**
     * Sets the bottom of a Thing to a set number, changing the top based on its
     * height and the EightBittr's unisize.
     * 
     * @param {Thing} thing
     * @param {Number} bottom
     */
    function setBottom(thing, bottom) {
        thing.bottom = bottom;
        thing.top = thing.bottom - thing.height * thing.EightBitter.unitsize;
    }
    
    /**
     * Sets the left of a Thing to a set number, changing the right based on its
     * width and the EightBittr's unisize.
     * 
     * @param {Thing} thing
     * @param {Number} left
     */
    function setLeft(thing, left) {
        thing.left = left;
        thing.right = thing.left + thing.width * thing.EightBitter.unitsize;
    }
    
    /**
     * Shifts a Thing so that it is centered on the given x and y.
     * 
     * @param {Thing} thing
     * @param {Number} x
     * @param {Number} y
     */
    function setMid(thing, x, y) {
        thing.EightBitter.setMidX(thing, x);
        thing.EightBitter.setMidY(thing, y);
    }
    
    /**
     * Shifts a Thing so that it is horizontally centered on the given x.
     * 
     * @param {Thing} thing
     * @param {Number} x
     */
    function setMidX(thing, x) {
        thing.EightBitter.setLeft(
            thing, 
            x + thing.width * thing.EightBitter.unitsize / 2
        );
    }
    
    /**
     * Shifts a Thing so that it is vertically centered on the given y.
     * 
     * @param {Thing} thing
     * @param {Number} y
     */
    function setMidY(thing, y) {
        thing.EightBitter.setTop(
            thing,
            y + thing.height * thing.EightBitter.unitsize / 2
        );
    }
    
    /**
     * @param {Thing} thing
     * @return {Number} The horizontal midpoint of the Thing.
     */
    function getMidX(thing) {
        return thing.left + thing.width * thing.EightBitter.unitsize / 2;
    }
    
    /**
     * @param {Thing} thing
     * @return {Number} The vertical midpoint of the Thing.
     */
    function getMidY(thing) {
        return thing.top + thing.height * thing.EightBitter.unitsize / 2;
    }
    
    /**
     * Shifts a Thing so that its midpoint is centered on the midpoint of the
     * other Thing.
     * 
     * @param {Thing} thing   The Thing to be shifted.
     * @param {Thing} other   The Thing whose midpoint is referenced.
     */
    function setMidObj(thing, other) {
        thing.EightBitter.setMidXObj(thing, other);
        thing.EightBitter.setMidYObj(thing, other);
    }
    
    /**
     * Shifts a Thing so that its horizontal midpoint is centered on the 
     * midpoint of the other Thing.
     * 
     * @param {Thing} thing   The Thing to be shifted.
     * @param {Thing} other   The Thing whose midpoint is referenced.
     */
    function setMidXObj(thing, other) {
        thing.EightBitter.setLeft(
            thing, 
            thing.EightBitter.getMidX(other) 
                - (thing.width * thing.EightBitter.unitsize / 2)
        );
    }
    
    /**
     * Shifts a Thing so that its vertical midpoint is centered on the 
     * midpoint of the other Thing.
     * 
     * @param {Thing} thing   The Thing to be shifted.
     * @param {Thing} other   The Thing whose midpoint is referenced.
     */
    function setMidYObj(thing, other) {
        thing.EightBitter.setTop(
            thing, 
            thing.EightBitter.getMidY(other) 
                - (thing.height * thing.EightBitter.unitsize / 2)
            );
    }
    
    /**
     * @param {Thing} thing
     * @param {Thing} other
     * @return {Boolean} Whether the first Thing's midpoing is to the left of
     *                   the other's.
     */
    function objectToLeft(thing, other) {
        return (
            thing.EightBitter.getMidX(thing) < thing.EightBitter.getMidX(other)
        );
    }
    
    /**
     * Shifts a Thing's top up, then sets the bottom (similar to a shiftVert and
     * a setTop combined).
     * 
     * @param {Thing} thing
     * @param {Number} dy
     */
    function updateTop(thing, dy) {
        // If a dy is provided, move the thing's top that much
        thing.top += dy || 0;
        
        // Make the thing's bottom dependent on the top
        thing.bottom = thing.top + thing.height * thing.EightBitter.unitsize;
    }
    
    /**
     * Shifts a Thing's right, then sets the left (similar to a shiftHoriz and a
     * setRight combined).
     * 
     * @param {Thing} thing
     * @param {Number} dx
     */
    function updateRight(thing, dx) {
        // If a dx is provided, move the thing's right that much
        thing.right += dx || 0;
        
        // Make the thing's left dependent on the right
        thing.left = thing.right - thing.width * thing.EightBitter.unitsize;
    }
    
    /**
     * Shifts a Thing's bottom down, then sets the bottom (similar to a 
     * shiftVert and a setBottom combined).
     * 
     * @param {Thing} thing
     * @param {Number} dy
     */
    function updateBottom(thing, dy) {
        // If a dy is provided, move the thing's bottom that much
        thing.bottom += dy || 0;
        
        // Make the thing's top dependent on the top
        thing.top = thing.bottom - thing.height * thing.EightBitter.unitsize;
    }
    
    /**
     * Shifts a Thing's left, then sets the right (similar to a shiftHoriz and a
     * setLeft combined).
     * 
     * @param {Thing} thing
     * @param {Number} dy
     */
    function updateLeft(thing, dx) {
        // If a dx is provided, move the thing's left that much
        thing.left += dx || 0;
        
        // Make the thing's right dependent on the left
        thing.right = thing.left + thing.width * thing.EightBitter.unitsize;
    }
    
    /**
     * Shifts a Thing toward a target x, but limits the total distance allowed.
     * Distance is computed as from the Thing's horizontal midpoint.
     * 
     * @param {Thing} thing
     * @param {Number} x
     * @param {Number} maxSpeed
     */
    function slideToX(thing, x, maxSpeed) {
        var midx = thing.EightBitter.getMidX(thing);
        
        // If no maxSpeed is provided, assume Infinity (so it doesn't matter)
        maxSpeed = maxSpeed || Infinity;
        
        // Thing to the left? Slide to the right.
        if (midx < x) {
            thing.EightBitter.shiftHoriz(thing, Math.min(maxSpeed, (x - midx)));
        }
        // Thing to the right? Slide to the left.
        else {
            thing.EightBitter.shiftHoriz(thing, Math.max(-maxSpeed, (x - midx)));
        }
    }
    
    /**
     * Shifts a Thing toward a target y, but limits the total distance allowed.
     * Distance is computed as from the Thing's vertical midpoint.
     * 
     * @param {Thing} thing
     * @param {Number} y
     * @param {Number} maxSpeed
     */
    function slideToY(thing, y, maxSpeed) {
        var midy = thing.EightBitter.getMidY(thing);
        
        // If no maxSpeed is provided, assume Infinity (so it doesn't matter)
        maxSpeed = maxSpeed || Infinity;
        
        // Thing above? slide down.
        if (midy < y) {
            thing.EightBitter.shiftVert(thing, Math.min(maxSpeed, (y - midy)));
        }
        // Thing below? Slide up.
        else {
            thing.EightBitter.shiftVert(thing, Math.max(-maxSpeed, (y - midy)));
        }
    }
    
    
    /* EightBittr utilities
    */
    
    /**
     * Ensures the current object is an EightBittr by throwing an error if it 
     * is not. This should be used for functions in any EightBittr descendants
     * that have to call 'this' to ensure their caller is what the programmer
     * expected it to be.
     * 
     * @param {Mixed} current   
     */
    function ensureCorrectCaller(current) {
        if (!current instanceof EightBittr) {
            throw new Error("A function requires the caller ('this') to be the "
                + "manipulated EightBittr object. Unfortunately, 'this' is a "
                + typeof(this) + ".");
        }
        return current;
    }
    
    
    /* General utilities
    */
    
    /**
     * "Proliferates" all properties of a donor onto a recipient by copying each
     * of them and recursing onto child Objects. This is a deep copy.
     * 
     * @param {Mixed} recipient
     * @param {Mixed} donor
     * @param {Boolean} [noOverride]   Whether pre-existing properties of the
     *                                 recipient should be skipped (defaults to
     *                                 false).
     */
    function proliferate(recipient, donor, noOverride) {
        var setting, i;
      
        // For each attribute of the donor:
        for (i in donor) {
            if (donor.hasOwnProperty(i)) {
                // If noOverride, don't override already existing properties
                if (noOverride && recipient.hasOwnProperty(i)) {
                    continue;
                }

                // If it's an object, recurse on a new version of it
                setting = donor[i];
                if (typeof setting === "object") {
                    if (!recipient.hasOwnProperty(i)) {
                        recipient[i] = new setting.constructor();
                    }
                    proliferate(recipient[i], setting, noOverride);
                }
                // Regular primitives are easy to copy otherwise
                else {
                    recipient[i] = setting;
                }
            }
        }
        return recipient;
    }
    
    /**
     * Identical to proliferate, but instead of checking whether the recipient
     * hasOwnProperty on properties, it just checks if they're truthy
     * 
     * @param {Mixed} recipient
     * @param {Mixed} donor
     * @param {Boolean} [noOverride]   Whether pre-existing properties of the
     *                                 recipient should be skipped (defaults to
     *                                 false).
     * @remarks This may not be good with JSLint, but it works for prototypal
     *          inheritance, since hasOwnProperty only is for the current class
     */
    function proliferateHard(recipient, donor, noOverride) {
        var setting, i;
      
        // For each attribute of the donor:
        for (i in donor) {
            if (donor.hasOwnProperty(i)) {
                // If noOverride, don't override already existing properties
                if (noOverride && recipient[i]) {
                    continue;
                }

                // If it's an object, recurse on a new version of it
                setting = donor[i];
                if (typeof setting === "object") {
                    if (!recipient[i]) {
                        recipient[i] = new setting.constructor();
                    }
                    proliferate(recipient[i], setting, noOverride);
                }
                // Regular primitives are easy to copy otherwise
                else {
                    recipient[i] = setting;
                }
            }
        }
        return recipient;
    }
    
    /**
     * Identical to proliferate, but tailored for HTML elements because many
     * element attributes don't play nicely with JavaScript Array standards. 
     * Looking at you, HTMLCollection!
     * 
     * @param {Element} recipient
     * @param {Any} donor
     * @param {Boolean} [noOverride]
     * @return {Element}
     */
    function proliferateElement(recipient, donor, noOverride) {
        var setting, i, j;
      
        // For each attribute of the donor:
        for (i in donor) {
            if (donor.hasOwnProperty(i)) {
                // If noOverride, don't override already existing properties
                if (noOverride && recipient.hasOwnProperty(i)) {
                    continue;
                }
                
                setting = donor[i];
                
                // Special cases for HTML elements
                switch (i) {
                    // Children: just append all of them directly
                    case "children":
                        if (typeof(setting) !== "undefined") {
                            for (var j = 0; j < setting.length; j += 1) {
                                recipient.appendChild(setting[j]);
                            }
                        }
                        break;
                    
                    // By default, use the normal proliferate logic
                    default:
                        // If it's an object, recurse on a new version of it
                        if (typeof setting === "object") {
                            if (!recipient.hasOwnProperty(i)) {
                                recipient[i] = new setting.constructor();
                            }
                            proliferate(recipient[i], setting, noOverride);
                        }
                        // Regular primitives are easy to copy otherwise
                        else {
                            recipient[i] = setting;
                        }
                        break;
                }
            }
        }
        return recipient;
    }
    
    /**
     * Creates and returns an HTMLElement of the specified type. Any additional
     * settings Objects may be given to be proliferated onto the Element via
     * proliferateElement.
     * 
     * @param {String} type   The tag of the Element to be created.
     * @param {Object} [settings]   Additional settings for the Element, such as
     *                              className or style.
     * @return {HTMLElement}
     */
    function createElement(type) {
        var element = document.createElement(type || "div"),
            i;
        
        // For each provided object, add those settings to the element
        for (i = 1; i < arguments.length; i += 1) {
            proliferateElement(element, arguments[i]);
        }
        
        return element;
    }
    
    /**
     * Follows a path inside an Object recursively, based on a given path.
     * 
     * @param {Mixed} object
     * @param {String[]} path   The ordered names of attributes to descend into.
     * @param {Number} [num]   The starting index in path (by default, 0).
     * @return {Mixed}
     * @remarks This may not be good with JSLint, but it works for prototypal
     *          inheritance, since hasOwnProperty only is for the current class
     */
    function followPathHard(object, path, num) {
        for (var i = num || 0; i < path.length; i += 1) {
            if (typeof object[path[i]] === "undefined") {
                return undefined;
            }
            else {
                object = object[path[i]];
            }
        }
        return object;
    }
    
    /**
     * Switches a Thing from one Array to Another using splice and push.
     * 
     * @param {Thing} thing
     * @param {Array} arrayOld
     * @param {Array} arrayNew
     */
    function arraySwitch(thing, arrayOld, arrayNew) {
        arrayOld.splice(arrayOld.indexOf(thing), 1);
        arrayNew.push(thing);
    }
    
    /**
     * Sets a Thing's position within an Array to the front by splicing and then
     * unshifting it.
     * 
     * @param {Thing} thing
     * @param {Array} array
     */
    function arrayToBeginning(thing, array) {
        array.splice(array.indexOf(thing), 1);
        array.unshift(thing);
    }
    
    /**
     * Sets a Thing's position within an Array to the front by splicing and then
     * pushing it.
     * 
     * @param {Thing} thing
     * @param {Array} array
     */
    function arrayToEnd(thing, array) {
        array.splice(array.indexOf(thing), 1);
        array.push(thing);
    }
    
    
    proliferateHard(EightBittr.prototype, {
        // Setup
        "reset": reset,
        "resetTimed": resetTimed,
        // HTML
        "createCanvas": createCanvas,
        // Physics
        "shiftVert": shiftVert,
        "shiftHoriz": shiftHoriz,
        "setTop": setTop,
        "setRight": setRight,
        "setBottom": setBottom,
        "setLeft": setLeft,
        "setLeftOld": setLeft,
        "setMid": setMid,
        "setMidY": setMidY,
        "setMidX": setMidX,
        "getMidY": getMidY,
        "getMidX": getMidX,
        "setMidObj": setMidObj,
        "setMidXObj": setMidXObj,
        "setMidYObj": setMidYObj,
        "objectToLeft": objectToLeft,
        "updateTop": updateTop,
        "updateRight": updateRight,
        "updateBottom": updateBottom,
        "updateLeft": updateLeft,
        "slideToY": slideToY,
        "slideToX": slideToX,
        // EightBittr utilities
        "ensureCorrectCaller": ensureCorrectCaller,
        // General utilities
        "proliferate": proliferate,
        "proliferateHard": proliferateHard,
        "proliferateElement": proliferateElement,
        "createElement": createElement,
        "arraySwitch": arraySwitch,
        "arrayToBeginning": arrayToBeginning,
        "arrayToEnd": arrayToEnd
    });
    
    EightBittr.ensureCorrectCaller = ensureCorrectCaller;
    
    return EightBittr;
})();
/**
 * GameStartr.js
 * 
 * An abstract class used as a base for creating sprite-based 2D games. Utility
 * functions and an expansive skeleton are available for a child class to make
 * us of, particular with physics manipulations, graphics rendering, and reset
 * functions based around the 19 required modules.
 * 
 * Descendent classes of GameStartr must put their settings in their prototype
 * under settings. Reset Functions below list their required file names.
 */
var GameStartr = (function (EightBittr) {
    "use strict";
    
    // Use an EightBittr as the class parent, with EightBittr's constructor
    var EightBitterProto = new EightBittr(),
        
        // Used for combining arrays from the prototype to this
        proliferate = EightBitterProto.proliferate,
        proliferateHard = EightBitterProto.proliferateHard;
    
    /**
     * 
     */
    function GameStartr(customs) {
        if (typeof(customs) === "undefined") {
            customs = {};
        }
        
        EightBittr.call(this, {
            "constants": customs.constants,
            "constructor": customs.constructor || GameStartr,
            "customs": customs,
            "requirements": {
                "global": {
                    "AudioPlayr": "src/AudioPlayr/AudioPlayr.js",
                    "ChangeLinr": "src/ChangeLinr/ChangeLinr.js",
                    "FPSAnalyzr": "src/FPSAnalyzr/FPSAnalyzr.js",
                    "GamesRunnr": "src/GamesRunnr/GamesRunnr.js",
                    "GroupHoldr": "src/GroupHoldr/GroupHoldr.js",
                    "InputWritr": "src/InputWritr/InputWritr.js",
                    "LevelEditr": "src/LevelEditr/LevelEditr.js",
                    "NumberMakr": "src/NumberMakr/NumberMakr.js",
                    "MapScreenr": "src/MapScreenr/MapScreenr.js",
                    "MapsHandlr": "src/MapsHandlr/MapsHandlr.js",
                    "ModAttachr": "src/ModAttachr/ModAttachr.js",
                    "ObjectMakr": "src/ObjectMakr/ObjectMakr.js",
                    "PixelDrawr": "src/PixelDrawr/PixelDrawr.js",
                    "PixelRendr": "src/PixelRendr/PixelRendr.js",
                    "QuadsKeepr": "src/QuadsKeepr/QuadsKeepr.js",
                    "StatsHoldr": "src/StatsHoldr/StatsHoldr.js",
                    "StringFilr": "src/StringFilr/StringFilr.js",
                    "ThingHittr": "src/ThingHittr/ThingHittr.js",
                    "TimeHandlr": "src/TimeHandlr/TimeHandlr.js"
                }
            }
        });
    }
    
    GameStartr.prototype = EightBitterProto;
    
    // Subsequent settings will be stored in GameStartr.prototype.settings
    EightBitterProto.settings = {};
    EightBitterProto.resets = [
        "resetObjectMaker",
        "resetPixelRender",
        "resetTimeHandler",
        "resetAudioPlayer",
        "resetQuadsKeeper",
        "resetGamesRunner",
        "resetStatsHolder",
        "resetThingHitter",
        "resetMapScreener",
        "resetPixelDrawer",
        "resetNumberMaker",
        "resetMapsCreator",
        "resetMapsHandler",
        "resetInputWriter",
        "resetLevelEditor",
        "resetWorldSeeder",
        "resetModAttacher",
        "startModAttacher",
        "resetContainer"
    ];
    
    
    /* Resets
    */
    
    /**
     * Resets the EightBittr by calling the parent EightBittr.prototype.reset.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     */
    function reset(EightBitter, customs) {
        EightBittr.prototype.reset(EightBitter, EightBitter.resets, customs);
    };
    
    /**
     * Resets the EightBittr and records the time by calling the parent 
     * EightBittr.prototype.resetTimed.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @return {Array} How long each reset Function took followed by the entire
     * operation, in milliseconds.
     */
    function resetTimed(EightBitter, customs) {
        return EightBittr.prototype.resetTimed(
            EightBitter, EightBitter.resets, customs
        );
    };
    
    /**
     * Sets self.ObjectMaker.
     * 
     * Because many Thing functions require access to other FSM modules, each is
     * given a reference to this container FSM via properties.Thing.EightBitter. 
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): ObjectMakr (src/ObjectMakr/ObjectMakr.js)
     *                          objects.js (settings/objects.js)
     */
    function resetObjectMaker(EightBitter, customs) {
        EightBitter.ObjectMaker = new ObjectMakr(proliferate({
            "properties": {
                "Quadrant": {
                    "EightBitter": EightBitter
                },
                "Thing": {
                    "EightBitter": EightBitter
                }
            }
        }, EightBitter.settings.objects));
    }
    
    /**
     * Sets self.QuadsKeeper.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): QuadsKeepr (src/QuadsKeepr/QuadsKeepr.js)
     *                          quadrants.js (settings/quadrants.js)
     */
    function resetQuadsKeeper(EightBitter, customs) {
        var quadrantWidth = customs.width / (EightBitter.settings.quadrants.numCols - 3),
            quadrantHeight = customs.height / (EightBitter.settings.quadrants.numRows - 2);
        
        EightBitter.QuadsKeeper = new QuadsKeepr(proliferate({
            "ObjectMaker": EightBitter.ObjectMaker,
            "createCanvas": EightBitter.createCanvas,
            "quadrantWidth": quadrantWidth,
            "quadrantHeight": quadrantHeight,
            "startLeft": -quadrantWidth,
            "startHeight": -quadrantHeight,
            "onAdd": EightBitter.onAreaSpawn.bind(EightBitter, EightBitter),
            "onRemove": EightBitter.onAreaUnspawn.bind(EightBitter, EightBitter),
        }, EightBitter.settings.quadrants));
    }
    
    /**
     * Sets self.PixelRender.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): PixelRendr (src/PixelRendr/PixelRendr.js)
     *                          sprites.js (settings/sprites.js)
     */
    function resetPixelRender(EightBitter, customs) {
        EightBitter.PixelRender = new PixelRendr(proliferate({
            "QuadsKeeper": EightBitter.QuadsKeeper,
            "unitsize": EightBitter.unitsize,
            "scale": EightBitter.scale
        }, EightBitter.settings.sprites));
    }
    
    /**
     * Sets self.PixelDrawer.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): PixelDrawr (src/PixelDrawr/PixelDrawr.js)
     *                          renderer.js (settings/renderer.js)
     */
    function resetPixelDrawer(EightBitter, customs) {
        EightBitter.PixelDrawer = new PixelDrawr(proliferate({
            "PixelRender": EightBitter.PixelRender,
            "MapScreener": EightBitter.MapScreener,
            "createCanvas": EightBitter.createCanvas,
            "unitsize": EightBitter.unitsize,
            "innerWidth": customs.width,
            "generateObjectKey": EightBitter.generateObjectKey
        }, EightBitter.settings.renderer));
    }
    
    /**
     * Sets EightBitter.TimeHandler.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): TimeHandlr (src/TimeHandlr/TimeHandlr.js)
     *                          events.js (settings/events.js)
     */
    function resetTimeHandler(EightBitter, customs) {
        EightBitter.TimeHandler = new TimeHandlr(proliferate({
            "classAdd": EightBitter.addClass,
            "classRemove": EightBitter.removeClass
        }, EightBitter.settings.events));
    }
    
    /**
     * Sets self.AudioPlayer.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): AudioPlayr (src/AudioPlayr/AudioPlayr.js)
     *                          audio.js (settings/audio.js)
     */
    function resetAudioPlayer(EightBitter, customs) {
        EightBitter.AudioPlayer = new AudioPlayr(proliferate({
            "getVolumeLocal": EightBitter.getVolumeLocal.bind(EightBitter, EightBitter),
            "getThemeDefault": EightBitter.getAudioThemeDefault.bind(EightBitter, EightBitter),
            "statistics": {
                "proliferate": EightBitter.proliferate
            }
        }, EightBitter.settings.audio));
    }
    
    /**
     * Sets self.GamesRunner.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): GamesRunnr (src/GamesRunnr/GamesRunnr.js)
     *                          runner.js (settings/runner.js)
     */
    function resetGamesRunner(EightBitter, customs) {
        EightBitter.GamesRunner = new GamesRunnr(proliferate({
            "scope": EightBitter,
            "onPlay": EightBitter.onGamePlay.bind(EightBitter, EightBitter),
            "onPause": EightBitter.onGamePause.bind(EightBitter, EightBitter)
        }, EightBitter.settings.runner));
    }
    
    /**
     * Sets self.StatsHolder.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): StatsHoldr (src/StatsHoldr/StatsHoldr.js)
     *                          statistics.js (settings/statistics.js)
     */
    function resetStatsHolder(EightBitter, customs) {
        EightBitter.StatsHolder = new StatsHoldr(proliferate({
            "callbackArgs": [EightBitter],
            "proliferate": EightBitter.proliferate,
            "createElement": EightBitter.createElement
        }, EightBitter.settings.statistics));
    }
    
    /**
     * Sets self.ThingHitter.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): ThingHittr (src/ThingHittr/ThingHittr.js)
     *                          collisions.js (settings/collisions.js)
     */
    function resetThingHitter(EightBitter, customs) {
        EightBitter.ThingHitter = new ThingHittr(proliferate({
            "scope": EightBitter
        }, EightBitter.settings.collisions));
        
        EightBitter.GroupHolder = EightBitter.ThingHitter.getGroupHolder();
        
        EightBitter.ThingHitter.cacheHitCheckGroup("Solid");
        EightBitter.ThingHitter.cacheHitCheckGroup("Character");
    }
    
    /**
     * Sets self.MapScreener.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): MapScreenr (src/MapScreenr/MapScreenr.js)
     *                          maps.js (settings/maps.js)
     */
    function resetMapScreener(EightBitter, customs) {
        EightBitter.MapScreener = new MapScreenr({
            "EightBitter": EightBitter,
            "unitsize": FullScreenMario.unitsize,
            "width": customs.width,
            "height": customs.height,
            "variableArgs": [EightBitter],
            "variables": EightBitter.settings.maps.screenVariables
        });
    }
    
    /**
     * Sets self.NumberMaker.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): NumberMaker (src/NumberMakr/NumberMakr.js)
     */
    function resetNumberMaker(EightBitter, customs) {
        EightBitter.NumberMaker = new NumberMakr();
    }
    
    /**
     * Sets self.MapCreator.
     * 
     * @param {EightBittr} EightBitter
     * @remarks Requirement(s): MapCreatr (src/MapCreatr/MapCreatr.js)
     *                          maps.js (settings/maps.js)
     */
    function resetMapsCreator(EightBitter, customs) {
        EightBitter.MapsCreator = new MapsCreatr({
            "ObjectMaker": EightBitter.ObjectMaker,
            "groupTypes": ["Character", "Scenery", "Solid", "Text"],
            "macros": EightBitter.settings.maps.macros,
            "entrances": EightBitter.settings.maps.entrances,
            "maps": EightBitter.settings.maps.library,
            "scope": EightBitter
        });
    }
    
    /**
     * Sets self.MapsHandler.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): MapsHandlr (src/MapsHandlr/MapsHandlr.js)
     *                          maps.js (settings/maps.js)
     */
    function resetMapsHandler(EightBitter, customs) {
        EightBitter.MapsHandler = new MapsHandlr({
            "MapsCreator": EightBitter.MapsCreator,
            "MapScreener": EightBitter.MapScreener,
            "screenAttributes": EightBitter.settings.maps.screenAttributes,
            "onSpawn": EightBitter.settings.maps.onSpawn,
            "stretchAdd": EightBitter.mapAddStretched.bind(EightBitter),
            "onStretch": EightBitter.mapStretchThing,
            "afterAdd": EightBitter.mapAddAfter.bind(EightBitter)
        });
    }
    
    /**
     * Sets self.InputWriter.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): InputWritr (src/InputWritr/InputWritr.js)
     *                          input.js (settings/input.js)
     */
    function resetInputWriter(EightBitter, customs) {
        EightBitter.InputWriter = new InputWritr(proliferate({
            "canTrigger": EightBitter.canInputsTrigger.bind(EightBitter, EightBitter)
        }, EightBitter.settings.input.InputWritrArgs));
    }
    
    /**
     * Sets self.LevelEditor.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): LevelEditr (src/LevelEditr/LevelEditr.js)
     *                          editor.js (settings/editor.js)
     */
    function resetLevelEditor(EightBitter, customs) {
        EightBitter.LevelEditor = new LevelEditr(proliferate({
            "GameStarter": EightBitter,
			"beautifier": js_beautify // Eventually there will be a custom beautifier... maybe
        }, EightBitter.settings.editor));
    }
    
    /**
     * Sets self.WorldSeeder.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): WorldSeedr (src/WorldSeedr/WorldSeedr.js)
     *                          generator.js (settings/generator.js)
     */
    function resetWorldSeeder(EightBitter, customs) {
        EightBitter.WorldSeeder = new WorldSeedr(proliferate({
            "random": EightBitter.NumberMaker.random,
            "onPlacement": EightBitter.mapPlaceRandomCommands.bind(EightBitter, EightBitter)
        }, EightBitter.settings.generator));
    }
    
    /**
     * Sets self.ModAttacher.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     * @remarks Requirement(s): ModAttachr (src/ModAttachr/ModAttachr.js)
     *                          mods.js (settings/mods.js)
     */
    function resetModAttacher(EightBitter, customs) {
        EightBitter.ModAttacher = new ModAttachr(proliferate({
            "scopeDefault": EightBitter,
            "StatsHoldr": StatsHoldr,
            "proliferate": EightBitter.proliferate,
            "createElement": EightBitter.createElement
        }, EightBitter.settings.mods));
    }
    
    /** 
     * Starts self.ModAttacher. All mods are enabled, and the "onReady" trigger
     * is fired.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     */
    function startModAttacher(EightBitter, customs) {
        var mods = customs.mods,
            i;
        
        if (mods) {
            for (i in mods) {
                if (mods[i]) {
                    EightBitter.ModAttacher.enableMod(i);
                }
            }
        }
        
        EightBitter.ModAttacher.fireEvent("onReady", EightBitter, EightBitter);
    }
    
    /**
     * Resets the parent HTML container. Width and height are set by customs, 
     * and canvas and StatsHolder container elements are added.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     */
    function resetContainer(EightBitter, customs) {
        EightBitter.container = EightBitter.createElement("div", {
            "className": "FullScreenMario EightBitter",
            "style": EightBitter.proliferate({
                "position": "relative",
                "width": customs.width + "px",
                "height": customs.height + "px"
            }, customs.style)
        });
        
        EightBitter.canvas = EightBitter.createCanvas(customs.width, customs.height);
        EightBitter.PixelDrawer.setCanvas(EightBitter.canvas);
        
        EightBitter.container.appendChild(EightBitter.canvas);
        EightBitter.container.appendChild(EightBitter.StatsHolder.getContainer());
    }
    
    
    /* Global manipulations
    */
    
    /**
     * Scrolls the game window by shifting all Things and checking for quadrant
     * refreshes.
     * 
     * @this {GameStartr}
     * @param {Number} dx   How far to scroll horizontally.
     * @param {Number} [dy]   How far to scroll vertically.
     */
    function scrollWindow(dx, dy) {
        var EightBitter = EightBittr.ensureCorrectCaller(this);
        
        dx = dx | 0;
        dy = dy | 0;
        
        if (!dx && !dy) {
            return;
        }
        
        EightBitter.MapScreener.shift(dx, dy);
        EightBitter.shiftAll(-dx, -dy);
        
        EightBitter.QuadsKeeper.shiftQuadrants(-dx, -dy);
    }
    
    /**
     * Scrolls everything but a single Thing.
     * 
     * 
     * @this {GameStartr}
     * @param {Thing} thing
     * @param {Number} dx   How far to scroll horizontally.
     * @param {Number} [dy]   How far to scroll vertically.
     */
    function scrollThing(thing, dx, dy) {
        var saveleft = thing.left,
            savetop = thing.top;
        
        thing.EightBitter.scrollWindow(dx, dy);
        thing.EightBitter.setLeft(thing, saveleft);
        thing.EightBitter.setTop(thing, savetop);
    }
    
    /**
     * Spawns all Things within a given area that should be there. 
     * 
     * @param {EightBittr} EightBitter
     * @param {String} direction
     * @param {Number} top
     * @param {Number} right
     * @param {Number} bottom
     * @param {Number} left
     * @remarks This is generally called by a QuadsKeepr during a screen update.
     */
    function onAreaSpawn(EightBitter, direction, top, right, bottom, left) {
        EightBitter.MapsHandler.spawnMap(
            direction,
            (top + EightBitter.MapScreener.top) / EightBitter.unitsize,
            (right + EightBitter.MapScreener.left) / EightBitter.unitsize,
            (bottom + EightBitter.MapScreener.top) / EightBitter.unitsize,
            (left + EightBitter.MapScreener.left) / EightBitter.unitsize
        );
    }
    
    /**
     * "Unspawns" all Things within a given area that should be gone by marking
     * their PreThings as not in game.
     * 
     * @param {EightBittr} EightBitter
     * @param {String} direction
     * @param {Number} top
     * @param {Number} right
     * @param {Number} bottom
     * @param {Number} left
     * @remarks This is generally called by a QuadsKeepr during a screen update.
     */
    function onAreaUnspawn(EightBitter, direction, top, right, bottom, left) {
        EightBitter.MapsHandler.unspawnMap(
            direction,
            (top + EightBitter.MapScreener.top) / EightBitter.unitsize,
            (right + EightBitter.MapScreener.left) / EightBitter.unitsize,
            (bottom + EightBitter.MapScreener.top) / EightBitter.unitsize,
            (left + EightBitter.MapScreener.left) / EightBitter.unitsize
        );
    }
    
    /**
     * Adds a new Thing to the game at a given position, relative to the top
     * left corner of the screen. 
     * 
     * @param {Mixed} thing   What type of Thing to add. This may be a String of
     *                        the class title, an Array containing the String
     *                        and an Object of settings, or an actual Thing.
     * @param {Number} [left]   Defaults to 0.
     * @param {Number} [top]   Defaults to 0.
     */
    function addThing(thing, left, top) {
        if (typeof(thing) === "string" || thing instanceof String) {
            thing = this.ObjectMaker.make(thing);
        } else if (thing.constructor === Array) {
            thing = this.ObjectMaker.make.apply(this.ObjectMaker, thing);
        }
        
        if (arguments.length > 2) {
            thing.EightBitter.setLeft(thing, left);
            thing.EightBitter.setTop(thing, top);
        } else if (arguments.length > 1) {
            thing.EightBitter.setLeft(thing, left);
        }
        
        thing.EightBitter.updateSize(thing);
        
        thing.EightBitter.GroupHolder.getFunctions().add[thing.grouptype](thing);
        thing.placed = true;
        
        // This will typically be a TimeHandler.cycleClass call
        if (thing.onThingAdd) {
            thing.onThingAdd(thing);
        }
        
        thing.EightBitter.PixelDrawer.setThingSprite(thing);
        
        // This will typically be a spawn* call
        if (thing.onThingAdded) {
            thing.onThingAdded(thing);
        }
        
        thing.EightBitter.ModAttacher.fireEvent("onAddThing", thing, left, top);
        
        return thing;
    }
    
    /**
     * Processes a Thing so that it is ready to be placed in gameplay. There are
     * a lot of steps here: width and height must be set with defaults and given
     * to spritewidth and spriteheight, a quadrants Array must be given, the 
     * sprite must be set, attributes and onThingMake called upon, and initial
     * class cycles and flipping set.
     * 
     * @param {Thing} thing
     * @param {String} type   What type Thing this is (the name of the class).
     * @param {Object} [settings]   Additional settings to be given to the 
     *                              Thing.
     * @param {Object} defaults   The default settings for the Thing's class.
     * @remarks This is generally called as the onMake call in an ObjectMakr.
     */
    function thingProcess(thing, type, settings, defaults) {
        // If the Thing doesn't specify its own title, use the type by default
        thing.title = thing.title || type;
        
        // If a width/height is provided but no spritewidth/height,
        // use the default spritewidth/height
        if (thing.width && !thing.spritewidth) {
            thing.spritewidth = defaults.spritewidth || defaults.width;
        }
        if (thing.height && !thing.spriteheight) {
            thing.spriteheight = defaults.spriteheight || defaults.height;
        }
        
        // "Infinity" height refers to objects that reach exactly to the bottom
        if (thing.height === "Infinity") {
            thing.height = thing.EightBitter.getAbsoluteHeight(thing.y) / thing.EightBitter.unitsize;
        }
        
        // Each thing has at least 4 maximum quadrants (for the QuadsKeepr)
        var maxquads = 4,
            num;
        num = Math.floor(
            thing.width * (
                FullScreenMario.unitsize / thing.EightBitter.QuadsKeeper.getQuadrantWidth()
            )
        );
        if (num > 0) {
            maxquads += ((num + 1) * maxquads / 2);
        }
        num = Math.floor(
            thing.height * (
                FullScreenMario.unitsize / thing.EightBitter.QuadsKeeper.getQuadrantHeight()
            )
        );
        if (num > 0) {
            maxquads += ((num + 1) * maxquads / 2);
        }
        thing.maxquads = maxquads;
        thing.quadrants = new Array(maxquads);
        
        // Basic sprite information
        thing.spritewidth = thing.spritewidth || thing.width;
        thing.spriteheight = thing.spriteheight || thing.height;
        
        // Sprite sizing
        thing.spritewidthpixels = thing.spritewidth * FullScreenMario.unitsize;
        thing.spriteheightpixels = thing.spriteheight * FullScreenMario.unitsize;
        
        // Canvas, context, imageData
        thing.canvas = FullScreenMario.prototype.createCanvas(
            thing.spritewidthpixels, thing.spriteheightpixels
        );
        thing.context = thing.canvas.getContext("2d");
        thing.imageData = thing.context.getImageData(
            0, 0, thing.spritewidthpixels, thing.spriteheightpixels
        );
        
        if (thing.opacity !== 1) {
            thing.EightBitter.setOpacity(thing, thing.opacity);
        }
        
        // Attributes, such as Koopa.smart
        if (thing.attributes) {
            thingProcessAttributes(thing, thing.attributes, settings);
        }
        
        // Important custom functions
        if (thing.onThingMake) {
            thing.onThingMake(thing, settings);
        }
        
        // Initial class / sprite setting
        thing.EightBitter.setSize(thing, thing.width, thing.height);
        thing.EightBitter.setClassInitial(thing, thing.name || thing.title);
        
        // Sprite cycles
        var cycle;
        if (cycle = thing.spriteCycle) {
            thing.EightBitter.TimeHandler.addClassCycle(
                thing, cycle[0], cycle[1] || null, cycle[2] || null
            );
        }
        if (cycle = thing.spriteCycleSynched) {
            thing.EightBitter.TimeHandler.addClassCycleSynched(
                thing, cycle[0], cycle[1] || null, cycle[2] || null
            );
        }
        
        // flipHoriz and flipVert initially 
        if (thing.flipHoriz) {
            thing.EightBitter.flipHoriz(thing);
        }
        if (thing.flipVert) {
            thing.EightBitter.flipVert(thing);
        }
        
        // ThingHittr becomes very non-performant if functions aren't generated
        // for each Thing constructor (optimization does not respect prototypal 
        // inheritance, sadly)
        thing.EightBitter.ThingHitter.cacheHitCheckType(
            thing.title,
            thing.grouptype
        );
        
        // Mods!
        thing.EightBitter.ModAttacher.fireEvent(
            "onThingMake", thing.EightBitter, thing, type, settings, defaults
        );
    }
    
    /**
     * Processes additional Thing attributes. For each attribute the Thing's
     * class says it may have, if it has it, the attribute's key is appeneded to
     * the Thing's name and the attribute value proliferated onto the Thing.
     * 
     * @param {Thing} thing
     * @param {Object} attributes
     */
    function thingProcessAttributes(thing, attributes) {
        var attribute, i;

        // For each listing in the attributes...
        for (attribute in attributes) {
            // If the thing has that attribute as true:
            if (thing[attribute]) {
                // Add the extra options
                proliferate(thing, attributes[attribute]);
                // Also add a marking to the name, which will go into the className
                if (thing.name) {
                    thing.name += ' ' + attribute;
                } else {
                    thing.name = thing.title + ' ' + attribute;
                }
            }
        }
    }
    
    
    /* Physics & similar
    */
    
    /** 
     * Sets a Thing's "changed" flag to true, which indicates to the PixelDrawr
     * to redraw the Thing and its quadrant.
     * 
     * @param {Thing} thing
     */
    function markChanged(thing) {
        thing.changed = true;
    }
    
    /**
     * Shifts a Thing vertically using the EightBittr utility, and marks the
     * Thing as having a changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} dy
     * @param {Boolean} [notChanged]   Whether to skip marking the Thing as
     *                                 changed (by default, false).
     */
    function shiftVert(thing, dy, notChanged) {
        EightBittr.prototype.shiftVert(thing, dy);
        
        if (!notChanged) {
            thing.EightBitter.markChanged(thing);
        }
    }
    
    /**
     * Shifts a Thing horizontally using the EightBittr utility, and marks the
     * Thing as having a changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} dx
     * @param {Boolean} [notChanged]   Whether to skip marking the Thing as
     *                                 changed (by default, false).
     */
    function shiftHoriz(thing, dx, notChanged) {
        EightBittr.prototype.shiftHoriz(thing, dx);
        
        if (!notChanged) {
            thing.EightBitter.markChanged(thing);
        }
    }
    
    /**
     * Sets a Thing's top using the EightBittr utility, and marks the Thing as
     * having a changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} top
     */
    function setTop(thing, top) {
        EightBittr.prototype.setTop(thing, top);
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Sets a Thing's right using the EightBittr utility, and marks the Thing as
     * having a changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} right
     */
    function setRight(thing, right) {
        EightBittr.prototype.setRight(thing, right);
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Sets a Thing's bottom using the EightBittr utility, and marks the Thing
     * as having a changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} bottom
     */
    function setBottom(thing, bottom) {
        EightBittr.prototype.setBottom(thing, bottom);
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Sets a Thing's left using the EightBittr utility, and marks the Thing
     * as having a changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} left
     */
    function setLeft(thing, left) {
        EightBittr.prototype.setLeft(thing, left);
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Shifts a thing both horizontally and vertically. If the Thing marks 
     * itself as having a parallax effect (parallaxHoriz or parallaxVert), that
     * proportion of movement is respected (.5 = half, etc.).
     * 
     * @param {Thing} thing
     * @param {Number} dx
     * @param {Number} dy
     * @param {Boolean} [notChanged]   Whether to skip marking the Thing as
     *                                 changed (by default, false).
     */
    function shiftBoth(thing, dx, dy, notChanged) {
        dx = dx || 0;
        dy = dy || 0;
        
        if (!thing.noshiftx) {
            if (thing.parallaxHoriz) {
                thing.EightBitter.shiftHoriz(
                    thing, thing.parallaxHoriz * dx, notChanged
                );
            } else {
                thing.EightBitter.shiftHoriz(thing, dx, notChanged);
            }
        }
        
        if (!thing.noshifty) {
            if (thing.parallaxVert) {
                thing.EightBitter.shiftVert(
                    thing, thing.parallaxVert * dy, notChanged
                );
            } else {
                thing.EightBitter.shiftVert(thing, dy, notChanged);
            }
        }
    }
    
    /**
     * Calls shiftBoth on all members of an Array.
     * 
     * @param {Number} dx
     * @param {Number} dy
     * @param {Boolean} [notChanged]   Whether to skip marking the Thing as
     *                                 changed (by default, false).
     */
    function shiftThings(things, dx, dy, notChanged) {
        for (var i = things.length - 1; i >= 0; i -= 1) {
            things[i].EightBitter.shiftBoth(things[i], dx, dy, notChanged);
        }
    }
    
    /**
     * Calls shiftBoth on all groups in the calling EightBittr's GroupHoldr.
     * 
     * @this {GameStartr}
     * @param {Number} dx
     * @param {Number} dy
     */
    function shiftAll(dx, dy) {
        var EightBitter = EightBittr.ensureCorrectCaller(this);
        EightBitter.GroupHolder.callAll(
            EightBitter, EightBitter.shiftThings, dx, dy, true
        );
    }

    /**
     * Sets the width and unitwidth of a Thing, and optionally updates the
     * Thing's spritewidth and spritewidth pixels, and/or calls updateSize.
     * The thing is marked as having changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} width
     * @param {Boolean} [updateSprite]   Whether to update the Thing's
     *                                   spritewidth and spritewidthpixels (by
     *                                   default, false).
     * @param {Boolean} [updateSize]   Whether to call updateSize on the Thing
     *                                 (by default, false).
     */
    function setWidth(thing, width, updateSprite, updateSize) {
        thing.width = width;
        thing.unitwidth = width * thing.EightBitter.unitsize;
        
        if (updateSprite) {
            thing.spritewidth = width;
            thing.spritewidthpixels = width * thing.EightBitter.unitsize;
        }
        
        if (updateSize) {
            thing.EightBitter.updateSize(thing);
        }
        
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Sets the height and unitheight of a Thing, and optionally updates the
     * Thing's spriteheight and spriteheight pixels, and/or calls updateSize.
     * The thing is marked as having changed appearance.
     * 
     * @param {Thing} thing
     * @param {Number} height
     * @param {Boolean} [updateSprite]   Whether to update the Thing's
     *                                   spriteheight and spriteheightpixels (by
     *                                   default, false).
     * @param {Boolean} [updateSize]   Whether to call updateSize on the Thing
     *                                 (by default, false).
     */
    function setHeight(thing, height, updateSprite, updateSize) {
        thing.height = height;
        thing.unitheight = height * thing.EightBitter.unitsize;
        
        if (updateSprite) {
            thing.spriteheight = height;
            thing.spriteheightpixels = height * thing.EightBitter.unitsize;
        }
        
        if (updateSize) {
            thing.EightBitter.updateSize(thing);
        }
        
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Utility to call both setWidth and setHeight on a Thing.
     * 
     * @param {Thing} thing
     * @param {Number} width
     * @param {Number} height
     * @param {Boolean} [updateSprite]   Whether to update the Thing's
     *                                   spritewidth, spriteheight, 
     *                                   spritewidthpixels, and
     *                                   spritspriteheightpixels (by default,
     *                                   false).
     * @param {Boolean} [updateSize]   Whether to call updateSize on the Thing
     *                                 (by default, false).
     */
    function setSize(thing, width, height, updateSprite, updateSize) {
        thing.EightBitter.setWidth(thing, width, updateSprite, updateSize);
        thing.EightBitter.setHeight(thing, height, updateSprite, updateSize);
    }
    
    /**
     * Shifts a Thing horizontally by its xvel and vertically by its yvel, using
     * shiftHoriz and shiftVert.
     * 
     * @param {Thing} thing
     */
    function updatePosition(thing) {
        thing.EightBitter.shiftHoriz(thing, thing.xvel);
        thing.EightBitter.shiftVert(thing, thing.yvel);
    }
    
    /**
     * Completely updates the size measurements of a Thing. That means the
     * unitwidth, unitheight, spritewidthpixels, spriteheightpixels, and
     * spriteheightpixels attributes. The Thing's sprite is then updated by the
     * PixelDrawer, and its appearance is marked as changed.
     * 
     * @param {Thing} thing
     */
    function updateSize(thing) {
        thing.unitwidth = thing.width * thing.EightBitter.unitsize;
        thing.unitheight = thing.height * thing.EightBitter.unitsize;
        thing.spritewidthpixels = thing.spritewidth * thing.EightBitter.unitsize;
        thing.spriteheightpixels = thing.spriteheight * thing.EightBitter.unitsize;
        
        thing.canvas.width = thing.spritewidthpixels;
        thing.canvas.height = thing.spriteheightpixels;
        thing.EightBitter.PixelDrawer.setThingSprite(thing);
        
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Reduces a Thing's width by pushing back its right and decreasing its 
     * width. It is marked as changed in appearance.
     * 
     * @param {Thing} thing
     * @param {Number} dx
     * @param {Boolean} [updateSize]   Whether to also call updateSize on the 
     *                                 Thing (by default, false).
     */
    function reduceWidth(thing, dx, see) {
        thing.right -= dx;
        thing.width -= dx / thing.EightBitter.unitsize;
        
        if (see) {
            thing.EightBitter.updateSize(thing);
        } else {
            thing.EightBitter.markChanged(thing);
        }
    }
    
    /**
     * Reduces a Thing's height by pushing down its top and decreasing its 
     * height. It is marked as changed in appearance.
     * 
     * @param {Thing} thing
     * @param {Number} dy
     * @param {Boolean} [updateSize]   Whether to also call updateSize on the 
     *                                 Thing (by default, false).
     */
    function reduceHeight(thing, dy, updateSize) {
        thing.top += dy;
        thing.height -= dy / thing.EightBitter.unitsize;
        
        if (updateSize) {
            thing.EightBitter.updateSize(thing);
        } else {
            thing.EightBitter.markChanged(thing);
        }
    }
    
    /**
     * Reduces a Thing's height by pushing down its top and decreasing its 
     * height. It is marked as changed in appearance.
     * 
     * @param {Thing} thing
     * @param {Number} dy
     * @param {Boolean} [updateSize]   Whether to also call updateSize on the 
     *                                 Thing (by default, false).
     */
    function increaseHeight(thing, dy) {
        thing.top -= dy;
        thing.height += dy / thing.EightBitter.unitsize;
        thing.unitheight = thing.height * thing.EightBitter.unitsize;
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Increases a Thing's width by pushing forward its right and decreasing its 
     * width. It is marked as changed in appearance.
     * 
     * @param {Thing} thing
     * @param {Number} dx
     * @param {Boolean} [updateSize]   Whether to also call updateSize on the 
     *                                 Thing (by default, false).
     */
    function increaseWidth(thing, dx) {
        thing.right += dx;
        thing.width += dx / thing.EightBitter.unitsize;
        thing.unitwidth = thing.width * thing.EightBitter.unitsize;
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Completely pauses a Thing by setting its velocities to zero and disabling
     * it from falling, colliding, or moving. Its old attributes for those are
     * saved so thingResumeVelocity may restore them.
     * 
     * @param {Thing} thing
     * @param {Boolean} [keepMovement]   Whether to keep movement instead of
     *                                   wiping it (by default, false).
     */
    function thingPauseVelocity(thing, keepMovement) {
        thing.xvelOld = thing.xvel || 0;
        thing.yvelOld = thing.yvel || 0;
        
        thing.nofallOld = thing.nofall || false;
        thing.nocollideOld = thing.nocollide || false;
        thing.movementOld = thing.movement || thing.movementOld;
        
        thing.nofall = thing.nocollide = true;
        thing.xvel = thing.yvel = false;
        
        if (!keepMovement) {
            thing.movement = undefined;
        }
    }
    
    /**
     * Resumes a Thing's velocity and movements after they were paused by
     * thingPauseVelocity.
     * 
     * @param {Thing} thing
     * @param {Boolean} [noVelocity]   Whether to skip restoring the Thing's
     *                                 velocity (by default, false).
     */
    function thingResumeVelocity(thing, noVelocity) {
        if (!noVelocity) {
            thing.xvel = thing.xvelOld || 0;
            thing.yvel = thing.yvelOld || 0;
        }
        
        thing.movement = thing.movementOld || thing.movement;
        thing.nofall = thing.nofallOld || false;
        thing.nocollide = thing.nocollideOld || false;
    }
    
    
    /* Appearance utilities
    */
    
    /**
     * Generates a key for a Thing based off the current area and the Thing's
     * basic attributes. This key should be used for PixelRender.get calls, to
     * cache the Thing's sprite.
     * 
     * @param {Thing} thing
     * @return {String} A key that to identify the Thing's sprite.
     */
    function generateObjectKey(thing) {
        return thing.EightBitter.MapsHandler.getArea().setting 
                + ' ' + thing.libtype + ' ' 
                + thing.title + ' ' + thing.className;
    }
    
    /**
     * Sets the class of a Thing, sets the new sprite for it, and marks it as 
     * having changed appearance. The class is stored in the Thing's internal
     * .className attribute.
     * 
     * @param {Thing} thing
     * @param {String} string   The new internal .className for the Thing.
     */
    function setClass(thing, string) {
        thing.className = string;
        thing.EightBitter.PixelDrawer.setThingSprite(thing);
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * A version of setClass to be used before the Thing's sprite attributes
     * have been set. This just sets the internal .className.
     * 
     * @param {Thing} thing
     * @param {String} string
     */
    function setClassInitial(thing, string) {
        thing.className = string;
    }
    
    /**
     * Adds a string to a Thing's class after a ' ', updates the Thing's 
     * sprite, and marks it as having changed appearance.
     * 
     * @param {Thing} thing
     * @param {String} string
     */
    function addClass(thing, string) {
        thing.className += " " + string;
        thing.EightBitter.PixelDrawer.setThingSprite(thing);
        thing.EightBitter.markChanged(thing);
    }
    
    /**
     * Adds multiple strings to a Thing's class after a ' ', updates the Thing's 
     * sprite, and marks it as having changed appearance. Strings may be given 
     * as Arrays or Strings; Strings will be split on ' '. Any number of 
     * additional arguments may be given.
     * 
     * @param {Thing} thing
     * @param {Mixed} string
     */
    function addClasses(thing) {
        var strings, arr, i, j;
        for (i = 1; i < arguments.length; i += 1) {
            arr = arguments[i];
            
            if (!(arr instanceof Array)) {
                arr = arr.split(' ');
            }
            
            for (j = arr.length - 1; j >= 0; j -= 1) {
                thing.EightBitter.addClass(thing, arr[j]);
            }
        }
    }
    
    /**
     * Removes a string from a Thing's class, updates the Thing's sprite, and
     * marks it as having changed appearance.
     * 
     * @param {Thing} thing
     * @param {String} string
     */
    function removeClass(thing, string) {
        if (!string) {
            return;
        }
        if (string.indexOf(" ") !== -1) {
            thing.EightBitter.removeClasses(thing, string);
        }
        thing.className = thing.className.replace(new RegExp(" " + string, "gm"), "");
        thing.EightBitter.PixelDrawer.setThingSprite(thing);
    }
    
    /**
     * Removes multiple strings from a Thing's class, updates the Thing's 
     * sprite, and marks it as having changed appearance. Strings may be given 
     * as Arrays or Strings; Strings will be split on ' '. Any number of 
     * additional arguments may be given.
     * 
     * @param {Thing} thing
     * @param {Mixed} string
     */
    function removeClasses(thing) {
        var strings, arr, i, j;
        for (i = 1; i < arguments.length; ++i) {
            arr = arguments[i];
            if (!(arr instanceof Array)) {
                arr = arr.split(" ");
            }
            
            for (j = arr.length - 1; j >= 0; --j) {
                thing.EightBitter.removeClass(thing, arr[j]);
            }
        }
    }
    
    /**
     * @param {Thing} thing
     * @param {String} string
     * @return {Boolean} Whether the Thing's class contains the String.
     */
    function hasClass(thing, string) {
        return thing.className.indexOf(string) !== -1;
    }
    
    /**
     * Removes the first class from a Thing and adds the second. All typical
     * sprite updates are called.
     * 
     * @param {Thing} thing
     * @param {String} stringOut
     * @param {String} stringIn
     */
    function switchClass(thing, stringOut, stringIn) {
        thing.EightBitter.removeClass(thing, stringOut);
        thing.EightBitter.addClass(thing, stringIn);
    }
    
    /**
     * Marks a Thing as being flipped horizontally by setting its .flipHoriz
     * attribute to true and giving it a "flipped" class.
     * 
     * @param {Thing}
     */
    function flipHoriz(thing) {
        thing.flipHoriz = true;
        thing.EightBitter.addClass(thing, "flipped");
    }
    
    /**
     * Marks a Thing as being flipped vertically by setting its .flipVert
     * attribute to true and giving it a "flipped" class.
     * 
     * @param {Thing}
     */
    function flipVert(thing) {
        thing.flipVert = true;
        thing.EightBitter.addClass(thing, "flip-vert");
    }
    
    /**
     * Marks a Thing as not being flipped horizontally by setting its .flipHoriz
     * attribute to false and giving it a "flipped" class.
     * 
     * @param {Thing}
     */
    function unflipHoriz(thing) {
        thing.flipHoriz = false;
        thing.EightBitter.removeClass(thing, "flipped");
    }
    
    /**
     * Marks a Thing as not being flipped vertically by setting its .flipVert
     * attribute to true and giving it a "flipped" class.
     * 
     * @param {Thing}
     */
    function unflipVert(thing) {
        thing.flipVert = false;
        thing.EightBitter.removeClass(thing, "flip-vert");
    }
    
    /**
     * Sets the opacity of the Thing and marks its appearance as changed.
     * 
     * @param {Thing} thing
     * @param {Number} opacity   A number in [0,1].
     */
    function setOpacity(thing, opacity) {
        thing.opacity = opacity;
        thing.EightBitter.markChanged(thing);
    }
    
    
    /* Miscellaneous utilities
    */
    
    /**
     * Removes a Thing from an Array using Array.splice. If the thing has an 
     * onDelete, that is called.
     * 
     * @param {Thing} thing
     * @param {Array} array
     * @param {Number} [location]   The index of the Thing in the Array, for
     *                              speed's sake (by default, it is found
     *                              using Array.indexOf).
     */
    function arrayDeleteThing(thing, array, location) {
        if (typeof location === "undefined") {
            location = array.indexOf(thing);
            if (location === -1) {
                return;
            }
        }
        
        array.splice(location, 1);
        
        if (typeof(thing.onDelete) === "function") {
            thing.onDelete(thing);
        }
    }
    
    /**
     * Takes a snapshot of the current screen canvas by simulating a click event
     * on a dummy link.
     * 
     * @param {String} [name]   A name for the image to be saved as (by default,
     *                          "FullScreenMario Screenshot").
     * @param {String} [format]   A format for the image to be saved as (by
     *                            default, "png").
     * @remarks For security concerns, browsers won't allow this unless it's
     *          called within a callback of a genuine user-triggered event.
     */
    function takeScreenshot(name, format) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            format = "image/png",
            link = EightBitter.createElement("a", {
                "download": (name || "FullScreenMario Screenshot") 
                    + "." + format,
                "href": EightBitter.canvas.toDataURL(format)
                    .replace(format, "image/octet-stream")
            });
            
        link.click();
    }
    
    
    proliferateHard(EightBitterProto, {
        // Resets
        "reset": reset,
        "resetTimed": resetTimed,
        "resetObjectMaker": resetObjectMaker,
        "resetQuadsKeeper": resetQuadsKeeper,
        "resetPixelRender": resetPixelRender,
        "resetTimeHandler": resetTimeHandler,
        "resetAudioPlayer": resetAudioPlayer,
        "resetGamesRunner": resetGamesRunner,
        "resetStatsHolder": resetStatsHolder,
        "resetThingHitter": resetThingHitter,
        "resetMapScreener": resetMapScreener,
        "resetPixelDrawer": resetPixelDrawer,
        "resetNumberMaker": resetNumberMaker,
        "resetMapsCreator": resetMapsCreator,
        "resetMapsHandler": resetMapsHandler,
        "resetInputWriter": resetInputWriter,
        "resetLevelEditor": resetLevelEditor,
        "resetWorldSeeder": resetWorldSeeder,
        "resetModAttacher": resetModAttacher,
        "startModAttacher": startModAttacher,
        "resetContainer": resetContainer,
        // Global manipulations
        "scrollWindow": scrollWindow,
        "scrollThing": scrollThing,
        "onAreaSpawn": onAreaSpawn,
        "onAreaUnspawn": onAreaUnspawn,
        "addThing": addThing,
        "thingProcess": thingProcess,
        "thingProcessAttributes": thingProcessAttributes,
        // Physics & similar
        "markChanged": markChanged,
        "shiftVert": shiftVert,
        "shiftHoriz": shiftHoriz,
        "setTop": setTop,
        "setRight": setRight,
        "setBottom": setBottom,
        "setLeft": setLeft,
        "shiftBoth": shiftBoth,
        "shiftThings": shiftThings,
        "shiftAll": shiftAll,
        "setWidth": setWidth,
        "setHeight": setHeight,
        "setSize": setSize,
        "updatePosition": updatePosition,
        "updateSize": updateSize,
        "reduceWidth": reduceWidth,
        "reduceHeight": reduceHeight,
        "increaseWidth": increaseWidth,
        "increaseHeight": increaseHeight,
        "thingPauseVelocity": thingPauseVelocity,
        "thingResumeVelocity": thingResumeVelocity,
        // Appearance utilities
        "generateObjectKey": generateObjectKey,
        "setClass": setClass,
        "setClassInitial": setClassInitial,
        "addClass": addClass,
        "addClasses": addClasses,
        "removeClass": removeClass,
        "removeClasses": removeClasses,
        "hasClass": hasClass,
        "switchClass": switchClass,
        "flipHoriz": flipHoriz,
        "flipVert": flipVert,
        "unflipHoriz": unflipHoriz,
        "unflipVert": unflipVert,
        "setOpacity": setOpacity,
        // Miscellaneous utilities
        "arrayDeleteThing": arrayDeleteThing,
        "takeScreenshot": takeScreenshot
    });
    
    return GameStartr;
})(EightBittr);
/**
 * AudioPlayr.js
 * 
 * An audio library to automate preloading and controlled playback of multiple
 * audio tracks, with support for different browsers' preferred fileTypes.
 * Volume and mute status are stored locally using a StatsHoldr, which in turn
 * requires proliferate and createElement functions (such as those given by the
 * EightBittr prototype).
 * 
 * @example
 * // Creating and using an AudioPlayr to load and play audio files. The 
 * // 'Sounds/Samples/mp3' directory should have Coin.mp3 and Bump.mp3 in it.
 * var AudioPlayer = new AudioPlayr({
 *     "directory": "Sounds",
 *     "fileTypes": ["mp3"],
 *     "statistics": {
 *         "prefix": "MyAudioPlayr",
 *         "proliferate": EightBittr.prototype.proliferate,
 *         "createElement": EightBittr.prototype.createElement,
 *         "values": {
 *             "volume": {
 *                 "valueDefault": 0.5,
 *                 "storeLocally": true
 *             },
 *             "muted": {
 *                 "valueDefault": 0,
 *                 "storeLocally": false
 *             }
 *         }
 *     },
 *     "library": {
 *         "Sounds": [
 *             "Coin",
 *             "Bump"
 *         ]
 *     }
 * });
 * AudioPlayer.play("Coin"); // Returns an <audio> playing Coin.mp3
 * 
 * @example
 * // Creating and using an AudioPlayr to load and play audio files. A theme 
 * // track is kept looping in the background, and the Coin sound is played 
 * // every seven seconds.
 * var AudioPlayer = new AudioPlayr({
 *     "directory": "Sounds",
 *     "fileTypes": ["mp3"],
 *     "statistics": {
 *         "prefix": "MyAudioPlayr",
 *         "proliferate": EightBittr.prototype.proliferate,
 *         "createElement": EightBittr.prototype.createElement,
 *         "values": {
 *             "volume": {
 *                 "valueDefault": 0.5,
 *                 "storeLocally": true
 *             },
 *             "muted": {
 *                 "valueDefault": 0,
 *                 "storeLocally": false
 *             }
 *         }
 *     },
 *     "library": {
 *         "Sounds": [
 *             "Coin"
 *         ],
 *         "Themes": [
 *             "Overworld"
 *         ]
 *     }
 * });
 * AudioPlayer.playTheme("Overworld");
 * setInterval(function () {
 *     AudioPlayer.play("Coin");
 * }, 7000);
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function AudioPlayr(settings) {
    "use strict";
    if (!this || this === window) {
        return new AudioPlayr(settings);
    }
    var self = this,

        // A listing of filenames to be turned into <audio> objects.
        library,

        // What file types to add as sources to sounds.
        fileTypes,

        // Currently playing sound objects, keyed by name (no extensions).
        sounds,

        // The currently playing theme.
        theme,

        // Directory from which audio files are AJAXed upon startup.
        directory,

        // The Function or Number used to determine what playLocal's volume is.
        getVolumeLocal,

        // The Function or String used to get a default theme name.
        getThemeDefault,

        // Storage container for settings like volume and muted status.
        StatsHolder;
    
    /**
     * Resets the AudioPlayr.
     * 
     * @constructor
     * @param {Object} library   The names of the audio files to be preloaded so
     *                           they can later be played by the AudioPlayr. The
     *                           library Object stores Objects inside it, 
     *                           representing the paths within each filetype's
     *                           directory.
     * @param {String} directory   The directory in which all directories of 
     *                             audio files are stored.
     * @param {String[]} filetypes   The allowed filetypes for each audio file.
     *                               Each of these should have a directory of
     *                               their name under the main directory, which
     *                               should contain each file of the filetype.
     * @param {Object} statistics   The arguments to be passed to the internal
     *                              StatsHoldr. This must contain values for 
     *                              "volume" and "muted".
     * @param {Mixed} [getVolumeLocal]   A Function or Number to get the "local"
     *                                   volume for playLocal calls. Functions
     *                                   are called for a return value, and 
     *                                   Numbers are constant (defaults to 1).
     * @param {Mixed} [getThemeDefault]   A Function or String to get the 
     *                                    default theme for playTheme calls.
     *                                    Functions are called for a return
     *                                    value, and Strings are constant
     *                                    (defaults to "Theme").
     */
    self.reset = function reset(settings) {
        library = settings.library;
        directory = settings.directory;
        fileTypes = settings.fileTypes;
        getVolumeLocal = settings.getVolumeLocal || 1;
        getThemeDefault = settings.getThemeDefault || "Theme";

        // Sounds should always start blank
        sounds = {};

        // Preload everything!
        libraryLoad();
        
        StatsHolder = new StatsHoldr(settings.statistics);
        
        self.setVolume(StatsHolder.get("volume"));
        self.setMuted(StatsHolder.get("muted"));
    };
    
    
    /* Simple getters
    */
    
    /**
     * @return {Object} The listing of <audio> Elements, keyed by name.
     */
    self.getLibrary = function () {
        return library;
    };
    
    /**
     * @return {String[]} The allowed filetypes for audio files.
     */
    self.getfileTypes = function () {
        return fileTypes;
    };
    
    /**
     * @return {Object} The currently playing <audio> Elements, keyed by name.
     */
    self.getSounds = function () {
        return sounds;
    };
    
    /**
     * @return {HTMLAudioElement} The current playing theme's <audio> Element.
     */
    self.getTheme = function () {
        return theme;
    };
    
    /**
     * @return {String} The directory under which all filetype directories are 
     *                  to be located.
     */
    self.getDirectory = function () {
        return directory;
    };
    
    
    /* Playback modifiers
    */
    
    /**
     * @return {Number} The current volume, which is a Number in [0,1],
     *                  retrieved by the StatsHoldr.
     */
    self.getVolume = function () {
        return StatsHolder.get("volume");
    };
    
    /**
     * Sets the current volume. If not muted, all sounds will have their volume
     * updated.
     * 
     * @param {Number} volume   A Number in [0,1] to set as the current volume.
     */
    self.setVolume = function (volume) {
        if (!self.getMuted()) {
            for (var i in sounds) {
                sounds[i].volume = sounds[i].volumeReal * volume;
            }
        }
        
        StatsHolder.set("volume", volume);
    };
    
    /**
     * @return {Boolean} whether this is currently muted.
     */
    self.getMuted = function () {
        return Boolean(StatsHolder.get("muted"));
    };
    
    /**
     * Calls either setMutedOn or setMutedOff as is appropriate.
     * 
     * @param {Boolean} muted   The new status for muted.
     */
    self.setMuted = function (muted) {
        muted ? self.setMutedOn() : self.setMutedOff();
    }
    
    /**
     * Calls either setMutedOn or setMutedOff to toggle whether this is muted.
     */
    self.toggleMuted = function () {
        self.setMuted(!self.getMuted());
    };
    
    /**
     * Sets volume to 0 in all currently playing sounds and stores the muted
     * status as on in the internal StatsHoldr.
     */
    self.setMutedOn = function () {
        for (var i in sounds) {
            if (sounds.hasOwnProperty(i)) {
                sounds[i].volume = 0;
            }
        }
        StatsHolder.set("muted", 1);
    };
    
    /**
     * Sets sound volumes to their actual volumes and stores the muted status
     * as off in the internal StatsHoldr.
     */
    self.setMutedOff = function () {
        var volume = self.getVolume(),
            sound, i;
        
        for (i in sounds) {
            if (sounds.hasOwnProperty(i)) {
                sound = sounds[i];
                sound.volume = sound.volumeReal * volume;
            }
        }
        
        StatsHolder.set("muted", 0);
    };
    
    
    /* Playback
    */
    
    /**
     * @param {String} name   The name of the sound to play.
     * 
     * Plays the sound of the given name. Internally, this stops any previously
     * playing sound of that name and starts a new one, with volume set to the
     * current volume and muted status. If the name wasn't previously being 
     * played (and therefore a new Element has been created), an event listener
     * is added to delete it from sounds after.
     * 
     * @return {HTMLAudioElement} The sound's <audio> element, now playing.
     */
    self.play = function (name) {
        var sound;
        
        // If the sound isn't yet being played, see if it's in the library
        if (!sounds.hasOwnProperty(name)) {
            // If the sound also isn't in the library, it's unknown
            if (!library.hasOwnProperty(name)) {
                throw new Error(
                    "Unknown name given to AudioPlayr.play: '" + name + "'."
                ); 
            }
            sounds[name] = sound = library[name];
        } else {
            sound = sounds[name];
        }
        
        soundStop(sound);
        
        if (self.getMuted()) {
            sound.volume = 0;
        } else {
            sound.volumeReal = 1;
            sound.volume = self.getVolume();
        }
        
        sound.play();
        
        // If this is the song's first play, let it know how to stop
        if (!sound.used) {
            sound.used += 1;
            sound.addEventListener("ended", soundFinish.bind(undefined, name));
        }
        
        return sound;
    };
    
    /**
     * Pauses all currently playing sounds.
     */
    self.pauseAll = function () {
        for (var i in sounds) {
            if (sounds.hasOwnProperty(i)) {
                sounds[i].pause();
            }
        }
    };
    
    /**
     * Un-pauses (resumes) all currently paused sounds.
     */
    self.resumeAll = function () {
        for (var i in sounds) {
            if (!sounds.hasOwnProperty(i)) {
                continue;
            }
            
            sounds[i].play();
        }
    };
    
    /**
     * Pauses the currently playing theme, if there is one.
     */
    self.pauseTheme = function () {
        if (theme) {
            theme.pause();
        }
    };
    
    /**
     * Resumes the theme, if there is one and it's paused.
     */
    self.resumeTheme = function () {
        if (theme) {
            theme.play();
        }
    };
    
    /**
     * Stops all sounds and any theme, and removes all references to them.
     */
    self.clearAll = function () {
        self.pauseAll();
        self.theme = undefined;
        sounds = {};
    };
    
    /**
     * "Local" version of play that changes the output sound's volume depending
     * on the result of a getVolumeLocal call. This defaults to 1, but may be
     * less. For example, in a video game, sounds further from the viewpoint
     * should have lessened volume.
     * 
     * @param {String} name   The name of the sound to play.
     * @param {Mixed} [location]   An argument for getVolumeLocal, if that's a
     *                             Function.
     * @return {HTMLAudioElement} The sound's <audio> element, now playing.
     */
    self.playLocal = function (name, location) {
        var sound = self.play(name);

        switch (getVolumeLocal.constructor) {
            case Function:
                sound.volumeReal = getVolumeLocal(location);
                break;
            case Number:
                sound.volumeReal = getVolumeLocal;
                break;
            default:
                sound.volumeReal = Number(volumeReal) || 1;
                break;
        }
        
        if (self.getMuted()) {
            sound.volume = 0;
        } else {
            sound.volume = sound.volumeReal * self.getVolume();
        }

        return sound;
    };
    
    /**
     * Pauses any previously playing theme and starts playback of a new theme
     * sound. This is different from normal sounds in that it normally loops and
     * is controlled by pauseTheme and co. If loop is on and the sound wasn't
     * already playing, an event listener is added for when it ends.
     * 
     * @param {String} [name]   The name of the sound to be used as the theme.
     *                          If not provided, getThemeDefault is used to 
     *                          provide one.
     * @param {Boolean} [loop]   Whether the theme should always loop (by 
     *                           default, false).
     * @return {HTMLAudioElement} The theme's <audio> element, now playing.
     */
    self.playTheme = function (name, loop) {
        self.pauseTheme();
        
        // Loop defaults to true
        loop = typeof loop !== 'undefined' ? loop : true;

        // If name isn't given, use the default getter
        if (typeof(name) === "undefined") {
            switch (getThemeDefault.constructor) {
                case Function:
                    name = getThemeDefault();
                    break
                case String:
                    name = getThemeDefault;
                    break;
            }
        }
        
        sounds[name] = theme = self.play(name);
        theme.loop = loop;

        // If it's used (no repeat), add the event listener to resume theme
        if (theme.used === 1) {
            theme.addEventListener("ended", self.playTheme);
        }

        return theme;
    };
    
    /**
     * Wrapper around playTheme that plays a sound, then a theme. This is 
     * implemented using an event listener on the sound's ending.
     * 
     * @param {String} [name]   The name of the sound to be used as the theme.
     *                          If not provided, getThemeDefault is used to 
     *                          provide one.
     * @param {Boolean} [loop]   Whether the theme should always loop (by 
     *                           default, false).
     * @return {HTMLAudioElement} The sound's <audio> element, now playing.
     */
    self.playThemePrefixed = function (prefix, name, loop) {
        var sound = self.play(prefix);
        self.pauseTheme();
        
        // If name isn't given, use the default getter
        if (typeof(name) === "undefined") {
            switch (getThemeDefault.constructor) {
                case Function:
                    name = getThemeDefault();
                    break
                case String:
                    name = getThemeDefault;
                    break;
            }
        }
        
        self.addEventListener(
            prefix,
            "ended", 
            self.playTheme.bind(self, prefix + " " + name, loop)
        );
        
        return sound;
    };


    /* Public utilities
    */

    /**
     * Adds an event listener to a currently playing sound.
     * 
     * @param {String} name   The name of the sound.
     * @param {String} event   The name of the event, such as "ended".
     * @param {Function} callback   The Function to be called by the event.
     */
    self.addEventListener = function(name, event, callback) {
        if (!sounds.hasOwnProperty(name)) {
            throw new Error(
                "Unknown name given to AudioPlayr.addEventListener: '" + name + "'."
            );
        }
        
        sounds[name].addEventListener(event, callback);
    };

    /**
     * Adds an event listener to a sound. If the sound doesn't exist or has 
     * finished playing, it's called immediately.
     * 
     * @param {String} name   The name of the sound.
     * @param {String} event   The name of the event, such as "onended".
     * @param {Function} callback   The Function to be called by the event.
     */
    self.addEventImmediate = function(name, event, callback) {
        if (!sounds.hasOwnProperty(name) || sounds[name].paused) {
            callback();
            return;
        }
        
        sounds[name].addEventListener(event, callback);
    };
    

    /* Private utilities
    */

    /**
     * Called when a sound has completed to get it out of sounds.
     */
    function soundFinish(name) {
        if (sounds.hasOwnProperty(name)) {
            delete sounds[name];
        }
    }

    /**
     * Carefully stops a sound. HTMLAudioElement don't natively have a .stop()
     * function, so this is the shim to do that.
     */
    function soundStop(sound) {
        sound.pause();
        if (sound.readyState) {
            sound.currentTime = 0;
        }
    }


    /* Private loading / resetting
     */

    /**
     * Loads every sound defined in the library via AJAX. Sounds are loaded
     * into <audio> elements via createAudio and stored in the library.
     */
    function libraryLoad() {
        var section, name, sectionName, j;

        // For each given section (e.g. names, themes):
        for (sectionName in library) {
            section = library[sectionName];
            // For each thing in that section:
            for (j in section) {
                name = section[j];
                // Create the sound and store it in the container
                library[name] = createAudio(name, sectionName);
            }
        }
    }

    /**
     * Creates an audio element, gives it sources, and starts preloading.
     * 
     * @param {String} name
     * @param {String} sectionName
     * @return {HTMLAudioElement}
     */
    function createAudio(name, sectionName) {
        var sound = document.createElement("audio"),
            type, child, i;

        // Create an audio source for each child
        for (i in fileTypes) {
            type = fileTypes[i];
            child = document.createElement("source");
            child.type = "audio/" + type;
            child.src = directory + "/" + sectionName + "/" + type + "/" + name + "." + type;
            
            sound.appendChild(child);
        }

        // This preloads the sound.
        sound.volume = 0;
        sound.volumeReal = 1;
        sound.used = 0;
        sound.play();
        
        return sound;
    }
     
    
    self.reset(settings || {});
}
/**
 * ChangeLinr.js
 * 
 * A general utility for transforming raw input to processed output. This is 
 * done by keeping an Array of transform Functions to process input on.  
 * Outcomes for inputs are cached so repeat runs are O(1).
 * 
 * @example 
 * // Creating and using a ChangeLinr to square numbers.
 * var ChangeLiner = new ChangeLinr({
 *     "transforms": {
 *          "square": function (number) {
 *              return number * number;
 *          }    
 *      },
 *     "pipeline": ["square"]
 * });
 * console.log(ChangeLiner.process(7), "Test"); // 49
 * console.log(ChangeLiner.getCached("Test")); // 49
 * 
 * @example
 * // Creating and using a ChangeLinr to calculate Fibonacci numbers.
 * var ChangeLiner = new ChangeLinr({
 *     "transforms": {
 *         "fibonacci": function (number, key, attributes, ChangeLiner) {
 *             if (!number) {
 *                 return 0;
 *             } else if (number === 1) {
 *                 return 1;
 *             }
 *             return ChangeLiner.process(number - 1) + ChangeLiner.process(number - 2);
 *         }
 *     },
 *     "pipeline": ["fibonacci"]
 * });
 * console.log(ChangeLiner.process(7)); // 13
 * console.log(ChangeLiner.getCache()); // {0: 0, 1: 1, ... 6: 8, 7: 13}
 * 
 * @example
 * // Creating and using a ChangeLinr to lowercase a string, remove whitespace,
 * // and sum the character codes of the result. 
 * var ChangeLiner = new ChangeLinr({
 *     "transforms": {
 *         "toLowerCase": function (string) {
 *             return string.toLowerCase();
 *         },
 *         "removeWhitespace": function (string) {
 *             return string.replace(/\s/g, '');
 *         },
 *         "sum": function (string) {
 *             var total = 0,
 *                 i;
 *             for (i = 0; i < string.length; i += 1) {
 *                 total += string.charCodeAt(i);
 *             }
 *             return total;
 *         }
 *     },
 *     "pipeline": ["toLowerCase", "removeWhitespace", "sum"]
 * });
 * console.log(ChangeLiner.process("Hello world!", "Test")); // 1117
 * console.log(ChangeLiner.getCached("Test")); // 1117
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function ChangeLinr(settings) {
    "use strict";
    if (!this || this === window) {
        return new ChangeLinr(settings);
    }
    var self = this,

        // Associative array of functions ("name"=>function)
        transforms,

        // Ordered array of function names to be applied to raw input
        pipeline,
        pipelineLength,

        // Cached output of the pipeline: out-facing and inward, respectively
        cache,
        cacheFull,
        
        // Whether this should be caching responses
        doMakeCache,

        // Whether this should be retrieving cached results
        doUseCache,

        // Whether global functions are allowed in the pipeline (normally true)
        doUseGlobals;

    /**
     * Resets the ChangeLinr.
     * 
     * @constructor
     * @param {String[]} pipeline   The ordered pipeline of String names of the
     *                              transforms to call.
     * @param {Object} [transforms]   An Object containing Functions keyed by
     *                                their String name.
     * @param {Boolean} [doMakeCache]   Whether a cache should be constructed
     *                                  from inputs (defaults to true).
     * @param {Boolean} [doUseCache]   Whether the cache should be used to 
     *                                 cache outputs (defaults to true).
     * @param {Boolean} [doUseGlobals]   Whether global Functions may be 
     *                                   referenced by the pipeline Strings,
     *                                   rather than just ones in transforms
     *                                   (defaults to false).
     */
    self.reset = function reset(settings) {
        var i;
        
        if (typeof settings.pipeline === "undefined") {
            throw new Error("No pipeline given to ChangeLinr.");
        }
        
        if (!settings.pipeline.length) {
            throw new Error("Empty or invalid pipeline given to ChangeLinr.");
        }
        
        pipeline = settings.pipeline || [];
        transforms = settings.transforms || {};
        
        doMakeCache = (typeof settings.doMakeCache === "undefined") 
            ? true : settings.doMakeCache;
        
        doUseCache = (typeof settings.doUseCache === "undefined")
            ? true : settings.doUseCache;
        
        doUseGlobals = settings.hasOwnProperty("doUseGlobals")
            ? false : settings.doUseGlobals;
        
        pipelineLength = pipeline.length;
        
        cache = {};
        cacheFull = {};

        // Ensure the pipeline is formatted correctly
        for (i = 0; i < pipelineLength; ++i) {
            // Don't allow null/false transforms
            if (!pipeline[i]) {
                throw new Error("Pipe[" + i + "] is invalid.");
            }

            // Make sure each part of the pipeline exists
            if (!transforms.hasOwnProperty(pipeline[i])) {
                if (doUseGlobals) {
                    transforms[pipeline[i]] = window[pipeline[i]];
                }
                if (!transforms.hasOwnProperty(pipeline[i])) {
                    throw new Error("Pipe[" + i + "] (" + pipeline[i] + ") "
                        + "not found in transforms.");
                }
            }

            // Also make sure each part of the pipeline is a function
            if (!(transforms[pipeline[i]] instanceof Function)) {
                throw new Error("Pipe[" + i + "] (" + pipeline[i] + ") "
                    + "is not a valid function from transforms.");
            }

            cacheFull[i] = cacheFull[pipeline[i]] = {};
        }
    };
    
    
    /* Simple gets
    */

    /**
     * @return {Object} The cached output of self.process and self.processFull.
     */
    self.getCache = function () {
        return cache;
    };
    
    /**
     * @param {String} key   The key under which the output was processed
     * @return {Mixed} The cached output filed under the given key.
     */
    self.getCached = function (key) {
        return cache[key];
    };
    
    /**
     * @return {Object} A complete listing of the cached outputs from all 
     *                  processed information, from each pipeline transform.
     */
    self.getCacheFull = function () {
        return cacheFull;
    };
    
    /**
     * @return {Boolean} Whether the cache object is being kept.
     */
    self.getDoMakeCache = function () {
        return doMakeCache;
    };
    
    /**
     * @return {Boolean} Whether previously cached output is being used in new
     *                   process requests.
     */
    self.getDoUseCache = function () {
        return doUseCache;
    };
    
    
    /* Simple sets
    */
    
    /**
     * Sets whether the cache object is being kept.
     * 
     * @param {Boolean} value
     */
    self.setDoMakeCache = function (value) {
        doMakeCache = value;
    };
    
    /**
     * Sets whether previously cached output is being used in new process 
     * requests.
     * 
     * @param {Boolean} value
     */
    self.setDoUseCache = function (value) {
        doUseCache = value;
    };
    
    
    /* Core processing
    */

    /**
     * Applies a series of transforms to input data. If doMakeCache is on, the
     * outputs of this are stored in cache and cacheFull.
     * 
     * @param {Mixed} data   The data to be transformed.
     * @param {String} [key]   They key under which the data is to be stored.
     *                         If needed but not provided, defaults to data.
     * @param {Object} [attributes]   Any extra attributes to be given to the
     *                                transform Functions.
     * @return {Mixed} The final output of the pipeline.
     */
    self.process = function (data, key, attributes) {
        var i;
        
        if ((doMakeCache || doUseCache) && typeof key === "undefined") {
            key = data;
        }

        // If this keyed input was already processed, get that
        if (doUseCache && cache.hasOwnProperty(key)) {
            return cache[key];
        }
        
        // Apply (and optionally cache) each transform in order
        for (i = 0; i < pipelineLength; ++i) {
            data = transforms[pipeline[i]](data, key, attributes, self);
            
            if (doMakeCache) {
                cacheFull[pipeline[i]][key] = data;
            }
        }
        
        if (doMakeCache) {
            cache[key] = data;
        }

        return data;
    };

    /**
     * A version of self.process that returns the complete output from each 
     * pipelined transform Function in an Object.
     * 
     * @param {Mixed} data   The data to be transformed.
     * @param {String} [key]   They key under which the data is to be stored.
     *                         If needed but not provided, defaults to data.
     * @param {Object} [attributes]   Any extra attributes to be given to the
     *                                transform Functions.
     * @return {Object} The complete output of the transforms.
     */
    self.processFull = function (raw, key, attributes) {
        var output = {},
            i;
        
        self.process(raw, key, attributes);
        
        for (i = 0; i < pipelineLength; ++i) {
            output[i] = output[pipeline[i]] = cacheFull[pipeline[i]][key];
        }
        
        return output;
    };

    self.reset(settings || {});
}
/**
 * FPSAnalyzr.js
 * 
 * A general utility for obtaining and analyzing framerate measurements. The 
 * most recent measurements are kept up to a certain point (either an infinite
 * number or a set amount). Options for analyzing the data such as getting the
 * mean, median, extremes, etc. are available.
 * 
 * @example
 * // Creating and using an FPSAnalyzr to measure setInterval accuracy.
 * var FPSAnalyzer = new FPSAnalyzr();
 * setInterval(FPSAnalyzer.measure.bind(FPSAnalyzer), 1000 / 30);
 * setTimeout(
 *     function () {
 *         console.log("Average FPS:", FPSAnalyzer.getAverage());
 *     },
 *     7000
 * );
 * 
 * @example
 * // Creating and using an FPSAnalyzr to look at the 10 most recent FPS
 * // measurements and get the best & worst amounts.
 * var target = 1000 / 30,
 *     numKept = 10,
 *     FPSAnalyzer = new FPSAnalyzr({
 *         "maxKept": numKept
 *     }),
 *     i;
 * 
 * for (i = 0; i < numKept; i += 1) {
 *     setTimeout(FPSAnalyzer.measure.bind(FPSAnalyzer), i * target);
 * }
 * 
 * setTimeout(
 *     function () {
 *         console.log("Measurements:", FPSAnalyzer.getMeasurements());
 *         console.log("Extremes:", FPSAnalyzer.getExtremes());
 *         console.log("Range:", FPSAnalyzer.getRange());
 *     },
 *     numKept * i * target
 * );
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function FPSAnalyzr(settings) {
    "use strict";
    if (!this || this === window) {
        return new FPSAnalyzr(settings);
    }
    var self = this,
        
        // The number of FPS measurements to keep
        maxKept,
        
        // A recent history of FPS measurements (normally an Array)
        // These are stored as changes in millisecond timestamps
        measurements,
        
        // The actual number of FPS measurements currently known
        numRecorded,
        
        // The current position in the measurements Array
        ticker,
        
        // The most recent performance.now timestamp
        timeCurrent,
        
        // A system-dependant performance.now function
        getTimestamp;
    
    /**
     * Resets the FPSAnalyzr.
     * 
     * @constructor
     * @param {Number} [maxKept]   The maximum number of FPS measurements to
     *                             keep. This defaults to 35, and can be a
     *                             Number or Infinity otherwise.
     * @param [Function} getTimestamp   A function used to get an accurate
     *                                  timestamp. By default this is 
     *                                  performance.now.
     */
    self.reset = function (settings) {
        maxKept = settings.maxKept || 35;
        numRecorded = 0;
        ticker = -1;
        
        // If maxKept is a Number, make the measurements array that long
        // If it's infinite, make measurements an {} (infinite array)
        measurements = isFinite(maxKept) ? new Array(maxKept) : {};
        
        // Unlike InputWritr, getTimestamp won't use Date.now()
        if (typeof settings.getTimestamp === "undefined") {
            getTimestamp = (
                performance.now
                || performance.webkitNow
                || performance.mozNow
                || performance.msNow
                || performance.oNow
            ).bind(performance);
        } else {
            getTimestamp = settings.getTimestamp;
        }
    };
    
    
    /* Public interface
    */
    
    /**
     * Standard public measurement function.
     * Marks the current timestamp as timeCurrent, and adds an FPS measurement
     * if there was a previous timeCurrent.
     * 
     * @alias self.measure
     * @param {DOMHighResTimeStamp} time   An optional timestamp, without which
     *                                     getTimestamp() is used instead.
     */
    self.measure = function (time) {
        var timeNew = time || getTimestamp(),
            fpsNew;
        
        if (timeCurrent) {
            self.addFPS(1000 / (timeNew - timeCurrent));
        }
        
        timeCurrent = timeNew;
    }
    
    /**
     * Adds an FPS measurement to measurements, and increments the associated
     * count variables.
     * 
     * @param {Number} fps   An FPS calculated as the difference between two
     *                       timestamps.
     */
    self.addFPS = function(fps) {
        ticker = (ticker += 1) % maxKept;
        measurements[ticker] = fps;
        numRecorded += 1;
    };
    
    /**
     * Returns the result of a call to the internal system-dependant 
     * performance.now.
     * 
     * @return {Number}
     */
    self.getTimestamp = function () {
        return getTimestamp();
    };
    
    
    /* Gets
    */
    
    /**
     * Get function for numRecorded
     * 
     * @return {Number}
     */
    self.getNumRecorded = function () {
        return numRecorded;
    };
    
    /**
     * Get function for a copy of the measurements listing (if the number of
     * measurements is less than the max, that size is used)
     * 
     * @return {Object}   An object (normally an Array) of the most recent FPS
     *                    measurements
     */
    self.getMeasurements = function () {
        var fpsKeptReal = Math.min(maxKept, numRecorded),
            copy, i;
        if (isFinite(maxKept)) {
            copy = new Array(fpsKeptReal);
        } else {
            copy = {};
            copy.length = fpsKeptReal;
        }
        
        for (i = fpsKeptReal - 1; i >= 0; --i) {
            copy[i] = measurements[i];
        }
        
        return copy;
    }
    
    /**
     * Get function for a copy of the measurements listing, but with the FPS
     * measurements transformed back into time differences
     * 
     * @return {Object}   An object (normally an Array) of the most recent FPS
     *                    time differences
     */
    self.getDifferences = function () {
        var copy = self.getMeasurements(),
            i;
        
        for (i = copy.length - 1; i >= 0; --i) {
            copy[i] = 1000 / copy[i];
        }
        
        return copy;
    }
    
    /**
     * @return {Number} The average recorded FPS measurement.
     */
    self.getAverage = function () {
        var total = 0,
            max = Math.min(maxKept, numRecorded),
            i;
        
        for (i = max - 1; i >= 0; --i) {
            total += measurements[i];
        }
        
        return total / max;
    }
    
    /**
     * @remarks This is O(n*log(n)), where n is the size of the history,
     *          as it creates a copy of the history and sorts it.
     * @return {Number} The median recorded FPS measurement.
     */
    self.getMedian = function () {
        var copy = self.getMeasurements().sort(),
            fpsKeptReal = copy.length,
            fpsKeptHalf = Math.floor(fpsKeptReal / 2),
            i;
         
        if (copy.length % 2 == 0) {
            return copy[fpsKeptHalf];
        } else {
            return (copy[fpsKeptHalf - 2] + copy[fpsKeptHalf]) / 2;
        }
    }
    
    /**
     * @return {Number[]} An Array containing the lowest and highest recorded
     *                    FPS measurements, in that order.
     */
    self.getExtremes = function () {
        var lowest = measurements[0],
            highest = lowest,
            max = Math.min(maxKept, numRecorded),
            fps,
            i;
        
        for (i = max - 1; i >= 0; --i) {
            fps = measurements[i];
            if (fps > highest) highest = fps;
            else if (fps < lowest) lowest = fps;
        }
        
        return [lowest, highest];
    }
    
    /**
     * @return {Number} The range of recorded FPS measurements
     */
    self.getRange = function () {
        var extremes = self.getExtremes();
        return extremes[1] - extremes[0];
    }
    
    
    self.reset(settings || {});
}
/**
 * GamesRunnr.js
 * 
 * A class to continuously series of "game" Functions. Each game is run in a 
 * set order and the group is run as a whole at a particular interval, with a
 * configurable speed. Playback can be triggered manually, or driven by a timer
 * with pause and play hooks. For automated playback, statistics are 
 * available via an internal FPSAnalyzer.
 * 
 * @example
 * // Creating and using a GamesRunnr to print the screen size every second.
 * var GamesRunner = new GamesRunnr({
 *     "interval": 1000,
 *     "games": [
 *         function () {
 *             console.log("Screen size: " + innerWidth + "x" + innerHeight);
 *         }
 *     ]
 * });
 * GamesRunner.play();
 * 
 * @example
 * // Creating and using a GamesRunnr to remove the first member of an Array 
 * // and output the remaining members every second until only one is left.
 * var numbers = ['a', 'b', 'c', 'd'],
 *     GamesRunner = new GamesRunnr({
 *         "interval": 1000,
 *         "games": [
 *             numbers.pop.bind(numbers),
 *             console.log.bind(console, numbers),
 *             function () {
 *                 if (numbers.length === 1) {
 *                     GamesRunner.pause();
 *                     console.log("All done!");
 *                 }
 *             }
 *         ]
 *         
 *     });
 * GamesRunner.play();
 * // After 1 second:  ['a', 'b', 'c']
 * // After 2 seconds: ['a', 'b']
 * // After 3 seconds: ['a']
 * //                  "All done!"
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function GamesRunnr(settings) {
    "use strict";
    if (!this || this === window) {
        return new FPSAnalyzr(settings);
    }
    var self = this,
    
        // Array of functions to be run on each upkeep
        games,
        
        // Optional trigger functions triggered on...
        onPause,   // self.pause()
        onPlay, // self.play()
        
        // Reference to the next upkeep, such as setTimeout's returned int
        upkeepNext,
        
        // Function used to schedule the next upkeep, such as setTimeout
        upkeepScheduler,
        
        // Function used to cancel the next upkeep, such as clearTimeout
        upkeepCanceller,
        
        // Boolean: whether the game is paused
        paused,
        
        // Number: amount of time, in milliseconds, between each upkeep
        interval,
        
        // Playback rate (defaults to 1)
        speed,
        
        // The actual speed, as (1 / speed) * interval
        intervalReal,
        
        // An FPSAnalyzr object that measures on each upkeep
        FPSAnalyzer,
        
        // An object to set as the scope for games (if not self)
        scope,
        
        // Whether scheduling timeouts should adjust to elapsed upkeep time
        adjustFramerate;
    
    /**
     * Resets the GamesRunnr.
     * 
     * @constructor
     * @param {Function[]} games   The Array of Functions to run on each 
     *                             upkeep.
     * @param {Number} [interval]   How often, in milliseconds, to call upkeep
     *                              when playing (defaults to 1000 / 60).
     * @param {Number} [speed]   A multiplier for interval that can be set
     *                           independently.
     * @param {FPSAnalyzr} [FPSAnalyzer]   An FPSAnalyzer to provide statistics
     *                                     on automated playback. If not
     *                                     provided, a new one will be made.
     * @param {Function} [onPause]   A callback to run when upkeep is paused.
     * @param {Function} [onPlay]   A callback to run when upkeep is played.
     * @param {Function} [upkeepScheduler]   A Function to replace setTimeout.
     * @param {Function} [upkeepCanceller]   A Function to replace 
     *                                       clearTimeout.
     * @param {Mixed} scope   A scope for games to be run on (defaults to the 
     *                        window).
     */
    self.reset = function(settings) {
        var i;
        
        games = settings.games || [];
        interval = settings.interval || 1000 / 60;
        speed = settings.speed || 1;
        onPause = settings.onPause;
        onPlay = settings.onPlay;
        upkeepScheduler = settings.upkeepScheduler || window.setTimeout;
        upkeepCanceller = settings.upkeepCanceller || window.clearTimeout;
        FPSAnalyzer = settings.FPSAnalyzer || new FPSAnalyzr();
        adjustFramerate = settings.adjustFramerate;
        scope = settings.scope || window;
        paused = true;
        
        for (i = 0; i < games.length; i += 1) {
            games[i] = games[i].bind(scope);
        }
        
        setintervalReal();
    };
    
    
    /* Gets
    */
    
    /** 
     * @return {FPSAnalyzer} The FPSAnalyzer used in the GamesRunnr.
     */
    self.getFPSAnalyzer = function () {
        return FPSAnalyzer;
    };
    
    /**
     * @return {Boolean} Whether this is paused.
     */
    self.getPaused = function () {
        return paused;
    };
    
    /**
     * @return {Function[]} The Array of game Functions.
     */
    self.getGames = function () {
        return games;
    };
    
    /**
     * @return {Number} The interval between upkeeps.
     */
    self.getInterval = function () {
        return interval;
    };
    
    /**
     * @return {Number} The speed multiplier being applied to the interval.
     */
    self.getSpeed = function () {
        return speed;
    };
    
    
    /* Runtime
    */
    
    /**
     * Meaty function, run every <interval*speed> milliseconds, to mark an FPS
     * measurement and run every game once.
     */
    self.upkeep = function () {
        if (paused) {
            return;
        }
        
        if (adjustFramerate) {
            upkeepNext = upkeepScheduler(
                self.upkeep, intervalReal - (self.upkeepTimed() | 0)
            );
        } else {
            upkeepNext = upkeepScheduler(self.upkeep, intervalReal);
            games.forEach(run);
        }
        
        FPSAnalyzer.measure();
    };
    
    /**
     * A utility for self.upkeep that calls the same games.forEach(run), timing
     * the total execution time.
     * 
     * @return {Number} The total time spent, in milliseconds.
     */
    self.upkeepTimed = function () {
        var now = FPSAnalyzer.getTimestamp();
        games.forEach(run);
        return FPSAnalyzer.getTimestamp() - now;
    };
    
    
    /**
     * Continues execution of self.upkeep by calling it. If an onPlay has been
     * defined, it's called before.
     */
    self.play = function () {
        if (!paused) {
            return;
        }
        paused = false;
        
        if (onPlay) {
            onPlay(self);
        }
        
        self.upkeep();
    };
    
    /**
     * Stops execution of self.upkeep, and cancels the next call. If an onPause
     * has been defined, it's called after.
     */
    self.pause = function () {
        if (paused) {
            return;
        }
        paused = true;
        
        if (onPause) {
            onPause(self);
        }
        
        upkeepCanceller(self.upkeep);
    };
    
    /**
     * Calls upkeep a <num or 1> number of times, immediately.
     * 
     * @param {Number} [num]   How many times to upkeep, if not 1.
     */
    self.step = function(num) {
        self.play();
        self.pause();
        if (num > 0) {
            self.step(num - 1);
        }
    };
    
    /**
     * Toggles whether this is paused, and calls the appropriate Function.
     */
    self.togglePause = function () {
        paused ? self.play() : self.pause();
    };
    
    
    /* Games manipulations
    */
    
    /**
     * Sets the interval between between upkeeps.
     * 
     * @param {Number} The new time interval in milliseconds.
     */
    self.setInterval = function(num) {
        var realint = Number(num);
        
        if (isNaN(realint)) {
            throw new Error("Invalid Number given to setInterval:", num);
            return self;
        }
        
        interval = realint;
        setintervalReal();
    };
    
    /**
     * Sets the speed multiplier for the interval.
     * 
     * @param {Number} The new speed multiplier. 2 will cause interval to be
     *                 twice as fast, and 0.5 will be half as fast.
     */
    self.setSpeed = function(num) {
        var numReal = Number(num);
        
        if (isNaN(numReal)) {
            throw new Error("Invalid Number given to setSpeed:", num);
            return self;
        }
        
        speed = numReal;
        setintervalReal();
    };
    
    
    /* Utilities
    */
    
    /**
     * Sets the intervalReal variable, which is interval * (inverse of speed).
     */
    function setintervalReal() {
        intervalReal = (1 / speed) * interval;
    }
    
    /**
     * Curry function to fun a given function. Used in games.forEach(game).
     * 
     * @param {Function} game
     */
    function run(game) {
        game();
    }
    
    
    self.reset(settings || {});
}
/**
 * GroupHoldr.js
 * 
 * A general utility to keep Arrays and/or Objects by key names within a
 * container so they can be referenced automatically by those keys. Automation
 * is made easier by more abstraction, such as by automatically generated add,
 * remove, etc. methods.
 * 
 * @example
 * // Creating and using a GroupHoldr to store populations of locations.
 * var GroupHolder = new GroupHoldr({
 *     "groupNames": ["Country", "State"],
 *     "groupTypes": "Object"
 * });
 * 
 * GroupHolder.addCountry("United States", 316130000);
 * GroupHolder.addCountry("Canada", 35160000);
 * GroupHolder.addState("New York", 19650000);
 * 
 * console.log(GroupHolder.getCountry("United States")); // 316,130,000
 * 
 * @example
 * // Creating and using a GroupHoldr to hold people by their age group.
 * var GroupHolder = new GroupHoldr({
 *     "groupNames": ["Child", "Adult"],
 *     "groupTypes": "Array"
 * });
 * 
 * GroupHolder.addChild("Alex");
 * GroupHolder.addChild("Bob");
 * GroupHolder.getGroup("Adult").push("Carol");
 * GroupHolder.getGroups().Adult.push("Devin");
 * 
 * console.log(GroupHolder.getAdultGroup()); // ["Carol", "Devin"]
 * 
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function GroupHoldr(settings) {
    "use strict";
    if (!this || this === window) {
        return new GroupHoldr(settings);
    }
    var self = this,
        
        // Associative array of strings to groups, where groups are each some
        // sort of array (either typical or associative).
        groups,
        
        // Associative array containing "add", "del", "get", and "set" keys to
        // those appropriate functions (e.x. functions.add.MyGroup is the same
        // as self.addMyGroup).
        functions,
        
        // Array of string names, each of which is tied to a group.
        groupNames,
        
        // Associative array keying each group to the function it uses: Array
        // for regular arrays, and Object for associative arrays.
        groupTypes,
        
        // Associative array keying each group to the string name of the
        // function it uses: "Array" for regular arrays, and "Object" for
        // associative arrays.
        groupTypeNames;
    
    /**
     * Resets the GroupHoldr.
     * 
     * @constructor
     * @param {String[]} groupNames   An Array of Strings to be used for the 
     *                                group names.
     * @param {Mixed} groupTypes   The types of groups. This can either be a 
     *                             String ("Array" or "Object") to set each one,
     *                             or an Object mapping each groupName to a
     *                             different one.
     */
    self.reset = function (settings) {
        if (typeof settings.groupNames === "undefined") {
            throw new Error("No groupNames Array provided to GroupHoldr.");
        }
        if (settings.groupNames.constructor !== Array) {
            throw new Error("A GroupHoldr's groupNames must be an Array.");
        }
        if (typeof settings.groupTypes === "undefined") {
            throw new Error("No groupTypes provided to GroupHoldr.");
        }
        
        // These functions containers are filled in setGroupNames 
        functions = {
            "setGroup": {},
            "getGroup": {},
            "set": {},
            "get": {},
            "add": {},
            "del": {}
        };
        setGroupNames(settings.groupNames, settings.groupTypes);
    };
    
    
    /* Simple gets
    */
    
    /**
     * @return {Object} The Object with Object<String, Function>s for each 
     *                  action available on groups.
     */
    self.getFunctions = function () {
        return functions;
    };
    
    /**
     * @return {Object} The Object storing each of the internal groups.
     */
    self.getGroups = function () {
        return groups;
    };
    
    /**
     * @param {String} name
     * @return {Object} The group of the given name.
     */
    self.getGroup = function (name) {
        return groups[name];
    };
    
    /**
     * @return {String[]} An Array containing each of the group names.
     */
    self.getGroupNames = function () {
        return groupNames;
    };
    
    
    /* Core logic
    */
    
    /** 
     * Meaty function to reset, given an array of names an object of types
     * Any pre-existing functions are cleared, and new ones are added as
     * member objects and to {functions}.
     * 
     * @param {String[]} names   An array of names of groupings to be made
     * @param {Object} types   An associative array of the function types of
     *                         the names given in names. This may also be taken
     *                         in as a string, to be converted to an Object.
     */
    function setGroupNames(names, types) {
        if (!(names instanceof Array)) {
            throw new Error("groupNames is not an Array");
        }
        
        // If there already were group names, clear them
        if (groupNames) {
            clearFunctions();
        }
        
        // Reset the group types and type names, to be filled next
        groupTypes = {}
        groupTypeNames = {};
        
        // Set the new groupNames, as ucFirst
        groupNames = names.map(ucFirst);
        groupNames.sort();
        
        // If groupTypes is an object, set custom group types for everything
        if (typeof(types) == "object") {
            groupNames.forEach(function (name) {
                groupTypes[name] = getTypeFunction(types[name]);
                groupTypeNames[name] = getTypeName(types[name]);
            });
        }
        // Otherwise assume everything uses the same one, such as from a String
        else {
            var typeFunc = getTypeFunction(types),
                typeName = getTypeName(types);
            groupNames.forEach(function (name) {
                groupTypes[name] = typeFunc;
                groupTypeNames[name] = typeName;
            });
        }
        
        // Create the containers, and set the modifying functions
        setGroups();
        setFunctions();
    }
    
    /**
     * Removes any pre-existing "set", "get", etc. functions.
     */
    function clearFunctions() {
        groupNames.forEach(function (name) {
            // Delete member variable functions
            delete self["set" + name + "Group"];
            delete self["get" + name + "Group"];
            delete self["set" + name];
            delete self["get" + name];
            delete self["add" + name];
            delete self["del" + name];
            
            // Delete functions under .functions by making each type a new {}
            functions.setGroup = {};
            functions.getGroup = {};
            functions.set = {};
            functions.get = {};
            functions.add = {};
            functions.del = {};
        });
    }
    
    /**
     * Resets groups to an empty object, and fills it with a new groupType for
     * each name in groupNames
     */
    function setGroups() {
        groups = {};
        groupNames.forEach(function (name) {
            groups[name] = new groupTypes[name]();
        });
    }
    
    /**
     * Calls the function setters for each name in groupNames
     * @remarks Those are: createFunction<XYZ>: "Set", "Get", "Add", "Del"
     */
    function setFunctions() {
        groupNames.forEach(function (name) {
            createFunctionSetGroup(name);
            createFunctionGetGroup(name);
            createFunctionSet(name);
            createFunctionGet(name);
            createFunctionAdd(name);
            createFunctionDel(name);
        });
    }
    
    
    /* Function generators
    */
    
    /**
     * Creates a getGroup function under self and functions.getGroup.
     * 
     * @param {String} name   The name of the group, from groupNames.
     */
    function createFunctionGetGroup(name) {
        /**
         * @param {String} key   The String key that references the group.
         * @return {Mixed}   The group referenced by the given key.
         */
        functions.getGroup[name] = self["get" + name + "Group"] = function () {
            return groups[name];
        };
    }
    
    /**
     * Creates a setGroup function under self and functions.setGroup.
     * 
     * @param {String} name   The name of the group, from groupNames.
     */
    function createFunctionSetGroup(name) {
        /**
         * Sets the value of the group referenced by the name.
         * 
         * @param {Mixed} value   The new value for the group, which should be 
         *                        the same type as the group (Array or Object).
         */
        
        functions.setGroup[name] = self["set" + name + "Group"] = function (value) {
            ensureCorrectGroupType(value, name);
            groups[name] = value;
        };
    }
    
    /**
     * Creates a get function under self and functions.get.
     * 
     * @param {String} name   The name of the group, from groupNames.
     */
    function createFunctionGet(name) {
        /**
         * @param {Mixed} key   The key referencing the value to obtain. This 
         *                      should be a Number if the group is an Array, or
         *                      a String if the group is an Object.
         * @return {Mixed} The corresponding value in the group.
         */
        functions.get[name] = self["get" + name] = function (key) {
            return groups[name][key];
        };
    }
    
    /**
     * Creates a set function under self and functions.set.
     * 
     * @param {String} name   The name of the group, from groupNames.
     */
    function createFunctionSet(name) {
        /**
         * Sets a value contained within the group.
         * 
         * @param {Mixed} key   The key referencing the value to obtain. This 
         *                      should be a Number if the group is an Array, or
         *                      a String if the group is an Object.
         * @param {Mixed} value
         */
        functions.set[name] = self["set" + name] = function (key, value) {
            groups[name][key] = value;
        };
    }
    
    /**
     * Creates a get<type> function under self and functions.get
     * 
     * @param {String} name   The name of the group, from groupNames
     */
    function createFunctionGet(name) {
        /**
         * Gets the value within a group referenced by the given key.
         * 
         * @param {Mixed} key   The key referencing the value to obtain. This 
         *                      should be a Number if the group is an Array, or
         *                      a String if the group is an Object.
         * @return {Mixed} value
         */
        functions.get[name] = self["get" + name] = function (key) {
            return groups[name][key];
        };
    }
    
    /**
     * Creates an add function under self and functions.add.
     * 
     * @param {String} name   The name of the group, from groupNames
     */
    function createFunctionAdd(name) {
        var group = groups[name];
        if (groupTypes[name] == Object) {
            /**
             * Adds a value to the group, referenced by the given key.
             * 
             * @param {String} key   The String key to reference the value to be
             *                       added.
             * @param value
             */
            functions.add[name] = self["add" + name] = function (key, value) {
                group[key] = value;
            };
        }
        else {
            /**
             * Adds a value to the group, referenced by the given key.
             * 
             * @param {Number} key   The String key to reference the value to be
             *                       added.
             * @param value
             */
            functions.add[name] = self["add" + name] = function (value) {
                group.push(value);
                return self;
            };
        }
    }
    
    /**
     * Creates a del (delete) function under self and functions.del.
     * 
     * @param {String} name   The name of the group, from groupNames
     */
    function createFunctionDel(name) {
        var group = groups[name];
        if (groupTypes[name] == Object) {
            /**
             * Deletes a value from the group, referenced by the given key.
             * 
             * @param {String} key   The String key to reference the value to be
             *                       deleted.
             */
            functions.del[name] = self["del" + name] = function (key) {
                delete group[key];
            };
        }
        else {
            /**
             * Deletes a value from the group, referenced by the given key.
             * 
             * @param {Number} key   The String key to reference the value to be
             *                       deleted.
             */
            functions.del[name] = self["del" + name] = function (key) {
                group = group.splice(group.indexOf(key), 1);
            };
        }
    }
    
    
    /* Group/ordering manipulators
    */
    
    /**
     * Deletes a given object from a group by calling Array.splice on
     * the result of Array.indexOf
     * 
     * @param {String} groupName   The string name of the group to delete an
     *                              object from.
     * @param {Number} object   The object to be deleted from the group.
     */
    self.deleteObject = function (groupName, object) {
        groups[groupName].splice(groups[groupName].indexOf(object), 1);
    };
    
    /**
     * Deletes a given index from a group by calling Array.splice. 
     * 
     * @param {String} groupName   The string name of the group to delete an
     *                              object from.
     * @param {Number} index   The index to be deleted from the group.
     * @param {Number} [max]   How many elements to delete after that index (if
     *                         falsy, just the first 1).
     */
    self.deleteIndex = function (groupName, index, max) {
        groups[groupName].splice(index, max || 1);
    };
    
    /**
     * Switches an object from groupOld to groupNew by removing it from the
     * old group and adding it to the new. If the new group uses an associative
     * array, a key should be passed in (which defaults to undefined).
     * 
     * @param {Mixed} object   The object to be moved from one group to another.
     * @param {String} groupOld   The string name of the object's old group.
     * @param {String} groupNew   The string name of the object's new group.
     * @param {String} [keyNew]   A key for the object to be placed in the new
     *                             group, required only if the group contains an
     *                             associative array.
     */
    self.switchObjectGroup = function (object, groupOld, groupNew, keyNew) {
        self.deleteObject(groupOld, object);
        functions.add[groupNew](object, keyNew);
    };
    
    
    /**
     * Calls a function for each group, with that group as the first argument.
     * Extra arguments may be passed in an array after scope and func, as in
     * Function.apply's standard.
     * 
     * @param {Mixed} [scope]   An optional scope to call this from (if falsy, 
     *                          defaults to self).
     * @param {Function} func   A function to apply to each group.
     * @param {Array} [args]   An optional array of arguments to pass to the 
     *                         function after each group.
     */
    self.applyAll = function (scope, func, args) {
        var i;
        
        if (!args) {
            args = [ undefined ];
        } else {
            args.unshift(undefined);
        }
       
        if (!scope) {
            scope = self;
        }
        
        for (i = groupNames.length - 1; i >= 0; i -= 1) {
            args[0] = groups[groupNames[i]];
            func.apply(scope, args);
        }
    };
    
    /**
     * Calls a function for each group, with that group as the first argument.
     * Extra arguments may be passed after scope and func natively, as in 
     * Function.call's standard.
     * 
     * @param {Mixed} [scope]   An optional scope to call this from (if falsy, 
     *                          defaults to self).
     * @param {Function} func   A function to apply to each group.
     */
    self.callAll = function (scope, func) {
        var args = Array.prototype.slice.call(arguments, 1),
            group, i, i;
        
        if (!scope) {
            scope = self;
        }
        
        for (i = groupNames.length - 1; i >= 0; i -= 1) {
            args[0] = groups[groupNames[i]];
            func.apply(scope, args);
        }
    };
    
    /**
     * Clears each Array by setting its length to 0.
     */
    self.clearArrays = function () {
        var group, name, i;
        
        for (i = groupNames.length - 1; i >= 0; i -= 1) {
            group = groups[groupNames[i]];
            
            if (group instanceof Array) {
                group.length = 0;
            }
        }
    }
    
    
    /* Utilities
    */
    
    /**
     * Returns the name of a type specified by a string ("Array" or "Object").
     * 
     * @param {String} str   The name of the type. If falsy, defaults to Array
     * @return {String}
     * @remarks The type is determined by the str[0]; if it exists and is 'o',
     *          the outcome is "Object", otherwise it's "Array".
     */
    function getTypeName(str) {
        if (str && str.charAt && str.charAt(0).toLowerCase() == 'o') {
            return "Object";
        }
        return "Array";
    }
    
    /**
     * Returns function specified by a string (Array or Object).
     * 
     * @param {String} str   The name of the type. If falsy, defaults to Array
     * @return {Function}
     * @remarks The type is determined by the str[0]; if it exists and is 'o',
     *          the outcome is Object, otherwise it's Array.
     */
    function getTypeFunction(str) {
        if (str && str.charAt && str.charAt(0).toLowerCase() == 'o') {
            return Object;
        }
        return Array;
    }
    
    /**
     * 
     */
    function ensureCorrectGroupType(value, name) {
        if (groupTypes.constructor === String) {
            return value === groupTypes;
        }
        
        return groupTypes[name] === value.constructor;
    }
    
    /**
     * Uppercases the first character in a string.
     * 
     * @param {String} str
     * @return {String}
     */
    function ucFirst(str) {
        return str[0].toUpperCase() + str.slice(1);
    }
    
    self.reset(settings || {});
}
document.onreadystatechange = (function (settings) {
    "use strict";
    
    var PixelRender;
    
    var currentPalette;
    
    /* Palettes
    */
    
    /**
     * 
     */
    var initializePalettes = function (palettes, backgroundImage, defaultPalette) {
        var section = document.getElementById("palettes"),
            name, element, chosen;
        
        for (name in palettes) {
            element = initializePalette(name, palettes[name], backgroundImage);
            section.appendChild(element);
            
            if (name === defaultPalette) {
                chosen = element;
            }
        }
        
        chosen.onclick();
    }
    
    /**
     * 
     */
    var initializePalette = function (name, palette, backgroundImage) {
        var surround = document.createElement("div"),
            label = document.createElement("h4"),
            container = document.createElement("div"),
            color, boxOut, boxIn, i;
        
        surround.className = "palette";
        label.className = "palette-label";
        container.className = "palette-container";
        
        surround.onclick = choosePalette.bind(undefined, surround, name, palette);
        
        label.textContent = "Palette: " + name;
        
        for (i = 0; i < palette.length; i += 1) {
            color = palette[i];
            
            boxOut = document.createElement("div");
            boxOut.className = "palette-box";
            
            boxIn = document.createElement("div");
            boxIn.className = "palette-box-in";
            boxIn.style.background = "rgba(" + color.join(",") + ")";
            
            boxOut.appendChild(boxIn);
            container.appendChild(boxOut);
        }
        
        surround.appendChild(label);
        surround.appendChild(container);
        
        return surround;
    }
    
    /**
     * 
     */
    var choosePalette = function (element, name, palette, event) {
        var elements = element.parentNode.children,
            i;
        
        for (i = 0; i < elements.length; i += 1) {
            elements[i].className = "palette"
        }
        
        element.className = "palette palette-selected";
        
        PixelRender = new PixelRendr({
            "palette": palette
        });
        
        currentPalette = name;
    };
    
    
    /* Input
    */
    
    /**
     * 
     */
    var initializeInput = function (selector) {
        var input = document.querySelector(selector);
        
        initializeClickInput(input);
        initializeDragInput(input);
    };
    
    /**
     * 
     */
    var initializeClickInput = function (input) {
        var dummy = document.createElement("input");
        
        dummy.type = "file";
        dummy.multiple = "multiple";
        dummy.onchange = handleFileDrop.bind(undefined, dummy);
        
        input.addEventListener("click", function () {
            dummy.click();
        });
        
        input.appendChild(dummy);
    };
    
    /**
     * 
     */
    var initializeDragInput = function (input) {
        input.ondragenter = handleFileDragEnter.bind(undefined, input);
        input.ondragover = handleFileDragOver.bind(undefined, input);
        input.ondragleave = input.ondragend = handleFileDragLeave.bind(undefined, input);
        input.ondrop = handleFileDrop.bind(undefined, input);
    };
    
    /**
     * 
     */
    var handleFileDragEnter = function (input, event) {
        if (event.dataTransfer) {
            event.dataTransfer.dropEffect = "copy"
        }
        input.className += " hovering";
    };
    
    /**
     * 
     */
    var handleFileDragOver = function (input, event) {
        event.preventDefault();
        return false;
    };
    
    /**
     * 
     */
    var handleFileDragLeave = function (input, event) {
        if (event.dataTransfer) {
            event.dataTransfer.dropEffect = "none"
        }
        input.className = input.className.replace(" hovering", "");
    };
    
    /**
     * 
     * 
     * @remarks input.files is when the input[type=file] is the source, while
     *          event.dataTransfer.files is for drag-and-drop.
     */
    var handleFileDrop = (function (allowedFiles, output, input, event) {
        var files = input.files || event.dataTransfer.files,
            elements = [],
            file, type, element, i;
        
        handleFileDragLeave(input, event);
        
        event.preventDefault();
        event.stopPropagation();
        
        for (i = 0; i < files.length; i += 1) {
            file = files[i];
            type = file.type.split("/")[1];
            
            if (!allowedFiles.hasOwnProperty(type)) {
                element = document.createElement("div");
                element.className = "output output-failed";
                element.textContent = "'" + file.name + "' is either a folder or has a non-image type...";
                elements.push(element);
                continue;
            }
            
            elements.push(createWorkerElement(files[i]));
        }
        
        for (i = 0; i < elements.length; i += 1) {
            output.insertBefore(elements[i], output.firstElementChild);
        }
    }).bind(
        undefined, 
        settings.allowedFiles, 
        document.querySelector(settings.outputSelector)
    );
    
    /**
     * 
     */
    var createWorkerElement = function (file) {
        var element = document.createElement("div"),
            reader = new FileReader();
        
        element.className = "output output-uploading";
        element.setAttribute("palette", currentPalette);
        element.innerText = "Uploading '" + file.name + "'...";
        
        reader.onprogress = workerUpdateProgress.bind(undefined, file, element);
        reader.onloadend = workerTryStartWorking.bind(undefined, file, element);
        reader.readAsDataURL(file);
        
        return element;
    };
    
    /**
     * 
     */
    var workerUpdateProgress = function (file, element, event) {
        var percent;
        
        if (!event.lengthComputable) {
            return;
        }
        
        percent = Math.round((event.loaded / event.total) * 100);
        
        if (percent > 100) {
            percent = 100;
        }
        
        element.innerText = "Uploading '" + file.name + "' (" + percent + "%)...";
    };
    
    /**
     * 
     * 
     * 
     * @remarks It would be nice to use a web worker for this, but each worker
     *          would have to instantiate a PixelRendr separately...
     */
    var workerTryStartWorking = function (file, element, event) {
        var result = event.currentTarget.result;
        
        if (result.length > 100000) {
            workerCannotStartWorking(result, file, element, event);
        } else {
            workerStartWorking(result, file, element, event);
        }
    };
    
    /**
     * 
     */
    var workerCannotStartWorking = function (result, file, element, event) {
        element.innerText = "'" + file.name + "' is too big! Use a smaller file.";
        element.className = "output output-failed";
    };
    
    /**
     * 
     */
    var workerStartWorking = function (result, file, element, event) {
        var displayBase64 = document.createElement("input");
        
        element.className = "output output-working";
        element.innerText = "Working on " + file.name + "...";
    
        displayBase64.spellcheck = false;
        displayBase64.className = "selectable";
        displayBase64.type = "text";
        displayBase64.setAttribute("value", result);
        
        element.appendChild(document.createElement("br"));
        element.appendChild(displayBase64);
        
        parseBase64Image(file, result, workerFinishRender.bind(undefined, file, element));
    }
    
    /**
     * 
     */
    var parseBase64Image = function (file, string, callback) {
        var image = document.createElement("img");
        image.onload = PixelRender.encode.bind(undefined, image, callback);
        image.src = string;
    };
    
    /**
     * 
     */
    var workerFinishRender = function (file, element, result) {
        var displayResult = document.createElement("input");
        
        displayResult.spellcheck = false;
        displayResult.className = "selectable";
        displayResult.type = "text";
        displayResult.setAttribute("value", result);
        
        element.firstChild.textContent = "Finished '" + file.name + "' ('" + element.getAttribute("palette") + "' palette).";
        element.className = "output output-complete";
        
        element.appendChild(displayResult);
    };
    

    /**
     * 
     */
    return function (event) {
        if (event.target.readyState != "complete") {
            return;
        }
        
        initializePalettes(
            settings.palettes,
            settings.paletteBackgroundImage,
            settings.paletteDefault
        );
        
        initializeInput(settings.inputSelector);
    };
})({
    "allowedFiles": {
        "gif": true,
        "png": true,
        "jpeg": true,
        "jpg": true
    },
    "inputSelector": "#input",
    "outputSelector": "#output",
    "paletteDefault": "Mario",
    "palettes": {
        "Black & White": [
          [0,0,0,0],
          [255,255,255,255],
          [0,0,0,255]
        ],
        "GameBoy": [
          [0,0,0,0],
          [255,255,255,255],
          [0,0,0,255],
          [199,199,192,255],
          [128,128,128,255]
        ],
        "Mario": [
            [0,0,0,0],
            // Grayscales (1-4)
            [255,255,255,255],
            [0,0,0,255],
            [188,188,188,255],
            [116,116,116,255],
            // Reds & Browns (5-11)
            [252,216,168,255],
            [252,152,56,255],
            [252,116,180,255],
            [216,40,0,255],
            [200,76,12,255],
            [136,112,0,255],
            [124,7,0,255],
            // Greens (12-14, and 21)
            [168,250,188,255],
            [128,208,16,255],
            [0,168,0,255],
            // Blues (15-20)
            [24,60,92,255],
            [0,128,136,255],
            [32,56,236,255],
            [156,252,240,255],
            [60,188,252,255],
            [92,148,252,255],
            // Green (21) for Luigi
            [0,130,0,255],
            // Pinkish tan (22) for large decorative text
            [252, 188, 176,255]
        ]
    }
});
/**
 * InputWritr.js
 * 
 * A general utility for automating interactions with user-called events linked
 * with callbacks. Pipe functions are available that take in user input, switch 
 * on the event code, and call the appropriate callback. These Pipe functions 
 * can be made during runtime; further utilities allow for saving and playback 
 * of input histories in JSON format.
 * 
 * @example 
 * // Creating and using an InputWritr to log keystrokes on the 'a' key.
 * var InputWriter = new InputWritr({
 *     "triggers": {
 *         "onkeydown": {
 *             "65": function () {
 *                 console.log("Hello!");
 *             }
 *         }
 *     }
 * });
 * document.body.onkeydown = InputWriter.makePipe("onkeydown", "keyCode");
 * 
 * @example
 * // Creating and using an InputWritr to simulate WASD arrow controls.
 * var InputWriter = new InputWritr({
 *     "triggers": {
 *         "aliases": {
 *             "up": [87, 38],    // w, up
 *             "right": [68, 39], // d, right
 *             "down": [83, 40],  // s, down
 *             "left": [65, 37],  // a, left
 *         },
 *         "onkeydown": {
 *             "up": console.log.bind(console, "up"),
 *             "right": console.log.bind(console, "right"),
 *             "down": console.log.bind(console, "down"),
 *             "left": console.log.bind(console, "left"),
 *         }
 *     }
 * });
 * document.body.onkeydown = InputWriter.makePipe("onkeydown", "keyCode");
 *
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function InputWritr(settings) {
    "use strict";
    if (!this || this === window) {
        return new InputWritr(settings);
    }
    var self = this,

        // A mapping of events to their key codes to their callbacks.
        triggers,

        // Known, allowed aliases for triggers.
        aliases,

        // An Array of every action that has happened, with a timestamp.
        history,
        
        // An Array of all histories, with indices set by self.saveHistory.
        histories,

        // For compatibility, a reference to performance.now() or an equivalent.
        getTimestamp,
        
        // A starting time used for calculating playback delays in playHistory.
        startingTime,

        // An object to be passed to event calls, commonly with key information.
        // (such as "Down" => 0 }
        eventInformation,
        
        // An optional boolean callback to disable or enable input triggers.
        canTrigger,

        // Whether to record events into the history
        isRecording,
        
        // A quick lookup table of key aliases to their character codes.
        keyAliasesToCodes,
        
        // A quick lookup table of character codes to their key aliases.
        keyCodesToAliases;

    /**
     * Resests the InputWritr.
     * 
     * @constructor
     * @param {Object} triggers   The mapping of events to their key codes to
     *                            their callbacks.
     * @param {Object} [aliases]   Known, allowed aliases for triggers.
     * @param {Function} [getTimestamp]   A Function to return the current time
     *                                    as a Number. If not provided, all 
     *                                    variations of performance.now are 
     *                                    tried; if they don't exist, 
     *                                    Date.getTime is used.
     * @param {Mixed} [eventInformation]   The first argument to be passed to
     *                                     event callbacks (defaults to 
     *                                     undefined).
     * @param {Boolean} [canTrigger]   Whether inputs are currently allowed to
     *                                 trigger (defaults to true).
     * @param {Boolean} [isRecording]   Whether triggered inputs are currently
     *                                  allowed to be written to history
     *                                  (defaults to true).
     */
    self.reset = function (settings) {
        triggers = settings.triggers;
        
        getTimestamp = (
            settings.getTimestamp
            || performance.now 
            || performance.webkitNow 
            || performance.mozNow 
            || performance.msNow 
            || performance.oNow 
            || function () {
                return new Date().getTime();
            }
        ).bind(performance);
        
        eventInformation = settings.eventInformation;
        
        canTrigger = settings.hasOwnProperty("canTrigger") 
            ? settings.canTrigger : true;
        isRecording = settings.hasOwnProperty("isRecording") 
            ? settings.isRecording : true;

        history = {};
        histories = [];
        aliases = {};
        
        self.addAliases(settings.aliases || {});
        
        keyAliasesToCodes = settings.keyAliasesToCodes || {
            "shift": 16,
            "ctrl": 17,
            "space": 32,
            "left": 37,
            "up": 38,
            "right": 39,
            "down": 40
        };
        
        keyCodesToAliases = settings.keyCodesToAliases || {
            "16": "shift",
            "17": "ctrl",
            "32": "space",
            "37": "left",
            "38": "up",
            "39": "right",
            "40": "down"
        };
    };

    /**
     * Clears the currently tracked inputs history and resets the starting time,
     * and (optionally) saves the current history.
     *
     * @param {Boolean} [keepHistory]   Whether the currently tracked history
     *                                   of inputs should be added to the master
     *                                   Array of histories (defaults to true).
     */
    self.restartHistory = function (keepHistory) {
        if (keepHistory) {
            histories.push(history);
        }
        history = {};
        startingTime = getTimestamp();
    };


    /* Simple gets
    */

    /** 
     * @return {Object} The stored mapping of aliases to values.
     */
    self.getAliases = function () {
        return aliases;
    };
    
    /**
     * @return {Object} The stored mapping of aliases to values, with values
     *                  mapped to their equivalent key Strings.
     */
    self.getAliasesAsKeyStrings = function () {
        var output = {},
            alias;
        
        for (alias in aliases) {
            output[alias] = self.getAliasAsKeyStrings(alias);
        }
        
        return output;
    };
    
    /**
     * @param {Number} alias An alias allowed to be passed in, typically a
     *                          character code.
     * @return {String[]}   The mapped key Strings corresponding to that alias,
     *                      typically the human-readable Strings representing 
     *                      input names, such as "a" or "left".
     */
    self.getAliasAsKeyStrings = function (alias) {
        return aliases[alias].map(self.convertAliasToKeyString);
    };
    
    /**
     * @param {Number} alias   The alias of an input, typically a character 
     *                          code.
     * @return {String} The human-readable String representing the input name,
     *                  such as "a" or "left".
     */
    self.convertAliasToKeyString = function (alias) {
        if (alias.constructor === String) {
            return alias;
        }
        
        if (alias > 96 && alias < 105) {
            return String.fromCharCode(alias - 48);
        }
        
        if (alias > 64 && alias < 97) {
            return String.fromCharCode(alias);
        }
        
        return typeof keyCodesToAliases[alias] !== "undefined"
            ? keyCodesToAliases[alias] : "?";
    };
    
    /**
     * @param {String} key   The number code of an input.
     * @return {Number} The machine-usable character code of the input.
     * 
     */
    self.convertKeyStringToAlias = function (key) {
        if (key.constructor === Number) {
            return key;
        }
        
        if (key.length === 1) {
            return key.charCodeAt(0) - 32;
        }
        
        return typeof keyAliasesToCodes[key] !== "undefined"
            ? keyAliasesToCodes[key] : -1;
    };
    
    /**
     * Get function for a single history, either the current or a past one.
     *
     * @param {String} [name]   The identifier for the old history to return. If
     *                          none is provided, the current history is used.
     * @return {Object}   A history of inputs in JSON-friendly form.
     */
    self.getHistory = function (name) {
        return arguments.length ? histories[name] : history;
    };

    /**
     * @return {Array} All previously stored histories.
     */
    self.getHistories = function () {
        return histories;
    };
    
    /**
     * @return {Boolean} Whether this is currently allowing inputs.
     */
    self.getCanTrigger = function () {
        return canTrigger;
    };

    /**
     * @return {Boolean} Whether this is currently recording allowed inputs.
     */
    self.getIsRecording = function () {
        return isRecording;
    };


    /* Simple sets
    */
     
    /**
     * @param {Mixed} canTriggerNew   Whether this is now allowing inputs. This 
     *                                may be either a Function (to be evaluated 
     *                                on each input) or a general Boolean.
     */
    self.setCanTrigger = function (canTriggerNew) {
        if (status.constructor === Boolean) {
            canTrigger = function () {
                return status;
            };
        } else {
            canTrigger = status;
        }
    };

    /**
     * @param {Boolean} isRecordingNew   Whether this is now recording allowed
     *                                   inputs.    
     */
    self.setIsRecording = function (isRecordingNew) {
        isRecording = isRecordingNew;
    };

    /**
     * @param {Mixed} eventInformationNew   A new first argument for event 
     *                                      callbacks.
     */
    self.setEventInformation = function (eventInformationNew) {
        eventInformation = eventInformationNew;
    };

    
    /* Aliases
    */
    
    /**
     * Adds a list of values by which an event may be triggered.
     * 
     * @param {String} name   The name of the event that is being given 
     *                        aliases, such as "left".
     * @param {Array} values   An array of aliases by which the event will also
     *                         be callable.
     */
    self.addAliasValues = function (name, values) {
        var triggerName, triggerGroup, 
            i;
        
        if (!aliases.hasOwnProperty(name)) {
            aliases[name] = values;
        } else {
            aliases[name].push.apply(aliases[name], values);
        }
        
        // triggerName = "onkeydown", "onkeyup", ...
        for (triggerName in triggers) {
            if (triggers.hasOwnProperty(triggerName)) {
                // triggerGroup = { "left": function, ... }, ...
                triggerGroup = triggers[triggerName];
                
                if (triggerGroup.hasOwnProperty(name)) {
                    // values[i] = 37, 65, ...
                    for (i = 0; i < values.length; i += 1) {
                        triggerGroup[values[i]] = triggerGroup[name];
                    }
                }
            }
        }
    };
    
    /**
     * Removes a list of values by which an event may be triggered.
     * 
     * @param {String} name   The name of the event that is having aliases
     *                        removed, such as "left".
     * @param {Array} values   An array of aliases by which the event will no
     *                         longer be callable.
     */
    self.removeAliasValues = function (name, values) {
        var triggerName, triggerGroup, 
            i;
        
        if (!aliases.hasOwnProperty(name)) {
            return;
        }
        
        for (i = 0; i < values.length; i += 1) {
            aliases[name].splice(aliases[name].indexOf(values[i], 1));
        }
        
        // triggerName = "onkeydown", "onkeyup", ...
        for (triggerName in triggers) {
            if (triggers.hasOwnProperty(triggerName)) {
                // triggerGroup = { "left": function, ... }, ...
                triggerGroup = triggers[triggerName];
                
                if (triggerGroup.hasOwnProperty(name)) {
                    // values[i] = 37, 65, ...
                    for (i = 0; i < values.length; i += 1) {
                        if (triggerGroup.hasOwnProperty(values[i])) {
                            delete triggerGroup[values[i]];
                        }
                    }
                }
            }
        }
    };
    
    /**
     * Shortcut to remove old alias values and add new ones in.
     * 
     * 
     * @param {String} name   The name of the event that is having aliases
     *                        added and removed, such as "left".
     * @param {Array} valuesOld   An array of aliases by which the event will no
     *                            longer be callable.
     * @param {Array} valuesNew   An array of aliases by which the event will 
     *                            now be callable.
     */
    self.switchAliasValues = function (name, valuesOld, valuesNew) {
        self.removeAliasValues(name, valuesOld);
        self.addAliasValues(name, valuesNew);
    };
    
    /**
     * Adds a set of alises from an Object containing "name" => [values] pairs.
     * 
     * @param {Object} aliasesRaw
     */
    self.addAliases = function (aliasesRaw) {
        var aliasName;
        for (aliasName in aliasesRaw) {
            if (aliasesRaw.hasOwnProperty(aliasName)) {
                self.addAliasValues(aliasName, aliasesRaw[aliasName]);
            }
        }
    };
    
    
    /* Functions
    */
    
    /**
     * Adds a triggerable event by marking a new callback under the trigger's
     * triggers. Any aliases for the label are also given the callback.
     * 
     * @param {String} trigger   The name of the triggered event.
     * @param {Mixed} label   The code within the trigger to call within, 
     *                        typically either a character code or an alias.
     * @param {Function} callback   The callback Function to be triggered.
     */
    self.addEvent = function (trigger, label, callback) {
        if (!triggers.hasOwnProperty(trigger)) {
            throw new Error("Unknown trigger requested: '" + trigger + "'.");
        }
        
        console.log(trigger, label, callback.name);
        triggers[trigger][label] = callback;
        
        if (aliases.hasOwnProperty(label)) {
            for (var i = 0; i < aliases[label].length; i += 1) {
                triggers[trigger][aliases[i]] = callback;
            }
        }
    };
    
    /**
     * Removes a triggerable event by deleting any callbacks under the trigger's
     * triggers. Any aliases for the label are also given the callback.
     * 
     * @param {String} trigger   The name of the triggered event.
     * @param {Mixed} label   The code within the trigger to call within, 
     *                        typically either a character code or an alias.
     */
    self.removeEvent = function (trigger, label) {
        if (!triggers.hasOwnProperty(trigger)) {
            throw new Error("Unknown trigger requested: '" + trigger + "'.");
        }
        
        delete triggers[trigger][label];
        
        if (aliases.hasOwnProperty(label)) {
            for (var i = 0; i < aliases[label].length; i += 1) {
                if (triggers[trigger][aliases[i]]) {
                    delete triggers[trigger][aliases[i]];
                }
            }
        }
    };
    
    /**
     * Stores the current history in the histories Array. self.restartHistory is
     * typically called directly after.
     *
     * @param {String} [name]   An optional name to save the history as.
     * @remarks Histories are stored in an Array, so it's more performant to not
     *          provide a name if you do call this function often.
     */
    self.saveHistory = function (name) {
        histories.push(history);
        if (arguments.length) {
            histories[name] = history;
        }
    };
    
    /**
     * Plays back the current history using self.playEvents.
     */
    self.playHistory = function () {
        self.playEvents(history);
    };

    /**
     * "Plays" back an Array of event information by simulating each keystroke
     * in a new call, timed by setTimeout.
     *
     * @param {Object} events   The events history to play back.
     * @remarks This will execute the same actions in the same order as before,
     *          but the arguments object may be different.
     */
    self.playEvents = function (events) {
        var timeouts = {},
            time, call;

        for (time in events) {
            if (events.hasOwnProperty(time)) {
                call = makeEventCall(events[time]);
                timeouts[time] = setTimeout(call, (time - startingTime) | 0);
            }
        }
    };

    /**
     * Curry utility to create a closure that runs call() when called.
     *
     * @param {Array} info   An array containing [alias, keycode].
     */
    // Returns a closure function that actives a trigger when called
    function makeEventCall(info) {
        return function () {
            self.callEvent(info[0], info[1]);
        };
    }

    /**
     * Primary driver function to run an event. The event is chosen from the
     * triggers object, and called with eventInformation as the input.
     *
     * @param {Function, String} event   The event function (or string alias of
     *                                   it) that will be called.
     * @param {Number} [keycode]   The alias of the event function under
     *                             triggers[event], if event is a String.
     * @param {Event} [sourceEvent]   The raw event that caused the calling Pipe
     *                                to be triggered, such as a MouseEvent.
     * @return {Mixed}
     */
    self.callEvent = function (event, keycode, sourceEvent) {
        if (canTrigger.constructor === Boolean) {
            if (!canTrigger) {
                return;
            }
        } else if (canTrigger.constructor === Function) {
            if (!canTrigger(event, keycode)) {
                return;
            }
        }
        
        if (!event) {
            throw new Error("Blank event given, ignoring it.");
        }
        
        if (event.constructor === String) {
            event = triggers[event][keycode];
        }

        return event(eventInformation, sourceEvent);
    };

    /**
     * Creates and returns a function to run a trigger.
     *
     * @param {String} trigger   The label for the Array of functions that the
     *                           pipe function should choose from.
     * @param {String} [codeLabel]   An optional mapping String for the alias:
     *                                if provided, it changes the alias to a
     *                                listed alias keyed by codeLabel.
     * @param {Boolean} [preventDefaults]   Whether the input to the pipe
     *                                       function will be an HTML-style
     *                                       event, where .preventDefault()
     *                                       should be clicked.
     * @return {Function}
     * @example   Creating a function that calls an onKeyUp event, with a given
     *            input's keyCode being used as the codeLabel.
     *            InputWriter.makePipe("onkeyup", "keyCode");
     * @example   Creating a function that calls an onMouseDown event, and
     *            preventDefault of the argument.
     *            InputWriter.makePipe("onmousedown", null, true);
     */
    self.makePipe = function (trigger, codeLabel, preventDefaults) {
        if (!triggers.hasOwnProperty(trigger)) {
            throw new Error("No trigger of label '" + trigger + "' defined.");
            return;
        }

        var functions = triggers[trigger],
            useLabel = arguments.length >= 2;

        return function Pipe(alias) {
            // Typical usage means alias will be an event from a key/mouse input
            if (preventDefaults && alias.preventDefault instanceof Function) {
                alias.preventDefault();
            }

            // If a codeLabel is needed, replace the alias with it
            if (useLabel) {
                alias = alias[codeLabel];
            }

            // If there's a function under that alias, run it
            if (functions.hasOwnProperty(alias)) {
                if (isRecording) {
                    history[getTimestamp() | 0] = [trigger, alias];
                }
                
                self.callEvent(functions[alias], undefined, arguments[0]);
            }
        }
    };
    
    
    self.reset(settings || {});
}
/**
 * LevelEditr.js 
 * An EightBitter/FullScreenMario module to let the user edit levels
 */
function LevelEditr(settings) {
    "use strict";
    if (!this || this === window) {
        return new LevelEditr(settings);
    }
    var self = this,
        
        // The container game object to store Thing and map information
        GameStarter,
        
        // The GameStarter's settings before this LevelEditr was enabled
        oldInformation,
        
        // The listings of things that the GUI displays
        things,
        
        // The listing of groups that Things may fall into
        thingGroups,
        
        // The complete list of Things that may be placed
        thingKeys,
        
        // The listings of macros that the GUI displays
        macros,
        
        // The default string name of the map
        mapNameDefault,
        
        // The default integer time of the map
        mapTimeDefault,
        
        // The default string setting of the map's areas
        mapSettingDefault,
        
        // The default string entry of the map's locations
        mapEntryDefault,
        
        // The starting object used as a default template for new maps
        mapDefault,
        
        // An Object containing the display's HTML elements
        display,
        
        // The current mode of editing as a string, such as "Build" or "Play"
        currentMode,
        
        // The current mode of click as a string, such as "Thing" or "Macro"
        currentClickMode,
        
        // What size "blocks" placed Things should snap to
        blocksize,
        
        // An associative array of horizontal rulers to be placed in editing
        lines,
        
        // A function to beautify text given to the map displayer, such as js_beautify
        beautifier,
        
        // The currently selected Thing to be placed
        currentThings,
        
        // The type string of the currently selected thing, such as "Koopa"
        currentType,
        
        // The current arguments for currentThings, such as { "smart": true }
        currentArgs;
    
    /**
     * 
     */
    self.reset = function reset(settings) {
        GameStarter = settings.GameStarter;
        things = settings.things;
        thingGroups = settings.thingGroups;
        thingKeys = settings.thingKeys;
        macros = settings.macros;
        beautifier = settings.beautifier;
        mapNameDefault = settings.mapNameDefault || "New Map";
        mapTimeDefault = settings.mapTimeDefault || Infinity;
        mapSettingDefault = settings.mapSettingDefault || "";
        mapEntryDefault = settings.mapEntryDefault || "";
        mapDefault = settings.mapDefault || {};
        blocksize = settings.blocksize || 1;
        
        currentThings = [];
        currentMode = "Build";
        currentClickMode = "Thing";
    };
    
    
    /* State resets
    */
    
    /**
     * 
     */
    self.enable = function () {
        oldInformation = {
            "map": GameStarter.MapsHandler.getMapName(),
        };
        
        clearAllThings();
        resetDisplay();
        
        GameStarter.InputWriter.setCanTrigger(false);
        
        setCurrentMode("Build");
        
        setTextareaValue(stringifySmart(mapDefault), true);
        resetDisplayMap();
        disableThing(GameStarter.player);
    };
    
    /**
     * 
     */
    self.disable = function () {
        GameStarter.container.removeChild(display["container"]);
        display = undefined;
        
        GameStarter.InputWriter.setCanTrigger(true);
        GameStarter.setMap(oldInformation["map"]);
    };
    
    /**
     * 
     */
    self.minimize = function () {
        display.minimizer.innerText = "+";
        display.minimizer.onclick = self.maximize;
        display.container.className += " minimized";
    };
    
    /**
     * 
     */
    self.maximize = function () {
        display.minimizer.innerText = "-";
        display.minimizer.onclick = self.minimize;
        
        if (display.container.className.indexOf("minimized") !== -1) {
            display.container.className = display.container.className.replace(/ minimized/g, '');
        }
    };
    
    /**
     * 
     */
    self.startBuilding = function () {
        beautifyTextareaValue();
        setDisplayMap(true);
        GameStarter.InputWriter.setCanTrigger(false);
        setCurrentMode("Build");
        self.maximize();
    };
    
    /**
     * 
     */
    self.startPlaying = function () {
        beautifyTextareaValue();
        setDisplayMap(false);
        GameStarter.InputWriter.setCanTrigger(true);
        setCurrentMode("Play");
        self.minimize();
    };
    
    /**
     * 
     */
    self.downloadCurrentJSON = function () {
        downloadFile(
            getMapName() + ".json",
            display.stringer.textarea.value || ""
        );
    };
    
    /**
     * 
     */
    self.loadCurrentJSON = function () {
        display.sections.inputDummy.click()
    };
    
    /**
     * 
     */
    self.handleUploadStart = function (event) {
        var file, reader;
        
        cancelEvent(event);

        if (event && event.dataTransfer) {
            file = event.dataTransfer.files[0];
        } else {
            file = display.sections.inputDummy.files[0],
            reader = new FileReader();
        }
        
        if (!file) {
            return;
        }
        
        reader = new FileReader();
        reader.onloadend = self.handleUploadCompletion;
        reader.readAsText(file);
    };
    
    function handleDragEnter(event) {
        self.setSectionJSON();
    }
    
    function handleDragOver(event) {
        cancelEvent(event);
    }
    
    function handleDragDrop(event) {
        self.handleUploadStart(event);
    }
    
    /**
     * 
     */
    self.handleUploadCompletion = function (event) {
        self.enable();
        self.setCurrentJSON(event.currentTarget.result);
        self.setSectionJSON();
    }
    
    /**
     * 
     */
    self.setCurrentJSON = function (json) {
        self.startBuilding();
        setTextareaValue(json, true);
        getMapObjectAndTry();
    };
    
    /**
     * 
     */
    function setCurrentMode(mode) {
        currentMode = mode;
    }
    
    /**
     * 
     */
    function setCurrentClickMode(mode, event) {
        currentClickMode = mode;
        
        cancelEvent(event);
    }
    
    /**
     * 
     */
    function setCurrentThing(type, args, x, y) {
        currentType = type;
        currentArgs = args;
        currentThings = [
            {
                "x": 0,
                "y": 0,
                "thing": GameStarter.ObjectMaker.make(
                    currentType, 
                    GameStarter.proliferate({
                        "onThingMake": undefined,
                        "onThingAdd": undefined,
                        "onThingAdded": undefined,
                        "outerok": true
                    }, getNormalizedThingArguments(args))
                )
            }
        ];
        
        disableThing(currentThings[0]["thing"]);
        GameStarter.addThing(currentThings[0]["thing"], x || 0, y || 0);
    };
    
    function setCurrentMacroThings() {
        var currentThing, i;
        
        for (i = 0; i < currentThings.length; i += 1) {
            currentThing = currentThings[i];
            currentThing.outerok = true;
            
            disableThing(currentThing["thing"]);
            GameStarter.addThing(
                currentThing["thing"], 
                currentThing["xloc"] || 0,
                currentThing["yloc"] || 0
            );
        }
    }
    
    /**
     * 
     */
    function setCurrentArgs() {
        if (currentClickMode === "Thing") {
            setCurrentThing(currentType, getCurrentArgs());
        } else {
            onMacroIconClick(currentType, false, getCurrentArgs());
        }
    }
    
    /* Mouse events
    */
    
    /**
     * 
     */
    function onMouseDownScroller(direction, event) {
        var target = event.target;
        
        target.setAttribute("scrolling", 1);
        
        GameStarter.TimeHandler.addEventInterval(function () {
            if (target.getAttribute("scrolling") != 1) {
                return true;
            }
            
            if (direction < 0 && GameStarter.MapScreener.left <= 0) {
                display["scrollers"]["left"].style.opacity = 0;
                return;
            }
            
            GameStarter.scrollWindow(direction);
                display["scrollers"]["left"].style.opacity = 1;
        }, 1, Infinity);
    }
    
    /**
     * 
     */
    function onMouseUpScrolling(event) {
        event.target.setAttribute("scrolling", 0);
    }

    
    /**
     * 
     */
    function onMouseMoveEditing(event) {
        var x = event.x || event.clientX || 0,
            y = event.y || event.clientY || 0,
            currentThing, i;
        
        for (i = 0; i < currentThings.length; i += 1) {
            currentThing = currentThings[i];
            
            if (!currentThing["thing"]) {
                continue;
            }
            
            GameStarter.setLeft(
                currentThing["thing"], 
                roundTo(x - GameStarter.container.offsetLeft, blocksize) 
                        + (currentThing.left || 0) * GameStarter.unitsize
            );
            GameStarter.setTop(
                currentThing["thing"], 
                roundTo(y - GameStarter.container.offsetTop, blocksize) 
                        - (currentThing.top || 0) * GameStarter.unitsize
            );
        }
    }
    
    /**
     * 
     */
    function onClickEditingThing(event) {
        if (currentMode !== "Build") {
            return;
        }
        
        var x = roundTo(event.x || event.clientX || 0, blocksize),
            y = roundTo(event.y || event.clientY || 0, blocksize),
            thing;
        
        if (!currentThings.length || !addMapCreationThing(x, y)) {
            return;
        }
        
        onClickEditingGenericAdd(x, y, currentType, currentArgs);
    }
    
    /**
     * 
     */
    function onClickEditingMacro(event) {
        if (currentMode !== "Build") {
            return;
        }
        
        var x = roundTo(event.x || event.clientX || 0, blocksize),
            y = roundTo(event.y || event.clientY || 0, blocksize),
            currentThing, i;
        
        // killCurrentThings();
        
        if (!currentThings.length || !addMapCreationMacro(x, y)) {
            return;
        }
        
        for (i = 0; i < currentThings.length; i += 1) {
            currentThing = currentThings[i];
            // debugger;
            onClickEditingGenericAdd(
                x + (currentThing["left"] || 0) * GameStarter.unitsize,
                y - (currentThing["top"] || 0) * GameStarter.unitsize,
                currentThing["thing"].title || currentThing["title"],
                currentThing["reference"]
            );
            
        }
    }
    
    /**
     * 
     */
    function onClickEditingGenericAdd(x, y, type, args) {
        var thing = GameStarter.ObjectMaker.make(type, GameStarter.proliferate({
            "onThingMake": undefined,
            "onThingAdd": undefined,
            "onThingAdded": undefined,
            "movement": undefined
        }, getNormalizedThingArguments(args)));
        
        if (currentMode === "Build") {
            disableThing(thing, .7);
        }
        
        GameStarter.addThing(
            thing,
            roundTo(x - GameStarter.container.offsetLeft, blocksize),
            roundTo(y - GameStarter.container.offsetTop, blocksize)
        );
    }
    
    /**
     * 
     */
    function onThingIconClick(title, event) {
        var x = event.x || event.clientX || 0,
            y = event.y || event.clientY || 0,
            target = event.target.nodeName === "DIV"
                ? event.target : event.target.parentNode,
            i;
        
        killCurrentThings();
        
        setTimeout(function () {
            setCurrentThing(title, getCurrentArgs(), x, y);
        });
        
        cancelEvent(event);
        
        setVisualOptions(target.name, false, target.options);
    }
    
    /**
     * 
     */
    function onMacroIconClick(title, description, options) {
        if (description) {
            setVisualOptions(title, description, options);
        }
        
        var map = getMapObject(),
            i;
        
        if (!map) {
            return;
        }
        
        currentThings = [];
        GameStarter.MapsCreator.analyzePreMacro(
            GameStarter.proliferate({
                "macro": title
            }, getCurrentArgs()),
            createPrethingsHolder(currentThings),
            getCurrentAreaObject(map),
            map
        );
        
        currentType = title;
        setCurrentMacroThings();
    }
    
    /**
     * 
     */
    function createPrethingsHolder(object) {
        var output = {};
        
        thingGroups.forEach(function (group) {
            output[group] = object;
        });
        
        return output;
    }
    
    /**
     * 
     */
    function getCurrentArgs() {
        var args = {},
            container = display["sections"]["ClickToPlace"]["VisualOptions"],
            children = container.getElementsByClassName("VisualOptionsList"),
            child, labeler, valuer, i;
            
        if (children.length != 0) {
            children = children[0].children;
            
            for (i = 0; i < children.length; i += 1) {
                child = children[i];
                labeler = child.getElementsByClassName("VisualOptionLabel")[0];
                valuer = child.getElementsByClassName("VisualOptionValue")[0];
                
                switch (valuer["data:type"]) {
                    case "Boolean":
                        args[labeler.textContent] = valuer.value === "true" ? true : false;
                        break;
                    case "Number":
                        args[labeler.textContent] = (Number(valuer.value) || 0) * (Number(valuer.getAttribute("data:mod")) || 1);
                        break;
                    default:
                        args[labeler.textContent] = valuer.value;
                        break;
                }
            }
        }
        
        return args;
    }
    
    
    /* Map manipulations
    */
    
    /**
     * 
     */
    function setMapName() {
        var name = getMapName(),
            map = getMapObject();
        
        if (map && map.name != name) {
            map.name = name;
            display["namer"].value = name;
            setTextareaValue(stringifySmart(map), true);
            GameStarter.StatsHolder.set("world", name)
        }
    }
    
    /**
     * 
     * 
     * @param {Boolean} fromGui   Whether this is from the MapSettings section
     *                             of the GUI (true), or from the Raw JSON 
     *                             section (false).
     */
    function setMapTime(fromGui) {
        var map = getMapObject(),
            time;
        
        if (!map) {
            return;
        }
        
        if (fromGui) {
            time = display["sections"]["MapSettings"]["Time"].value;
            map.time = time;
        } else {
            time = map.time;
            display["sections"]["MapSettings"]["Time"].value = time;
        }
        
        setTextareaValue(stringifySmart(map), true);
        GameStarter.StatsHolder.set("time", time)
        GameStarter.TimeHandler.cancelAllEvents();
    }
    
    
    /**
     * 
     * 
     * @param {Boolean} fromGui   Whether this is from the MapSettings section
     *                             of the GUI (true), or from the Raw JSON 
     *                             section (false).
     */
    function setMapSetting(fromGui) {
        var map = getMapObject(),
            area, setting;
        
        if (!map) {
            return;
        }
        
        area = getCurrentAreaObject(map);
        if (fromGui) {
            setting = display["sections"]["MapSettings"]["Setting"]["Primary"].value;
            if (display["sections"]["MapSettings"]["Setting"]["Secondary"].value) {
                setting += " " + display["sections"]["MapSettings"]["Setting"]["Secondary"].value;
            }
            if (display["sections"]["MapSettings"]["Setting"]["Tertiary"].value) {
                setting += " " + display["sections"]["MapSettings"]["Setting"]["Tertiary"].value;
            }
            area.setting = setting;
        } else {
            setting = area.setting.split(" ");
            display["sections"]["MapSettings"]["Setting"]["Primary"].value = setting[0];
            display["sections"]["MapSettings"]["Setting"]["Secondary"].value = setting[1];
            display["sections"]["MapSettings"]["Setting"]["Tertiary"].value = setting[2];
        }
        
        setTextareaValue(stringifySmart(map), true);
        setDisplayMap(true);
    }
    
    /**
     * 
     */
    function setLocationArea() {
        var map = getMapObject();
        
        if (!map) {
            return;
        }
        
        var location = getCurrentLocationObject(map);
        
        location["area"] = getCurrentArea();
        
        setTextareaValue(stringifySmart(map), true);
        setDisplayMap(true);
    }
    
    /**
     * 
     * 
     * @param {Boolean} fromGui   Whether this is from the MapSettings section
     *                             of the GUI (true), or from the Raw JSON 
     *                             section (false).
     */
    function setMapLocation(fromGui) {
        var map = getMapObject();
        
        if (!map) {
            return;
        }
        
        setTextareaValue(stringifySmart(map), true);
        setDisplayMap(true);
    }
    
    /**
     * 
     * 
     * @param {Boolean} fromGui   Whether this is from the MapSettings section
     *                             of the GUI (true), or from the Raw JSON 
     *                             section (false).
     */
    function setMapEntry(fromGui) {
        var map = getMapObject(),
            location, entry;
        
        if (!map) {
            return;
        }
        
        location = getCurrentLocationObject(map);
        if (fromGui) {
            entry = display["sections"]["MapSettings"]["Entry"].value;
            location.entry = entry;
        } else {
            entry = area.location;
            display["sections"]["MapSettings"]["Entry"].value = entry;
        }
        
        setTextareaValue(stringifySmart(map), true);
        setDisplayMap(true);
    }
    
    /**
     * 
     * 
     * @param {Boolean} fromGui   Whether this is from the MapSettings section
     *                             of the GUI (true), or from the Raw JSON 
     *                             section (false).
     */
    function setCurrentLocation(fromGui) {
        var map = getMapObject(),
            location;
        
        if (!map) {
            return;
        }
        
        location = getCurrentLocationObject(map);
        if (fromGui) {
            display["sections"]["MapSettings"]["Area"].value = location.area || 0;
        } else {
            
        }
        
        setTextareaValue(stringifySmart(map), true);
        setDisplayMap(true);
    }
    
    /**
     * 
     */
    function addLocationToMap() {
        var name = display["sections"]["MapSettings"]["Location"].options.length,
            map = getMapObject();
        
        if (!map) {
            return;
        }
        
        map.locations[name] = {
            "entry": mapEntryDefault
        };
        
        resetAllVisualOptionSelects("VisualOptionLocation", Object.keys(map.locations));
        
        setTextareaValue(stringifySmart(map), true);
        setDisplayMap(true);
    }
    
    function addAreaToMap() {
        var name = display["sections"]["MapSettings"]["Area"].options.length,
            map = getMapObject();
        
        if (!map) {
            return;
        }
        
        map.areas[name] = {
            "setting": mapSettingDefault,
            "creation": []
        };
        
        resetAllVisualOptionSelects("VisualOptionArea", Object.keys(map.areas));
        
        setTextareaValue(stringifySmart(map), true);
        setDisplayMap(true);
    }
    
    function resetAllVisualOptionSelects(className, options) {
        var map = getMapObject(),
            elements = display.container.getElementsByClassName(className),
            attributes = {
                "children": options.map(function (option) {
                    return new Option(option, option);
                })
            },
            elements, element, value, i;
        
        if (!map) {
            return;
        }
        
        for (i = 0; i < elements.length; i += 1) {
            element = elements[i];
            value = element.value;
            
            element.textContent = "";
            GameStarter.proliferateElement(element, attributes);
            element.value = value;
        }
    }
    
    function getMapObject() {
        try {
            var map = parseSmart(display.stringer.textarea.value);
            display.stringer.messenger.textContent = "";
            display.namer.value = map.name || mapNameDefault;
            return map;
        }
        catch (error) {
            self.setSectionJSON();
            display.stringer.messenger.textContent = error.message;
            return undefined;
        }
    }
    
    function getMapObjectAndTry() {
        var mapName = getMapName() + "::Temporary",
            mapRaw = getMapObject();
        
        if (!mapRaw) {
            return false;
        }
        
        try {
            GameStarter.MapsCreator.storeMap(mapName, mapRaw);
            GameStarter.MapsCreator.getMap(mapName);
            setDisplayMap(true);
        } catch (error) {
            display.stringer.messenger.textContent = error.message;
            return false;
        }
    }
    
    function getCurrentArea() {
        return display["sections"]["MapSettings"]["Area"].value;
    }
    
    function getCurrentAreaObject(map) {
        if (typeof(map) === "undefined") {
            map = getMapObject();
        }
        
        var location = getCurrentLocation();
        
        return map.areas[map.locations[location].area || 0];
    }
    
    function getCurrentLocation() {
        return display["sections"]["MapSettings"]["Location"].value;
    }
    
    function getCurrentLocationObject(map) {
        return map.locations[getCurrentLocation()];
    }
    
    function addMapCreationThing(x, y) {
        var mapObject = getMapObject(),
            thingRaw = GameStarter.proliferate({
                "thing": currentType,
                "x": getNormalizedX(x) + (GameStarter.MapScreener.left / GameStarter.unitsize),
                "y": getNormalizedY(y)
            }, currentArgs);
        
        if (!mapObject) {
            return false;
        }
        
        mapObject.areas[getCurrentArea()].creation.push(thingRaw);
        
        setTextareaValue(stringifySmart(mapObject), true);
        
        return true;
    }
    
    function addMapCreationMacro(x, y) {
        var mapObject = getMapObject(),
            macroRaw = GameStarter.proliferate({
                "macro": currentType,
                "x": getNormalizedX(x) + (GameStarter.MapScreener.left / GameStarter.unitsize),
                "y": getNormalizedY(y)
            }, getCurrentArgs());
        
        if (!mapObject) {
            return false;
        }
        
        mapObject.areas[getCurrentArea()].creation.push(macroRaw);
        
        setTextareaValue(stringifySmart(mapObject), true);
        
        return true;
    }
    
    
    /* HTML manipulations
    */
    
    function resetDisplay() {
        if (display) {
            GameStarter.container.removeChild(display.container);
        }
        
        display = {
            "container": undefined,
            "scrollers": {
                "container": undefined,
                "left": undefined,
                "right": undefined
            },
            "gui": undefined,
            "namer": undefined,
            "minimizer": undefined,
            "stringer": {
                "textarea": undefined,
                "messenger": undefined
            },
            "sections": {
                "ClickToPlace": {
                    "container": undefined,
                    "Things": undefined,
                    "Macros": undefined,
                    "VisualSummary": undefined,
                    "VisualOptions": undefined,
                },
                "MapSettings": {
                    "container": undefined,
                    "Time": undefined,
                    "Setting": {
                        "Primary": undefined,
                        "Secondary": undefined,
                        "Tertiary": undefined
                    },
                    "Location": undefined,
                    "Entry": undefined
                },
                "JSON": undefined,
                "buttons": {
                    "ClickToPlace": {
                        "container": undefined,
                        "Things": undefined,
                        "Macros": undefined
                    },
                    "MapSettings": undefined,
                    "JSON": undefined
                }
            }
        };
        
        display["container"] = GameStarter.createElement("div", {
            "className": "LevelEditor",
            "onclick": cancelEvent,
            "ondragenter": handleDragEnter,
            "ondragover": handleDragOver,
            "ondrop": handleDragDrop,
            "children": [
                display["scrollers"]["container"] = GameStarter.createElement("div", {
                    "className": "EditorScrollers",
                    "onmousemove": onMouseMoveEditing,
                    "onclick": onClickEditingThing,
                    "children": [
                        display["scrollers"]["left"] = GameStarter.createElement("div", {
                            "className": "EditorScroller EditorScrollerLeft",
                            "onmousedown": onMouseDownScroller.bind(undefined, -GameStarter.unitsize * 2),
                            "onmouseup": onMouseUpScrolling,
                            "onmouseout": onMouseUpScrolling,
                            "onclick": cancelEvent,
                            "innerText": "<",
                            "style": {
                                "paddingTop": GameStarter.MapScreener.height / 2 - 35 + "px",
                                "fontSize": "70px",
                                "opacity": 0
                            }
                        }),
                        display["scrollers"]["right"] = GameStarter.createElement("div", {
                            "className": "EditorScroller EditorScrollerRight",
                            "onmousedown": onMouseDownScroller.bind(undefined, GameStarter.unitsize * 2),
                            "onmouseup": onMouseUpScrolling,
                            "onmouseout": onMouseUpScrolling,
                            "onclick": cancelEvent,
                            "innerText": ">",
                            "style": {
                                "paddingTop": GameStarter.MapScreener.height / 2 - 35 + "px",
                                "fontSize": "70px"
                            }
                        })
                    ]
                }),
                display["gui"] = GameStarter.createElement("div", {
                    "className": "EditorGui",
                    "children": [
                        GameStarter.createElement("div", {
                            "className": "EditorHead",
                            "children": [
                                GameStarter.createElement("div", {
                                    "className": "EditorNameContainer",
                                    "children": [
                                        display["namer"] = GameStarter.createElement("input", {
                                            "className": "EditorNameInput",
                                            "type": "text",
                                            "placeholder": mapNameDefault,
                                            "value": mapNameDefault,
                                            "onkeyup": setMapName,
                                            "onchange": setMapName
                                        })
                                    ]
                                }),
                                display["minimizer"] = GameStarter.createElement("div", {
                                    "className": "EditorHeadButton EditorMinimizer",
                                    "onclick": self.minimize,
                                    "textContent": "-"
                                }),
                                GameStarter.createElement("div", {
                                    "className": "EditorHeadButton EditorCloser",
                                    "textContent": "X",
                                    "onclick": self.disable
                                })
                            ]
                        }),
                        GameStarter.createElement("div", {
                            "className": "EditorSectionChoosers",
                            "onclick": cancelEvent,
                            "children": [
                                display["sections"]["buttons"]["ClickToPlace"]["container"] = GameStarter.createElement("div", {
                                    "className": "EditorMenuOption EditorSectionChooser EditorMenuOptionThird",
                                    "style": {
                                        "background": "white"
                                    },
                                    "textContent": "Visual",
                                    "onclick": self.setSectionClickToPlace,
                                }),
                                display["sections"]["buttons"]["MapSettings"] = GameStarter.createElement("div", {
                                    "className": "EditorMenuOption EditorSectionChooser EditorMenuOptionThird",
                                    "style": {
                                        "background": "gray"
                                    },
                                    "textContent": "Map",
                                    "onclick": self.setSectionMapSettings,
                                }),
                                display["sections"]["buttons"]["JSON"] = GameStarter.createElement("div", {
                                    "className": "EditorMenuOption EditorSectionChooser EditorMenuOptionThird",
                                    "style": {
                                        "background": "gray"
                                    },
                                    "textContent": "JSON",
                                    "onclick": self.setSectionJSON
                                })
                            ]
                        }),
                        display["sections"]["ClickToPlace"]["container"] = GameStarter.createElement("div", {
                            "className": "EditorOptionsList EditorSectionMain",
                            "onclick": cancelEvent,
                            "style": {
                                "display": "block"
                            },
                            "children": [
                                GameStarter.createElement("div", {
                                    "className": "EditorSubOptionsListsMenu",
                                    "children": [
                                        display["sections"]["buttons"]["ClickToPlace"]["Things"] = GameStarter.createElement("div", {
                                            "className": "EditorMenuOption EditorSubOptionsListChooser EditorMenuOptionHalf",
                                            "textContent": "Things",
                                            "onclick": self.setSectionClickToPlaceThings,
                                            "style": {
                                                "background": "#CCC"
                                            }
                                        }),
                                        display["sections"]["buttons"]["ClickToPlace"]["Macros"] = GameStarter.createElement("div", {
                                            "className": "EditorMenuOption EditorSubOptionsListChooser EditorMenuOptionHalf",
                                            "textContent": "Macros",
                                            "onclick": self.setSectionClickToPlaceMacros,
                                            "style": {
                                                "background": "#777"
                                            }
                                        })
                                    ]
                                }),
                                display["sections"]["ClickToPlace"]["Things"] = GameStarter.createElement("div", {
                                    "className": "EditorSectionSecondary EditorOptions EditorOptions-Things",
                                    "style": {
                                        "display": "block"
                                    },
                                    "children": (function () {
                                            var containers = Object.keys(things).map(function (key) {
                                                var children = Object.keys(things[key]).map(function (title) {
                                                    var thing = GameStarter.ObjectMaker.make(title),
                                                        container = GameStarter.createElement("div", {
                                                            "className": "EditorListOption",
                                                            "name": title,
                                                            "options": things[key][title],
                                                            "children": [thing.canvas],
                                                            "onclick": onThingIconClick.bind(
                                                                undefined,
                                                                title
                                                            )
                                                        }),
                                                        sizeMax = 70,
                                                        widthThing = thing.width * GameStarter.unitsize,
                                                        heightThing = thing.height * GameStarter.unitsize,
                                                        widthDiff = (sizeMax - widthThing) / 2, 
                                                        heightDiff = (sizeMax - heightThing) / 2;
                                                    
                                                    thing.canvas.style.top = heightDiff + "px";
                                                    thing.canvas.style.right = widthDiff + "px";
                                                    thing.canvas.style.bottom = heightDiff + "px";
                                                    thing.canvas.style.left = widthDiff + "px";
                                                    
                                                    GameStarter.PixelDrawer.setThingSprite(thing);
                                                    
                                                    return container;                                        
                                                });
                                                
                                                return GameStarter.createElement("div", {
                                                    "className": "EditorOptionContainer",
                                                    "style": {
                                                        "display": "none"
                                                    },
                                                    "children": children
                                                });
                                            }),
                                            selectedIndex = 0,
                                            switcher = createSelect(Object.keys(things), {
                                                "className": "EditorOptionContainerSwitchers",
                                                "onchange": function () {
                                                    containers[selectedIndex + 1].style.display = "none";
                                                    containers[switcher.selectedIndex + 1].style.display = "block";
                                                    selectedIndex = switcher.selectedIndex;
                                                }
                                            });
                                            
                                            containers[0].style.display = "block";
                                            containers.unshift(switcher);
                                            
                                        return containers;
                                    })()
                                }),
                                display["sections"]["ClickToPlace"]["Macros"] = GameStarter.createElement("div", {
                                    "className": "EditorSectionSecondary EditorOptions EditorOptions-Macros",
                                    "style": {
                                        "display": "none"
                                    },
                                    "children": Object.keys(macros).map(function (key) {
                                        var macro = macros[key];
                                        return GameStarter.createElement("div", {
                                            "className": "EditorOptionContainer",
                                            "children": [
                                                GameStarter.createElement("div", {
                                                    "className": "EditorOptionTitle EditorMenuOption",
                                                    "textContent": key,
                                                    "onclick": onMacroIconClick.bind(
                                                        undefined,
                                                        key,
                                                        macro["description"],
                                                        macro["options"]
                                                    )
                                                })
                                            ]
                                        })
                                    })
                                })
                            ]
                        }),
                        display["sections"]["MapSettings"]["container"] = GameStarter.createElement("div", {
                            "className": "EditorMapSettings EditorSectionMain",
                            "onclick": cancelEvent,
                            "style": {
                                "display": "none"
                            },
                            "children": [
                                GameStarter.createElement("div", {
                                    "className": "EditorMapSettingsSubGroup",
                                    "children": [
                                        GameStarter.createElement("label", {
                                            "textContent": "Current Location"
                                        }),
                                        display["sections"]["MapSettings"]["Location"] = createSelect([
                                            0
                                        ], {
                                            "className": "VisualOptionLocation",
                                            "onchange": setCurrentLocation.bind(undefined, true)
                                        })
                                    ]
                                }),
                                GameStarter.createElement("div", {
                                    "className": "EditorMapSettingsGroup",
                                    "children": [
                                        GameStarter.createElement("h4", {
                                            "textContent": "Map"
                                        }),
                                        GameStarter.createElement("div", {
                                            "className": "EditorMapSettingsSubGroup",
                                            "children": [
                                                GameStarter.createElement("label", {
                                                    "className": "EditorMapSettingsLabel",
                                                    "textContent": "Time"
                                                }),
                                                display["sections"]["MapSettings"]["Time"] = createSelect([
                                                    "100", "200", "300", "400", "500", "1000", "2000", "Infinity"
                                                ], {
                                                    "value": "Infinity",
                                                    "onchange": setMapTime.bind(undefined, true)
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                GameStarter.createElement("div", {
                                    "className": "EditorMapSettingsGroup",
                                    "children": [
                                        GameStarter.createElement("h4", {
                                            "textContent": "Location"
                                        }),
                                        GameStarter.createElement("div", {
                                            "className": "EditorMapSettingsSubGroup",
                                            "children": [
                                                GameStarter.createElement("label", {
                                                    "textContent": "Area"
                                                }),
                                                display["sections"]["MapSettings"]["Area"] = createSelect([
                                                    0
                                                ], {
                                                    "className": "VisualOptionArea",
                                                    "onchange": setLocationArea.bind(undefined, true)
                                                })
                                            ]
                                        }),
                                        GameStarter.createElement("div", {
                                            "className": "EditorMapSettingsSubGroup",
                                            "children": [
                                                GameStarter.createElement("label", {
                                                    "textContent": "Setting"
                                                }),
                                                display["sections"]["MapSettings"]["Setting"]["Primary"] = createSelect([
                                                    "Overworld", "Underworld", "Underwater", "Castle"
                                                ], {
                                                    "onchange": setMapSetting.bind(undefined, true)
                                                }),
                                                display["sections"]["MapSettings"]["Setting"]["Secondary"] = createSelect([
                                                    "", "Night", "Underwater", "Alt"
                                                ], {
                                                    "onchange": setMapSetting.bind(undefined, true)
                                                }),
                                                display["sections"]["MapSettings"]["Setting"]["Tertiary"] = createSelect([
                                                    "", "Night", "Underwater", "Alt"
                                                ], {
                                                    "onchange": setMapSetting.bind(undefined, true)
                                                })
                                            ]
                                        }),
                                        GameStarter.createElement("div", {
                                            "className": "EditorMapSettingsSubGroup",
                                            "children": [
                                                GameStarter.createElement("label", {
                                                    "textContent": "Entrance"
                                                }),
                                                display["sections"]["MapSettings"]["Entry"] = createSelect([
                                                    "Plain", "Normal", "Castle", "PipeVertical", "PipeHorizontal"
                                                ], {
                                                    "onchange": setMapEntry.bind(undefined, true)
                                                }),
                                            ]
                                        })
                                    ]
                                }),
                                GameStarter.createElement("div", {
                                    "className": "EditorMenuOption",
                                    "textContent": "+ Add Area",
                                    "onclick": addAreaToMap
                                }),
                                GameStarter.createElement("div", {
                                    "className": "EditorMenuOption",
                                    "textContent": "+ Add Location",
                                    "onclick": addLocationToMap
                                })
                            ]
                        }),
                        display["sections"]["JSON"] = GameStarter.createElement("div", {
                            "className": "EditorJSON EditorSectionMain",
                            "onclick": cancelEvent,
                            "style": {
                                "display": "none"
                            },
                            "children": [
                                display["stringer"]["textarea"] = GameStarter.createElement("textarea", {
                                    "className": "EditorJSONInput",
                                    "spellcheck": false,
                                    "onkeyup": getMapObjectAndTry,
                                    "onchange": getMapObjectAndTry
                                }),
                                display["stringer"]["messenger"] = GameStarter.createElement("div", {
                                    "className": "EditorJSONInfo"
                                })
                            ]
                        }),
                        display["sections"]["ClickToPlace"]["VisualSummary"] = GameStarter.createElement("div", {
                            "className": "EditorVisualSummary",
                            "onclick": cancelEvent,
                        }),
                        display["sections"]["ClickToPlace"]["VisualOptions"] = GameStarter.createElement("div", {
                            "className": "EditorVisualOptions",
                            "onclick": cancelEvent,
                            "textContent": "Click an icon to view options.",
                            "style": {
                                "display": "block"
                            }
                        }),
                        GameStarter.createElement("div", {
                            "className": "EditorMenu",
                            "onclick": cancelEvent,
                            "children": (function (actions) {
                                return Object.keys(actions).map(function (key) {
                                    return GameStarter.createElement("div", {
                                        "className": "EditorMenuOption EditorMenuOptionFifth EditorMenuOption-" + key,
                                        "textContent": key,
                                        "onclick": actions[key][0],
                                        "children": actions[key][1]
                                    });
                                });
                            })({
                                "Build": [self.startBuilding],
                                "Play": [self.startPlaying],
                                "Save": [self.downloadCurrentJSON],
                                "Load": [
                                    self.loadCurrentJSON,
                                    display["sections"]["inputDummy"] = GameStarter.createElement("input", {
                                        "type": "file",
                                        "style": {
                                            "display": "none"
                                        },
                                        "onchange": self.handleUploadStart
                                    })
                                ],
                                "Reset": [resetDisplayMap]
                            })
                        })
                    ]
                })
            ]
        });
        
        GameStarter.container.insertBefore(
            display.container, 
            GameStarter.container.children[0]
        );
    }
    
    /**
     * 
     */
    self.setSectionClickToPlace = function () {
        display.sections.ClickToPlace.VisualOptions.style.display = "block";
        display.sections.ClickToPlace.container.style.display = "block";
        display.sections.MapSettings.container.style.display = "none";
        display.sections.JSON.style.display = "none";
        display.sections.buttons.ClickToPlace.container.style.backgroundColor = "white";
        display.sections.buttons.MapSettings.style.background = "gray";
        display.sections.buttons.JSON.style.background = "gray";
    }
    
    /**
     * 
     */
    self.setSectionMapSettings = function () {
        display.sections.ClickToPlace.VisualOptions.style.display = "none";
        display.sections.ClickToPlace.container.style.display = "none";
        display.sections.MapSettings.container.style.display = "block";
        display.sections.JSON.style.display = "none";
        display.sections.buttons.ClickToPlace.container.style.background = "gray";
        display.sections.buttons.MapSettings.style.background = "white";
        display.sections.buttons.JSON.style.background = "gray";
    }
    
    /**
     * 
     */
    self.setSectionJSON = function () {
        display.sections.ClickToPlace.VisualOptions.style.display = "none";
        display.sections.ClickToPlace.container.style.display = "none";
        display.sections.MapSettings.container.style.display = "none";
        display.sections.JSON.style.display = "block";
        display.sections.buttons.ClickToPlace.container.style.background = "gray";
        display.sections.buttons.MapSettings.style.background = "gray";
        display.sections.buttons.JSON.style.background = "white";
    }
    
    /**
     * 
     */
    self.setSectionClickToPlaceThings = function (event) {
        setCurrentClickMode("Thing", event);
        display.gui.onclick = onClickEditingThing;
        display.scrollers.container.onclick = onClickEditingThing;
        display.sections.ClickToPlace.VisualOptions.style.display = "block";
        display.sections.ClickToPlace.Things.style.display = "block";
        display.sections.ClickToPlace.Macros.style.display = "none";
        display.sections.buttons.ClickToPlace.Things.style.background = "#CCC";
        display.sections.buttons.ClickToPlace.Macros.style.background = "#777";
    }
    
    /**
     * 
     */
    self.setSectionClickToPlaceMacros = function (event) {
        setCurrentClickMode("Macro", event);
        display.gui.onclick = onClickEditingMacro;
        display.scrollers.container.onclick = onClickEditingMacro;
        display.sections.ClickToPlace.VisualOptions.style.display = "block";
        display.sections.ClickToPlace.Things.style.display = "none";
        display.sections.ClickToPlace.Macros.style.display = "block";
        display.sections.buttons.ClickToPlace.Things.style.background = "#777";
        display.sections.buttons.ClickToPlace.Macros.style.background = "#CCC";
    }
    
    /**
     * 
     */
    function setTextareaValue(value, doBeautify) {
        if (doBeautify) {
            display.stringer.textarea.value = beautifier(value);
        } else {
            display.stringer.textarea.value = value;
        }
    }
    
    /** 
     * 
     */
    function beautifyTextareaValue() {
        display.stringer.textarea.value = beautifier(display.stringer.textarea.value);
    }
    
    /**
     * 
     */
    function setVisualOptions(name, description, options) {
        var visual = display["sections"]["ClickToPlace"]["VisualOptions"];
        
        visual.textContent = "";
        
        visual.appendChild(GameStarter.createElement("h3", {
            "className": "VisualOptionName",
            "textContent": name
        }));
        
        if (description) {
            visual.appendChild(GameStarter.createElement("div", {
                "className": "VisualOptionDescription",
                "textContent": description
            }));
        }
        
        if (options) {
            visual.appendChild(GameStarter.createElement("div", {
                "className": "VisualOptionsList",
                "children": Object.keys(options).map(function (key) {
                    return GameStarter.createElement("div", {
                        "className": "VisualOption",
                        "children": [
                            GameStarter.createElement("div", {
                                "className": "VisualOptionLabel",
                                "textContent": key
                            }),
                            createVisualOption(options[key])
                        ]
                    });
                })
            }));
        }
        
        display["sections"]["ClickToPlace"]["VisualSummary"].textContent = name;
    }
    
    /**
     * 
     */
    function createVisualOption(option) {
        switch (option.constructor) {
            case Number:
                option = {
                    "type": "Number",
                    "mod": option
                };
                break;
            
            case String:
                option = {
                    "type": option
                };
                break;
            
            case Array:
                option = {
                    "type": "Select",
                    "options": option
                };
                break;
        }
        
        switch (option.type) {
            case "Boolean":
                return createSelect([
                    "false", "true"
                ], {
                    "className": "VisualOptionValue",
                    "data:type": "Boolean",
                    "onchange": setCurrentArgs
                });
            
            case "Number":
                return GameStarter.createElement("div", {
                    "className": "VisualOptionHolder",
                    "children": (function () {
                        var modReal = option["mod"] || 1,
                            input = GameStarter.createElement("input", {
                                "type": "Number",
                                "data:type": "Number",
                                "value": (option["value"] === undefined) ? 1 : option["value"]
                            }, {
                                "className": "VisualOptionValue modReal" + modReal,
                                "onchange": setCurrentArgs
                            }),
                            children = [input];
                        
                        input.setAttribute("data:mod", modReal);
                        
                        if (option["Infinite"]) {
                            var valueOld,
                                infinite = createSelect(["Number", "Infinite"], {
                                    "className": "VisualOptionInfiniter",
                                    "onchange": function () {
                                        if (infinite.value === "Number") {
                                            input.type = "Number";
                                            input.disabled = false;
                                            
                                            input.value = valueOld;
                                            input.onchange();
                                        } else {
                                            input.type = "Text";
                                            input.disabled = true;
                                            
                                            valueOld = input.value;
                                            input.value = Infinity;
                                            input.onchange();
                                        }
                                    }
                                });
                            
                            if (option["value"] === Infinity) {
                                infinite.value = "Infinite";
                                infinite.onchange();
                            }
                            
                            children.push(infinite);
                        }
                        
                        if (modReal > 1) {
                            children.push(GameStarter.createElement("div", {
                                "className": "VisualOptionRecommendation",
                                "textContent": "x" + option["mod"]
                            }));
                        }
                        
                        return children;
                    })()
                });
            
            case "Select":
                return createSelect(option["options"], {
                    "className": "VisualOptionValue",
                    "data:type": "Boolean",
                    "onchange": setCurrentArgs
                });
            
            case "Location":
                var map = getMapObject();
                
                if (!map) {
                    return GameStarter.createElement("div", {
                        "className": "VisualOptionValue VisualOptionLocation EditorComplaint",
                        "text": "Fix map compilation to get locations!"
                    });
                }
                
                return createSelect(Object.keys(map.locations), {
                    "className": "VisualOptionValue VisualOptionLocation",
                    "data-type": "Number"
                });
            
            case "Area":
                var map = getMapObject();
                
                if (!map) {
                    return GameStarter.createElement("div", {
                        "className": "VisualOptionValue VisualOptionArea EditorComplaint",
                        "text": "Fix map compilation to get areas!"
                    });
                }
                
                return createSelect(Object.keys(map.areas), {
                    "className": "VisualOptionValue VisualOptionArea",
                    "data-type": "Number",
                    "onchange": setCurrentArgs
                });
            
            case "Everything":
                return createSelect(thingKeys, {
                    "className": "VisualOptionValue VisualOptionEverything",
                    "data-type": "String",
                    "onchange": setCurrentArgs
                });
            
            default:
                return GameStarter.createElement("div", {
                    "className": "EditorComplaint",
                    "textContent": "Unknown type requested: " + option.type
                });
        }
    }
    
    /**
     * 
     */
    function resetDisplayMap() {
        setTextareaValue(stringifySmart(mapDefault), true);
        setDisplayMap(true);
        GameStarter.InputWriter.setCanTrigger(false);
    }
    
    /**
     * 
     */
    function setDisplayMap(doDisableThings) {
        var value = display.stringer.textarea.value,
            mapName = getMapName(),
            testObject, 
            testMap,
            map;
        
        try {
            testObject = parseSmart(value);
            setTextareaValue(display.stringer.textarea.value);
        } catch (error) {
            self.setSectionJSON();
            display.stringer.messenger.textContent = error.message;
            return;
        }
        
        try {
            GameStarter.MapsCreator.storeMap(mapName, testObject);
            map = GameStarter.MapsCreator.getMap(mapName);
        } catch (error) {
            self.setSectionJSON();
            display.stringer.messenger.textContent = error.message;
            return;
        }
        
        display.stringer.messenger.textContent = "";
        setTextareaValue(display.stringer.textarea.value);
        GameStarter.setMap(mapName, getCurrentLocation());
        
        if (doDisableThings) {
            disableAllThings();
        }
    }
    
    /**
     * 
     */
    function getMapName() {
        return display.namer.value || mapNameDefault;
    }
    
    
    /* Utility functions
    */
    
    /**
     * 
     */
    function roundTo(number, rounding) {
        return Math.round(number / rounding) * rounding;
    }
    
    /**
     * 
     */
    var stringifySmart = (function (replacer) {
        return function(text) {
            return JSON.stringify(text, replacer);
        }
    })(function (key, value) {
        if (value !== value) {
            return "NaN";
        } else if (value === Infinity) {
            return "Infinity";
        } else if (value === -Infinity) {
            return "-Infinity";
        } else {
            return value;
        }
    });
    
    /**
     * 
     */
    var parseSmart = (function (replacer) {
        return function(text) {
            return JSON.parse(text, replacer);
        }
    })(function (key, value) {
        if (value === "NaN") {
            return NaN;
        } else if (value === "Infinity") {
            return Infinity;
        } else if (value === "-Infinity") {
            return -Infinity;
        } else {
            return value;
        }
    });
    
    /**
     * 
     */
    function disableThing(thing, opacity) {
        thing.movement = undefined;
        thing.onThingMake = undefined;
        thing.onThingAdd = undefined;
        thing.onThingAdded = undefined;
        thing.nofall = true;
        thing.nocollide = true;
        thing.xvel = 0;
        thing.yvel = 0;
        thing.opacity = typeof opacity === "undefined" ? .49 : opacity;
    }
    
    /**
     * 
     */
    function disableAllThings() {
        GameStarter.GroupHolder.getCharacterGroup().forEach(function (thing) {
            disableThing(thing);
        });
        GameStarter.StatsHolder.set("time", Infinity)
    }
    
    /**
     * 
     */
    function clearAllThings() {
        var groups = GameStarter.GroupHolder.getGroups(),
            group, i, j;
        
        for (i in groups) {
            for (j in groups[i]) {
                GameStarter.killNormal(groups[i][j]);
            }
        }
    }
    
    /**
     * 
     */
    function getNormalizedX(raw) {
        return raw / GameStarter.unitsize;
    }
    
    /**
     * 
     */
    function getNormalizedY(raw) {
        return GameStarter.MapScreener.floor - (raw / GameStarter.unitsize) + GameStarter.unitsize * 3; // Why +3?
    }
    
    /**
     * 
     */
    function getNormalizedThingArguments(args) {
        var argsNormal = GameStarter.proliferate({}, args);
        
        if (argsNormal["height"] === Infinity) {
            argsNormal["height"] = GameStarter.MapScreener.height;
        }
        if (argsNormal["width"] === Infinity) {
            argsNormal["width"] = GameStarter.MapScreener.width;
        }
        
        return argsNormal;
    }
    
    /**
     * 
     */
    function createSelect(options, attributes) {
        var select = GameStarter.createElement("select", attributes),
            i;
        
        for (i = 0; i < options.length; i += 1) {
            select.appendChild(GameStarter.createElement("option", {
                "value": options[i],
                "textContent": options[i]
            }));
        }
        
        if (typeof attributes.value !== "undefined") {
            select.value = attributes.value;
        }
        
        return select;
    }
    
    /**
     * 
     */
    function downloadFile(name, content) {
        var link = document.createElement('a');
        link.setAttribute('download', name);
        link.setAttribute('href', 'data:text/json;charset=utf-8,' + encodeURIComponent(content));
        display.container.appendChild(link);
        link.click();
        display.container.removeChild(link);
        return link;
    }
    
    /**
     * 
     */
    function killCurrentThings() {
        for (var i = 0; i < currentThings.length - 1; i += 1) {
            GameStarter.killNormal(currentThings[i].thing);
        }
    }
    
    /**
     * 
     */
    function cancelEvent(event) {
        if (!event) {
            return;
        }
        
        if (typeof event.preventDefault === "function") {
            event.preventDefault();
        }
        
        if (typeof event.stopPropagation === "function") {
            event.stopPropagation();
        }
        
        event.cancelBubble = true;
    }
    
    self.reset(settings || {});
}
/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2013 Einar Lielmanis and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

 JS Beautifier
---------------


  Written by Einar Lielmanis, <einar@jsbeautifier.org>
      http://jsbeautifier.org/

  Originally converted to javascript by Vital, <vital76@gmail.com>
  "End braces on own line" added by Chris J. Shull, <chrisjshull@gmail.com>
  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>


  Usage:
    js_beautify(js_source_text);
    js_beautify(js_source_text, options);

  The options are:
    indent_size (default 4)          - indentation size,
    indent_char (default space)      - character to indent with,
    preserve_newlines (default true) - whether existing line breaks should be preserved,
    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,

    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.

            jslint_happy       !jslint_happy
            ---------------------------------
            function ()        function ()

    brace_style (default "collapse") - "collapse" | "expand" | "end-expand"
            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.

    space_before_conditional (default true) - should the space before conditional statement be added, "if (true)" vs "if (true)",

    unescape_strings (default false) - should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"

    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.
          NOTE: This is not a hard limit. Lines will continue until a point where a newline would
                be preserved if it were present.

    e.g

    js_beautify(js_source_text, {
      'indent_size': 1,
      'indent_char': '\t'
    });

*/

(function () {

    var acorn = {};
    (function (exports) {
      // This section of code is taken from acorn.
      //
      // Acorn was written by Marijn Haverbeke and released under an MIT
      // license. The Unicode regexps (for identifiers and whitespace) were
      // taken from [Esprima](http://esprima.org) by Ariya Hidayat.
      //
      // Git repositories for Acorn are available at
      //
      //     http://marijnhaverbeke.nl/git/acorn
      //     https://github.com/marijnh/acorn.git

      // ## Character categories

      // Big ugly regular expressions that match characters in the
      // whitespace, identifier, and identifier-start categories. These
      // are only applied when a character is found to actually have a
      // code point above 128.

      var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
      var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
      var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

      // Whether a single character denotes a newline.

      var newline = /[\n\r\u2028\u2029]/;

      // Matches a whole line break (where CRLF is considered a single
      // line break). Used to count lines.

      var lineBreak = /\r\n|[\n\r\u2028\u2029]/g;

      // Test whether a given character code starts an identifier.

      var isIdentifierStart = exports.isIdentifierStart = function(code) {
        if (code < 65) return code === 36;
        if (code < 91) return true;
        if (code < 97) return code === 95;
        if (code < 123)return true;
        return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
      };

      // Test whether a given character is part of an identifier.

      var isIdentifierChar = exports.isIdentifierChar = function(code) {
        if (code < 48) return code === 36;
        if (code < 58) return true;
        if (code < 65) return false;
        if (code < 91) return true;
        if (code < 97) return code === 95;
        if (code < 123)return true;
        return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
      };
    })(acorn);

    function js_beautify(js_source_text, options) {
        "use strict";
        var beautifier = new Beautifier(js_source_text, options);
        return beautifier.beautify();
    }

    function Beautifier(js_source_text, options) {
        "use strict";
        var input, output_lines;
        var token_text, token_type, last_type, last_last_text, indent_string;
        var flags, previous_flags, flag_store;
        var whitespace, wordchar, punct, parser_pos, line_starters, reserved_words, digits;
        var prefix;
        var input_wanted_newline;
        var output_space_before_token;
        var input_length, n_newlines, whitespace_before_token;
        var handlers, MODE, opt;
        var preindent_string = '';



        whitespace = "\n\r\t ".split('');
        wordchar = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$'.split('');
        digits = '0123456789'.split('');

        punct = '+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! ~ , : ? ^ ^= |= :: =>';
        punct += ' <%= <% %> <?= <? ?>'; // try to be a good boy and try not to break the markup language identifiers
        punct = punct.split(' ');

        // words which should always start on new line.
        line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,yield'.split(',');
        reserved_words = line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof']);


        MODE = {
            BlockStatement: 'BlockStatement', // 'BLOCK'
            Statement: 'Statement', // 'STATEMENT'
            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
            Conditional: 'Conditional', //'(COND-EXPRESSION)',
            Expression: 'Expression' //'(EXPRESSION)'
        };

        handlers = {
            'TK_START_EXPR': handle_start_expr,
            'TK_END_EXPR': handle_end_expr,
            'TK_START_BLOCK': handle_start_block,
            'TK_END_BLOCK': handle_end_block,
            'TK_WORD': handle_word,
            'TK_RESERVED': handle_word,
            'TK_SEMICOLON': handle_semicolon,
            'TK_STRING': handle_string,
            'TK_EQUALS': handle_equals,
            'TK_OPERATOR': handle_operator,
            'TK_COMMA': handle_comma,
            'TK_BLOCK_COMMENT': handle_block_comment,
            'TKInLINE_COMMENT': handleInline_comment,
            'TK_COMMENT': handle_comment,
            'TK_DOT': handle_dot,
            'TK_UNKNOWN': handle_unknown
        };

        function create_flags(flags_base, mode) {
            var nextIndent_level = 0;
            if (flags_base) {
                nextIndent_level = flags_base.indentation_level;
                if (!justAdded_newline() &&
                    flags_base.lineIndent_level > nextIndent_level) {
                    nextIndent_level = flags_base.lineIndent_level;
                }
            }

            var next_flags = {
                mode: mode,
                parent: flags_base,
                last_text: flags_base ? flags_base.last_text : '', // last token text
                last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed
                declaration_statement: false,
                declaration_assignment: false,
                in_html_comment: false,
                multiline_frame: false,
                if_block: false,
                else_block: false,
                do_block: false,
                do_while: false,
                in_case_statement: false, // switch (..){ INSIDE HERE }
                in_case: false, // we're on the exact line with "case 0:"
                case_body: false, // the indented case-action block
                indentation_level: nextIndent_level,
                lineIndent_level: flags_base ? flags_base.lineIndent_level : nextIndent_level,
                start_lineIndex: output_lines.length,
                had_comment: false,
                ternary_depth: 0
            };
            return next_flags;
        }

        // Using object instead of string to allow for later expansion of info about each line

        function createOutput_line() {
            return {
                text: []
            };
        }

        // Some interpreters have unexpected results with foo = baz || bar;
        options = options ? options : {};
        opt = {};

        // compatibility
        if (options.space_after_anon_function !== undefined && options.jslint_happy === undefined) {
            options.jslint_happy = options.space_after_anon_function;
        }
        if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
            opt.brace_style = options.braces_on_own_line ? "expand" : "collapse";
        }
        opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : "collapse");

        // graceful handling of deprecated option
        if (opt.brace_style === "expand-strict") {
            opt.brace_style = "expand";
        }


        opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;
        opt.indent_char = options.indent_char ? options.indent_char : ' ';
        opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
        opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;
        opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);
        opt.spaceIn_paren = (options.spaceIn_paren === undefined) ? false : options.spaceIn_paren;
        opt.spaceIn_empty_paren = (options.spaceIn_empty_paren === undefined) ? false : options.spaceIn_empty_paren;
        opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;
        opt.keep_arrayIndentation = (options.keep_arrayIndentation === undefined) ? false : options.keep_arrayIndentation;
        opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;
        opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;
        opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);
        opt.e4x = (options.e4x === undefined) ? false : options.e4x;

        if (options.indent_with_tabs){
            opt.indent_char = '\t';
            opt.indent_size = 1;
        }

        //----------------------------------
        indent_string = '';
        while (opt.indent_size > 0) {
            indent_string += opt.indent_char;
            opt.indent_size -= 1;
        }

        while (js_source_text && (js_source_text.charAt(0) === ' ' || js_source_text.charAt(0) === '\t')) {
            preindent_string += js_source_text.charAt(0);
            js_source_text = js_source_text.substring(1);
        }
        input = js_source_text;
        // cache the source's length.
        input_length = js_source_text.length;

        last_type = 'TK_START_BLOCK'; // last token type
        last_last_text = ''; // pre-last token text
        output_lines = [createOutput_line()];
        output_space_before_token = false;
        whitespace_before_token = [];

        // Stack of parsing/formatting states, including MODE.
        // We tokenize, parse, and output in an almost purely a forward-only stream of token input
        // and formatted output.  This makes the beautifier less accurate than full parsers
        // but also far more tolerant of syntax errors.
        //
        // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
        // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
        // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
        // most full parsers would die, but the beautifier gracefully falls back to
        // MODE.BlockStatement and continues on.
        flag_store = [];
        set_mode(MODE.BlockStatement);

        parser_pos = 0;

        this.beautify = function () {
            /*jshint onevar:true */
            var t, i, keep_whitespace, sweet_code;

            while (true) {
                t = get_next_token();
                token_text = t[0];
                token_type = t[1];

                if (token_type === 'TK_EOF') {
                    // Unwind any open statements
                    while (flags.mode === MODE.Statement) {
                        restore_mode();
                    }
                    break;
                }

                keep_whitespace = opt.keep_arrayIndentation && is_array(flags.mode);
                input_wanted_newline = n_newlines > 0;

                if (keep_whitespace) {
                    for (i = 0; i < n_newlines; i += 1) {
                        print_newline(i > 0);
                    }
                } else {
                    if (opt.max_preserve_newlines && n_newlines > opt.max_preserve_newlines) {
                        n_newlines = opt.max_preserve_newlines;
                    }

                    if (opt.preserve_newlines) {
                        if (n_newlines > 1) {
                            print_newline();
                            for (i = 1; i < n_newlines; i += 1) {
                                print_newline(true);
                            }
                        }
                    }
                }

                handlers[token_type]();

                // The cleanest handling of inline comments is to treat them as though they aren't there.
                // Just continue formatting and the behavior should be logical.
                // Also ignore unknown tokens.  Again, this should result in better behavior.
                if (token_type !== 'TKInLINE_COMMENT' && token_type !== 'TK_COMMENT' &&
                    token_type !== 'TK_BLOCK_COMMENT' && token_type !== 'TK_UNKNOWN') {
                    last_last_text = flags.last_text;
                    last_type = token_type;
                    flags.last_text = token_text;
                }
                flags.had_comment = (token_type === 'TKInLINE_COMMENT' || token_type === 'TK_COMMENT'
                    || token_type === 'TK_BLOCK_COMMENT');
            }


            sweet_code = output_lines[0].text.join('');
            for (var lineIndex = 1; lineIndex < output_lines.length; lineIndex++) {
                sweet_code += '\n' + output_lines[lineIndex].text.join('');
            }
            sweet_code = sweet_code.replace(/[\r\n ]+$/, '');
            return sweet_code;
        };

        function trimOutput(eat_newlines) {
            eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

            if (output_lines.length) {
                trimOutput_line(output_lines[output_lines.length - 1], eat_newlines);

                while (eat_newlines && output_lines.length > 1 &&
                    output_lines[output_lines.length - 1].text.length === 0) {
                    output_lines.pop();
                    trimOutput_line(output_lines[output_lines.length - 1], eat_newlines);
                }
            }
        }

        function trimOutput_line(line) {
            while (line.text.length &&
                (line.text[line.text.length - 1] === ' ' ||
                    line.text[line.text.length - 1] === indent_string ||
                    line.text[line.text.length - 1] === preindent_string)) {
                line.text.pop();
            }
        }

        function trim(s) {
            return s.replace(/^\s+|\s+$/g, '');
        }

        // we could use just string.split, but
        // IE doesn't like returning empty strings

        function split_newlines(s) {
            //return s.split(/\x0d\x0a|\x0a/);

            s = s.replace(/\x0d/g, '');
            var out = [],
                idx = s.indexOf("\n");
            while (idx !== -1) {
                out.push(s.substring(0, idx));
                s = s.substring(idx + 1);
                idx = s.indexOf("\n");
            }
            if (s.length) {
                out.push(s);
            }
            return out;
        }

        function justAdded_newline() {
            var line = output_lines[output_lines.length - 1];
            return line.text.length === 0;
        }

        function justAdded_blankline() {
            if (justAdded_newline()) {
                if (output_lines.length === 1) {
                    return true; // start of the file and newline = blank
                }

                var line = output_lines[output_lines.length - 2];
                return line.text.length === 0;
            }
            return false;
        }

        function allow_wrap_or_preserved_newline(force_linewrap) {
            force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;
            if (opt.wrap_line_length && !force_linewrap) {
                var line = output_lines[output_lines.length - 1];
                var proposed_line_length = 0;
                // never wrap the first token of a line.
                if (line.text.length > 0) {
                    proposed_line_length = line.text.join('').length + token_text.length +
                        (output_space_before_token ? 1 : 0);
                    if (proposed_line_length >= opt.wrap_line_length) {
                        force_linewrap = true;
                    }
                }
            }
            if (((opt.preserve_newlines && input_wanted_newline) || force_linewrap) && !justAdded_newline()) {
                print_newline(false, true);

            }
        }

        function print_newline(force_newline, preserve_statement_flags) {
            output_space_before_token = false;

            if (!preserve_statement_flags) {
                if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {
                    while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
                        restore_mode();
                    }
                }
            }

            if (output_lines.length === 1 && justAdded_newline()) {
                return; // no newline on start of file
            }

            if (force_newline || !justAdded_newline()) {
                flags.multiline_frame = true;
                output_lines.push(createOutput_line());
            }
        }

        function print_token_lineIndentation() {
            if (justAdded_newline()) {
                var line = output_lines[output_lines.length - 1];
                if (opt.keep_arrayIndentation && is_array(flags.mode) && input_wanted_newline) {
                    // prevent removing of this whitespace as redundant
                    line.text.push('');
                    for (var i = 0; i < whitespace_before_token.length; i += 1) {
                        line.text.push(whitespace_before_token[i]);
                    }
                } else {
                    if (preindent_string) {
                        line.text.push(preindent_string);
                    }

                    printIndent_string(flags.indentation_level);
                }
            }
        }

        function printIndent_string(level) {
            // Never indent your first output indent at the start of the file
            if (output_lines.length > 1) {
                var line = output_lines[output_lines.length - 1];

                flags.lineIndent_level = level;
                for (var i = 0; i < level; i += 1) {
                    line.text.push(indent_string);
                }
            }
        }

        function print_token_space_before() {
            var line = output_lines[output_lines.length - 1];
            if (output_space_before_token && line.text.length) {
                var lastOutput = line.text[line.text.length - 1];
                if (lastOutput !== ' ' && lastOutput !== indent_string) { // prevent occassional duplicate space
                    line.text.push(' ');
                }
            }
        }

        function print_token(printable_token) {
            printable_token = printable_token || token_text;
            print_token_lineIndentation();
            print_token_space_before();
            output_space_before_token = false;
            output_lines[output_lines.length - 1].text.push(printable_token);
        }

        function indent() {
            flags.indentation_level += 1;
        }

        function deindent() {
            if (flags.indentation_level > 0 &&
                ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level))
                flags.indentation_level -= 1;
        }

        function remove_redundantIndentation(frame) {
            // This implementation is effective but has some issues:
            //     - less than great performance due to array splicing
            //     - can cause line wrap to happen too soon due to indent removal
            //           after wrap points are calculated
            // These issues are minor compared to ugly indentation.

            if (frame.multiline_frame) return;

            // remove one indent from each line inside this section
            var index = frame.start_lineIndex;
            var spliceIndex = 0;
            var line;

            while (index < output_lines.length) {
                line = output_lines[index];
                index++;

                // skip empty lines
                if (line.text.length === 0) {
                    continue;
                }

                // skip the preindent string if present
                if (preindent_string && line.text[0] === preindent_string) {
                    spliceIndex = 1;
                } else {
                    spliceIndex = 0;
                }

                // remove one indent, if present
                if (line.text[spliceIndex] === indent_string) {
                    line.text.splice(spliceIndex, 1);
                }
            }
        }

        function set_mode(mode) {
            if (flags) {
                flag_store.push(flags);
                previous_flags = flags;
            } else {
                previous_flags = create_flags(null, mode);
            }

            flags = create_flags(previous_flags, mode);
        }

        function is_array(mode) {
            return mode === MODE.ArrayLiteral;
        }

        function is_expression(mode) {
            return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
        }

        function restore_mode() {
            if (flag_store.length > 0) {
                previous_flags = flags;
                flags = flag_store.pop();
                if (previous_flags.mode === MODE.Statement) {
                    remove_redundantIndentation(previous_flags);
                }
            }
        }

        function start_of_object_property() {
            return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && flags.last_text === ':' &&
                flags.ternary_depth === 0;
        }

        function start_of_statement() {
            if (
                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && token_type === 'TK_WORD') ||
                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||
                    (last_type === 'TK_RESERVED' && flags.last_text === 'return' && !input_wanted_newline) ||
                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' && !(token_type === 'TK_RESERVED' && token_text === 'if')) ||
                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||
                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement
                        && !flags.in_case
                        && !(token_text === '--' || token_text === '++')
                        && token_type !== 'TK_WORD' && token_type !== 'TK_RESERVED') ||
                    (flags.mode === MODE.ObjectLiteral && flags.last_text === ':' && flags.ternary_depth === 0)

                ) {

                set_mode(MODE.Statement);
                indent();

                if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && token_type === 'TK_WORD') {
                    flags.declaration_statement = true;
                }

                // Issue #276:
                // If starting a new statement with [if, for, while, do], push to a new line.
                // if (a) if (b) if (c) d(); else e(); else f();
                if (!start_of_object_property()) {
                    allow_wrap_or_preserved_newline(
                        token_type === 'TK_RESERVED' && in_array(token_text, ['do', 'for', 'if', 'while']));
                }

                return true;
            }
            return false;
        }

        function all_lines_start_with(lines, c) {
            for (var i = 0; i < lines.length; i++) {
                var line = trim(lines[i]);
                if (line.charAt(0) !== c) {
                    return false;
                }
            }
            return true;
        }

        function each_line_matchesIndent(lines, indent) {
            var i = 0,
                len = lines.length,
                line;
            for (; i < len; i++) {
                line = lines[i];
                // allow empty lines to pass through
                if (line && line.indexOf(indent) !== 0) {
                    return false;
                }
            }
            return true;
        }

        function is_special_word(word) {
            return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);
        }

        function in_array(what, arr) {
            for (var i = 0; i < arr.length; i += 1) {
                if (arr[i] === what) {
                    return true;
                }
            }
            return false;
        }

        function unescape_string(s) {
            var esc = false,
                out = '',
                pos = 0,
                s_hex = '',
                escaped = 0,
                c;

            while (esc || pos < s.length) {

                c = s.charAt(pos);
                pos++;

                if (esc) {
                    esc = false;
                    if (c === 'x') {
                        // simple hex-escape \x24
                        s_hex = s.substr(pos, 2);
                        pos += 2;
                    } else if (c === 'u') {
                        // unicode-escape, \u2134
                        s_hex = s.substr(pos, 4);
                        pos += 4;
                    } else {
                        // some common escape, e.g \n
                        out += '\\' + c;
                        continue;
                    }
                    if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {
                        // some weird escaping, bail out,
                        // leaving whole string intact
                        return s;
                    }

                    escaped = parseInt(s_hex, 16);

                    if (escaped >= 0x00 && escaped < 0x20) {
                        // leave 0x00...0x1f escaped
                        if (c === 'x') {
                            out += '\\x' + s_hex;
                        } else {
                            out += '\\u' + s_hex;
                        }
                        continue;
                    } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
                        // single-quote, apostrophe, backslash - escape these
                        out += '\\' + String.fromCharCode(escaped);
                    } else if (c === 'x' && escaped > 0x7e && escaped <= 0xff) {
                        // we bail out on \x7f..\xff,
                        // leaving whole string escaped,
                        // as it's probably completely binary
                        return s;
                    } else {
                        out += String.fromCharCode(escaped);
                    }
                } else if (c === '\\') {
                    esc = true;
                } else {
                    out += c;
                }
            }
            return out;
        }

        function is_next(find) {
            var local_pos = parser_pos;
            var c = input.charAt(local_pos);
            while (in_array(c, whitespace) && c !== find) {
                local_pos++;
                if (local_pos >= input_length) {
                    return false;
                }
                c = input.charAt(local_pos);
            }
            return c === find;
        }

        function get_next_token() {
            var i, resulting_string;

            n_newlines = 0;

            if (parser_pos >= input_length) {
                return ['', 'TK_EOF'];
            }

            input_wanted_newline = false;
            whitespace_before_token = [];

            var c = input.charAt(parser_pos);
            parser_pos += 1;

            while (in_array(c, whitespace)) {

                if (c === '\n') {
                    n_newlines += 1;
                    whitespace_before_token = [];
                } else if (n_newlines) {
                    if (c === indent_string) {
                        whitespace_before_token.push(indent_string);
                    } else if (c !== '\r') {
                        whitespace_before_token.push(' ');
                    }
                }

                if (parser_pos >= input_length) {
                    return ['', 'TK_EOF'];
                }

                c = input.charAt(parser_pos);
                parser_pos += 1;
            }

            // NOTE: because beautifier doesn't fully parse, it doesn't use acorn.isIdentifierStart.
            // It just treats all identifiers and numbers and such the same.
            if (acorn.isIdentifierChar(input.charCodeAt(parser_pos-1))) {
                if (parser_pos < input_length) {
                    while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {
                        c += input.charAt(parser_pos);
                        parser_pos += 1;
                        if (parser_pos === input_length) {
                            break;
                        }
                    }
                }

                // small and surprisingly unugly hack for 1E-10 representation
                if (parser_pos !== input_length && c.match(/^[0-9]+[Ee]$/) && (input.charAt(parser_pos) === '-' || input.charAt(parser_pos) === '+')) {

                    var sign = input.charAt(parser_pos);
                    parser_pos += 1;

                    var t = get_next_token();
                    c += sign + t[0];
                    return [c, 'TK_WORD'];
                }

                if (!(last_type === 'TK_DOT' ||
                        (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['set', 'get'])))
                    && in_array(c, reserved_words)) {
                    if (c === 'in') { // hack for 'in' operator
                        return [c, 'TK_OPERATOR'];
                    }
                    return [c, 'TK_RESERVED'];
                }
                return [c, 'TK_WORD'];
            }

            if (c === '(' || c === '[') {
                return [c, 'TK_START_EXPR'];
            }

            if (c === ')' || c === ']') {
                return [c, 'TK_END_EXPR'];
            }

            if (c === '{') {
                return [c, 'TK_START_BLOCK'];
            }

            if (c === '}') {
                return [c, 'TK_END_BLOCK'];
            }

            if (c === ';') {
                return [c, 'TK_SEMICOLON'];
            }

            if (c === '/') {
                var comment = '';
                // peek for comment /* ... */
                var inline_comment = true;
                if (input.charAt(parser_pos) === '*') {
                    parser_pos += 1;
                    if (parser_pos < input_length) {
                        while (parser_pos < input_length && !(input.charAt(parser_pos) === '*' && input.charAt(parser_pos + 1) && input.charAt(parser_pos + 1) === '/')) {
                            c = input.charAt(parser_pos);
                            comment += c;
                            if (c === "\n" || c === "\r") {
                                inline_comment = false;
                            }
                            parser_pos += 1;
                            if (parser_pos >= input_length) {
                                break;
                            }
                        }
                    }
                    parser_pos += 2;
                    if (inline_comment && n_newlines === 0) {
                        return ['/*' + comment + '*/', 'TKInLINE_COMMENT'];
                    } else {
                        return ['/*' + comment + '*/', 'TK_BLOCK_COMMENT'];
                    }
                }
                // peek for comment // ...
                if (input.charAt(parser_pos) === '/') {
                    comment = c;
                    while (input.charAt(parser_pos) !== '\r' && input.charAt(parser_pos) !== '\n') {
                        comment += input.charAt(parser_pos);
                        parser_pos += 1;
                        if (parser_pos >= input_length) {
                            break;
                        }
                    }
                    return [comment, 'TK_COMMENT'];
                }

            }


            if (c === '`' || c === "'" || c === '"' || // string
                (
                    (c === '/') || // regexp
                    (opt.e4x && c === "<" && input.slice(parser_pos - 1).match(/^<([-a-zA-Z:0-9_.]+|{[^{}]*}|!\[CDATA\[[\s\S]*?\]\])\s*([-a-zA-Z:0-9_.]+=('[^']*'|"[^"]*"|{[^{}]*})\s*)*\/?\s*>/)) // xml
                ) && ( // regex and xml can only appear in specific locations during parsing
                    (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) ||
                    (last_type === 'TK_END_EXPR' && in_array(previous_flags.mode, [MODE.Conditional, MODE.ForInitializer])) ||
                    (in_array(last_type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',
                        'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'
                    ]))
                )) {

                var sep = c,
                    esc = false,
                    has_char_escapes = false;

                resulting_string = c;

                if (parser_pos < input_length) {
                    if (sep === '/') {
                        //
                        // handle regexp
                        //
                        var in_char_class = false;
                        while (esc || in_char_class || input.charAt(parser_pos) !== sep) {
                            resulting_string += input.charAt(parser_pos);
                            if (!esc) {
                                esc = input.charAt(parser_pos) === '\\';
                                if (input.charAt(parser_pos) === '[') {
                                    in_char_class = true;
                                } else if (input.charAt(parser_pos) === ']') {
                                    in_char_class = false;
                                }
                            } else {
                                esc = false;
                            }
                            parser_pos += 1;
                            if (parser_pos >= input_length) {
                                // incomplete string/rexp when end-of-file reached.
                                // bail out with what had been received so far.
                                return [resulting_string, 'TK_STRING'];
                            }
                        }
                    } else if (opt.e4x && sep === '<') {
                        //
                        // handle e4x xml literals
                        //
                        var xmlRegExp = /<(\/?)([-a-zA-Z:0-9_.]+|{[^{}]*}|!\[CDATA\[[\s\S]*?\]\])\s*([-a-zA-Z:0-9_.]+=('[^']*'|"[^"]*"|{[^{}]*})\s*)*(\/?)\s*>/g;
                        var xmlStr = input.slice(parser_pos - 1);
                        var match = xmlRegExp.exec(xmlStr);
                        if (match && match.index === 0) {
                            var rootTag = match[2];
                            var depth = 0;
                            while (match) {
                                var isEndTag = !! match[1];
                                var tagName = match[2];
                                var isSingletonTag = ( !! match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
                                if (tagName === rootTag && !isSingletonTag) {
                                    if (isEndTag) {
                                        --depth;
                                    } else {
                                        ++depth;
                                    }
                                }
                                if (depth <= 0) {
                                    break;
                                }
                                match = xmlRegExp.exec(xmlStr);
                            }
                            var xmlLength = match ? match.index + match[0].length : xmlStr.length;
                            parser_pos += xmlLength - 1;
                            return [xmlStr.slice(0, xmlLength), "TK_STRING"];
                        }
                    } else {
                        //
                        // handle string
                        //
                        while (esc || input.charAt(parser_pos) !== sep) {
                            resulting_string += input.charAt(parser_pos);
                            if (esc) {
                                if (input.charAt(parser_pos) === 'x' || input.charAt(parser_pos) === 'u') {
                                    has_char_escapes = true;
                                }
                                esc = false;
                            } else {
                                esc = input.charAt(parser_pos) === '\\';
                            }
                            parser_pos += 1;
                            if (parser_pos >= input_length) {
                                // incomplete string/rexp when end-of-file reached.
                                // bail out with what had been received so far.
                                return [resulting_string, 'TK_STRING'];
                            }
                        }

                    }
                }

                parser_pos += 1;
                resulting_string += sep;

                if (has_char_escapes && opt.unescape_strings) {
                    resulting_string = unescape_string(resulting_string);
                }

                if (sep === '/') {
                    // regexps may have modifiers /regexp/MOD , so fetch those, too
                    while (parser_pos < input_length && in_array(input.charAt(parser_pos), wordchar)) {
                        resulting_string += input.charAt(parser_pos);
                        parser_pos += 1;
                    }
                }
                return [resulting_string, 'TK_STRING'];
            }

            if (c === '#') {


                if (output_lines.length === 1 && output_lines[0].text.length === 0 &&
                    input.charAt(parser_pos) === '!') {
                    // shebang
                    resulting_string = c;
                    while (parser_pos < input_length && c !== '\n') {
                        c = input.charAt(parser_pos);
                        resulting_string += c;
                        parser_pos += 1;
                    }
                    return [trim(resulting_string) + '\n', 'TK_UNKNOWN'];
                }



                // Spidermonkey-specific sharp variables for circular references
                // https://developer.mozilla.org/En/SharpVariablesIn_JavaScript
                // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935
                var sharp = '#';
                if (parser_pos < input_length && in_array(input.charAt(parser_pos), digits)) {
                    do {
                        c = input.charAt(parser_pos);
                        sharp += c;
                        parser_pos += 1;
                    } while (parser_pos < input_length && c !== '#' && c !== '=');
                    if (c === '#') {
                        //
                    } else if (input.charAt(parser_pos) === '[' && input.charAt(parser_pos + 1) === ']') {
                        sharp += '[]';
                        parser_pos += 2;
                    } else if (input.charAt(parser_pos) === '{' && input.charAt(parser_pos + 1) === '}') {
                        sharp += '{}';
                        parser_pos += 2;
                    }
                    return [sharp, 'TK_WORD'];
                }
            }

            if (c === '<' && input.substring(parser_pos - 1, parser_pos + 3) === '<!--') {
                parser_pos += 3;
                c = '<!--';
                while (input.charAt(parser_pos) !== '\n' && parser_pos < input_length) {
                    c += input.charAt(parser_pos);
                    parser_pos++;
                }
                flags.in_html_comment = true;
                return [c, 'TK_COMMENT'];
            }

            if (c === '-' && flags.in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === '-->') {
                flags.in_html_comment = false;
                parser_pos += 2;
                return ['-->', 'TK_COMMENT'];
            }

            if (c === '.') {
                return [c, 'TK_DOT'];
            }

            if (in_array(c, punct)) {
                while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {
                    c += input.charAt(parser_pos);
                    parser_pos += 1;
                    if (parser_pos >= input_length) {
                        break;
                    }
                }

                if (c === ',') {
                    return [c, 'TK_COMMA'];
                } else if (c === '=') {
                    return [c, 'TK_EQUALS'];
                } else {
                    return [c, 'TK_OPERATOR'];
                }
            }

            return [c, 'TK_UNKNOWN'];
        }

        function handle_start_expr() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            var next_mode = MODE.Expression;
            if (token_text === '[') {

                if (last_type === 'TK_WORD' || flags.last_text === ')') {
                    // this is array index specifier, break immediately
                    // a[x], fn()[x]
                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, line_starters)) {
                        output_space_before_token = true;
                    }
                    set_mode(next_mode);
                    print_token();
                    indent();
                    if (opt.spaceIn_paren) {
                        output_space_before_token = true;
                    }
                    return;
                }

                next_mode = MODE.ArrayLiteral;
                if (is_array(flags.mode)) {
                    if (flags.last_text === '[' ||
                        (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {
                        // ], [ goes to new line
                        // }, [ goes to new line
                        if (!opt.keep_arrayIndentation) {
                            print_newline();
                        }
                    }
                }

            } else {
                if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {
                    next_mode = MODE.ForInitializer;
                } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {
                    next_mode = MODE.Conditional;
                } else {
                    // next_mode = MODE.Expression;
                }
            }

            if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {
                print_newline();
            } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {
                // TODO: Consider whether forcing this is required.  Review failing tests when removed.
                allow_wrap_or_preserved_newline(input_wanted_newline);
                // do nothing on (( and )( and ][ and ]( and .(
            } else if (!(last_type === 'TK_RESERVED' && token_text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {
                output_space_before_token = true;
            } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||
                (flags.last_text === '*' && last_last_text === 'function')) {
                // function () vs function ()
                if (opt.jslint_happy) {
                    output_space_before_token = true;
                }
            } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, line_starters) || flags.last_text === 'catch')) {
                if (opt.space_before_conditional) {
                    output_space_before_token = true;
                }
            }

            // Support of this kind of newline preservation.
            // a = (b &&
            //     (c || d));
            if (token_text === '(') {
                if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                    if (!start_of_object_property()) {
                        allow_wrap_or_preserved_newline();
                    }
                }
            }

            set_mode(next_mode);
            print_token();
            if (opt.spaceIn_paren) {
                output_space_before_token = true;
            }

            // In all cases, if we newline while inside an expression it should be indented.
            indent();
        }

        function handle_end_expr() {
            // statements inside expressions are not valid syntax, but...
            // statements must all be closed when their container closes
            while (flags.mode === MODE.Statement) {
                restore_mode();
            }

            if (flags.multiline_frame) {
                allow_wrap_or_preserved_newline(token_text === ']' && is_array(flags.mode) && !opt.keep_arrayIndentation);
            }

            if (opt.spaceIn_paren) {
                if (last_type === 'TK_START_EXPR' && ! opt.spaceIn_empty_paren) {
                    // () [] no inner space in empty parens like these, ever, ref #320
                    trimOutput();
                    output_space_before_token = false;
                } else {
                    output_space_before_token = true;
                }
            }
            if (token_text === ']' && opt.keep_arrayIndentation) {
                print_token();
                restore_mode();
            } else {
                restore_mode();
                print_token();
            }
            remove_redundantIndentation(previous_flags);

            // do {} while () // no statement required after
            if (flags.do_while && previous_flags.mode === MODE.Conditional) {
                previous_flags.mode = MODE.Expression;
                flags.do_block = false;
                flags.do_while = false;

            }
        }

        function handle_start_block() {
            set_mode(MODE.BlockStatement);

            var empty_braces = is_next('}');
            var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&
                last_type === 'TK_END_EXPR';

            if (opt.brace_style === "expand") {
                if (last_type !== 'TK_OPERATOR' &&
                    (empty_anonymous_function ||
                        last_type === 'TK_EQUALS' ||
                        (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {
                    output_space_before_token = true;
                } else {
                    print_newline(false, true);
                }
            } else { // collapse
                if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {
                    if (last_type === 'TK_START_BLOCK') {
                        print_newline();
                    } else {
                        output_space_before_token = true;
                    }
                } else {
                    // if TK_OPERATOR or TK_START_EXPR
                    if (is_array(previous_flags.mode) && flags.last_text === ',') {
                        if (last_last_text === '}') {
                            // }, { in array context
                            output_space_before_token = true;
                        } else {
                            print_newline(); // [a, b, c, {
                        }
                    }
                }
            }
            print_token();
            indent();
        }

        function handle_end_block() {
            // statements must all be closed when their container closes
            while (flags.mode === MODE.Statement) {
                restore_mode();
            }
            var empty_braces = last_type === 'TK_START_BLOCK';

            if (opt.brace_style === "expand") {
                if (!empty_braces) {
                    print_newline();
                }
            } else {
                // skip {}
                if (!empty_braces) {
                    if (is_array(flags.mode) && opt.keep_arrayIndentation) {
                        // we REALLY need a newline here, but newliner would skip that
                        opt.keep_arrayIndentation = false;
                        print_newline();
                        opt.keep_arrayIndentation = true;

                    } else {
                        print_newline();
                    }
                }
            }
            restore_mode();
            print_token();
        }

        function handle_word() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            } else if (input_wanted_newline && !is_expression(flags.mode) &&
                (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&
                last_type !== 'TK_EQUALS' &&
                (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {

                print_newline();
            }

            if (flags.do_block && !flags.do_while) {
                if (token_type === 'TK_RESERVED' && token_text === 'while') {
                    // do {} ## while ()
                    output_space_before_token = true;
                    print_token();
                    output_space_before_token = true;
                    flags.do_while = true;
                    return;
                } else {
                    // do {} should always have while as the next word.
                    // if we don't see the expected while, recover
                    print_newline();
                    flags.do_block = false;
                }
            }

            // if may be followed by else, or not
            // Bare/inline ifs are tricky
            // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
            if (flags.if_block) {
                if (!flags.else_block && (token_type === 'TK_RESERVED' && token_text === 'else')) {
                    flags.else_block = true;
                } else {
                    while (flags.mode === MODE.Statement) {
                        restore_mode();
                    }
                    flags.if_block = false;
                    flags.else_block = false;
                }
            }

            if (token_type === 'TK_RESERVED' && (token_text === 'case' || (token_text === 'default' && flags.in_case_statement))) {
                print_newline();
                if (flags.case_body || opt.jslint_happy) {
                    // switch cases following one another
                    deindent();
                    flags.case_body = false;
                }
                print_token();
                flags.in_case = true;
                flags.in_case_statement = true;
                return;
            }

            if (token_type === 'TK_RESERVED' && token_text === 'function') {
                if (in_array(flags.last_text, ['}', ';']) || (justAdded_newline() && ! in_array(flags.last_text, ['[', '{', ':', '=', ',']))) {
                    // make sure there is a nice clean space of at least one blank line
                    // before a new function definition
                    if ( ! justAdded_blankline() && ! flags.had_comment) {
                        print_newline();
                        print_newline(true);
                    }
                }
                if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return'])) {
                        output_space_before_token = true;
                    } else {
                        print_newline();
                    }
                } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {
                    // foo = function
                    output_space_before_token = true;
                } else if (is_expression(flags.mode)) {
                    // (function
                } else {
                    print_newline();
                }
            }

            if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                if (!start_of_object_property()) {
                    allow_wrap_or_preserved_newline();
                }
            }

            if (token_type === 'TK_RESERVED' && token_text === 'function') {
                print_token();
                flags.last_word = token_text;
                return;
            }

            prefix = 'NONE';

            if (last_type === 'TK_END_BLOCK') {
                if (!(token_type === 'TK_RESERVED' && in_array(token_text, ['else', 'catch', 'finally']))) {
                    prefix = 'NEWLINE';
                } else {
                    if (opt.brace_style === "expand" || opt.brace_style === "end-expand") {
                        prefix = 'NEWLINE';
                    } else {
                        prefix = 'SPACE';
                        output_space_before_token = true;
                    }
                }
            } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {
                // TODO: Should this be for STATEMENT as well?
                prefix = 'NEWLINE';
            } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {
                prefix = 'SPACE';
            } else if (last_type === 'TK_STRING') {
                prefix = 'NEWLINE';
            } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||
                (flags.last_text === '*' && last_last_text === 'function')) {
                prefix = 'SPACE';
            } else if (last_type === 'TK_START_BLOCK') {
                prefix = 'NEWLINE';
            } else if (last_type === 'TK_END_EXPR') {
                output_space_before_token = true;
                prefix = 'NEWLINE';
            }

            if (token_type === 'TK_RESERVED' && in_array(token_text, line_starters) && flags.last_text !== ')') {
                if (flags.last_text === 'else') {
                    prefix = 'SPACE';
                } else {
                    prefix = 'NEWLINE';
                }

            }

            if (token_type === 'TK_RESERVED' && in_array(token_text, ['else', 'catch', 'finally'])) {
                if (last_type !== 'TK_END_BLOCK' || opt.brace_style === "expand" || opt.brace_style === "end-expand") {
                    print_newline();
                } else {
                    trimOutput(true);
                    var line = output_lines[output_lines.length - 1];
                    // If we trimmed and there's something other than a close block before us
                    // put a newline back in.  Handles '} // comment' scenario.
                    if (line.text[line.text.length - 1] !== '}') {
                        print_newline();
                    }
                    output_space_before_token = true;
                }
            } else if (prefix === 'NEWLINE') {
                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                    // no newline between 'return nnn'
                    output_space_before_token = true;
                } else if (last_type !== 'TK_END_EXPR') {
                    if ((last_type !== 'TK_START_EXPR' || !(token_type === 'TK_RESERVED' && in_array(token_text, ['var', 'let', 'const']))) && flags.last_text !== ':') {
                        // no need to force newline on 'var': for (var x = 0...)
                        if (token_type === 'TK_RESERVED' && token_text === 'if' && flags.last_word === 'else' && flags.last_text !== '{') {
                            // no newline for } else if {
                            output_space_before_token = true;
                        } else {
                            print_newline();
                        }
                    }
                } else if (token_type === 'TK_RESERVED' && in_array(token_text, line_starters) && flags.last_text !== ')') {
                    print_newline();
                }
            } else if (is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {
                print_newline(); // }, in lists get a newline treatment
            } else if (prefix === 'SPACE') {
                output_space_before_token = true;
            }
            print_token();
            flags.last_word = token_text;

            if (token_type === 'TK_RESERVED' && token_text === 'do') {
                flags.do_block = true;
            }

            if (token_type === 'TK_RESERVED' && token_text === 'if') {
                flags.if_block = true;
            }
        }

        function handle_semicolon() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
                // Semicolon can be the start (and end) of a statement
                output_space_before_token = false;
            }
            while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
                restore_mode();
            }
            print_token();
            if (flags.mode === MODE.ObjectLiteral) {
                // if we're in OBJECT mode and see a semicolon, its invalid syntax
                // recover back to treating this as a BLOCK
                flags.mode = MODE.BlockStatement;
            }
        }

        function handle_string() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
                // One difference - strings want at least a space before
                output_space_before_token = true;
            } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
                output_space_before_token = true;
            } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                if (!start_of_object_property()) {
                    allow_wrap_or_preserved_newline();
                }
            } else {
                print_newline();
            }
            print_token();
        }

        function handle_equals() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            if (flags.declaration_statement) {
                // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
                flags.declaration_assignment = true;
            }
            output_space_before_token = true;
            print_token();
            output_space_before_token = true;
        }

        function handle_comma() {
            if (flags.declaration_statement) {
                if (is_expression(flags.parent.mode)) {
                    // do not break on comma, for (var a = 1, b = 2)
                    flags.declaration_assignment = false;
                }

                print_token();

                if (flags.declaration_assignment) {
                    flags.declaration_assignment = false;
                    print_newline(false, true);
                } else {
                    output_space_before_token = true;
                }
                return;
            }

            print_token();
            if (flags.mode === MODE.ObjectLiteral ||
                (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {
                if (flags.mode === MODE.Statement) {
                    restore_mode();
                }
                print_newline();
            } else {
                // EXPR or DO_BLOCK
                output_space_before_token = true;
            }

        }

        function handle_operator() {
            // Check if this is a BlockStatement that should be treated as a ObjectLiteral
            if (token_text === ':' && flags.mode === MODE.BlockStatement &&
                    last_last_text === '{' &&
                    (last_type === 'TK_WORD' || last_type === 'TK_RESERVED')){
                flags.mode = MODE.ObjectLiteral;
            }

            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            var space_before = true;
            var space_after = true;
            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                // "return" had a special handling in TK_WORD. Now we need to return the favor
                output_space_before_token = true;
                print_token();
                return;
            }

            // hack for actionscript's import .*;
            if (token_text === '*' && last_type === 'TK_DOT' && !last_last_text.match(/^\d+$/)) {
                print_token();
                return;
            }

            if (token_text === ':' && flags.in_case) {
                flags.case_body = true;
                indent();
                print_token();
                print_newline();
                flags.in_case = false;
                return;
            }

            if (token_text === '::') {
                // no spaces around exotic namespacing syntax operator
                print_token();
                return;
            }

            // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
            // if there is a newline between -- or ++ and anything else we should preserve it.
            if (input_wanted_newline && (token_text === '--' || token_text === '++')) {
                print_newline(false, true);
            }

            // Allow line wrapping between operators
            if (last_type === 'TK_OPERATOR') {
                allow_wrap_or_preserved_newline();
            }

            if (in_array(token_text, ['--', '++', '!', '~']) || (in_array(token_text, ['-', '+']) && (in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) || in_array(flags.last_text, line_starters) || flags.last_text === ','))) {
                // unary operators (and binary +/- pretending to be unary) special cases

                space_before = false;
                space_after = false;

                if (flags.last_text === ';' && is_expression(flags.mode)) {
                    // for (;; ++i)
                    //        ^^^
                    space_before = true;
                }

                if (last_type === 'TK_RESERVED' || last_type === 'TK_END_EXPR') {
                    space_before = true;
                }

                if ((flags.mode === MODE.BlockStatement || flags.mode === MODE.Statement) && (flags.last_text === '{' || flags.last_text === ';')) {
                    // { foo; --i }
                    // foo(); --bar;
                    print_newline();
                }
            } else if (token_text === ':') {
                if (flags.ternary_depth === 0) {
                    if (flags.mode === MODE.BlockStatement) {
                        flags.mode = MODE.ObjectLiteral;
                    }
                    space_before = false;
                } else {
                    flags.ternary_depth -= 1;
                }
            } else if (token_text === '?') {
                flags.ternary_depth += 1;
            } else if (token_text === '*' && last_type === 'TK_RESERVED' && flags.last_text === 'function') {
                space_before = false;
                space_after = false;
            }
            output_space_before_token = output_space_before_token || space_before;
            print_token();
            output_space_before_token = space_after;
        }

        function handle_block_comment() {
            var lines = split_newlines(token_text);
            var j; // iterator for this case
            var javadoc = false;
            var starless = false;
            var lastIndent = whitespace_before_token.join('');
            var lastIndentLength = lastIndent.length;

            // block comment starts with a new line
            print_newline(false, true);
            if (lines.length > 1) {
                if (all_lines_start_with(lines.slice(1), '*')) {
                    javadoc = true;
                }
                else if (each_line_matchesIndent(lines.slice(1), lastIndent)) {
                    starless = true;
                }
            }

            // first line always indented
            print_token(lines[0]);
            for (j = 1; j < lines.length; j++) {
                print_newline(false, true);
                if (javadoc) {
                    // javadoc: reformat and re-indent
                    print_token(' ' + trim(lines[j]));
                } else if (starless && lines[j].length > lastIndentLength) {
                    // starless: re-indent non-empty content, avoiding trim
                    print_token(lines[j].substring(lastIndentLength));
                } else {
                    // normal comments output raw
                    output_lines[output_lines.length - 1].text.push(lines[j]);
                }
            }

            // for comments of more than one line, make sure there's a new line after
            print_newline(false, true);
        }

        function handleInline_comment() {
            output_space_before_token = true;
            print_token();
            output_space_before_token = true;
        }

        function handle_comment() {
            if (input_wanted_newline) {
                print_newline(false, true);
            } else {
                trimOutput(true);
            }

            output_space_before_token = true;
            print_token();
            print_newline(false, true);
        }

        function handle_dot() {
            if (start_of_statement()) {
                // The conditional starts the statement if appropriate.
            }

            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                output_space_before_token = true;
            } else {
                // allow preserved newlines before dots in general
                // force newlines on dots after close paren when break_chained - for bar().baz()
                allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);
            }

            print_token();
        }

        function handle_unknown() {
            print_token();

            if (token_text[token_text.length - 1] === '\n') {
                print_newline();
            }
        }
    }


    if (typeof define === "function" && define.amd) {
        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
        define([], function () {
            return { js_beautify: js_beautify };
        });
    } else if (typeof exports !== "undefined") {
        // Add support for CommonJS. Just put this file somewhere on your require.paths
        // and you will be able to `var js_beautify = require("beautify").js_beautify`.
        exports.js_beautify = js_beautify;
    } else if (typeof window !== "undefined") {
        // If we're running a web page and don't have either of the above, add our one global
        window.js_beautify = js_beautify;
    } else if (typeof global !== "undefined") {
        // If we don't even have window, try global.
        global.js_beautify = js_beautify;
    }

}());
/**
 * 
 */
function MapScreenr(settings) {
    "use strict";
    if (!this || this === window) {
        return new MapScreenr(settings);
    }
    var self = this,
        
        // An object of variables to be computed on screen changes, as "name"=>Function
        variables,
        
        // Arguments to be passed into variable computation functions, as an Array
        variableArgs;
    
    /**
     * 
     */
    self.reset = function(settings) {
        for (var name in settings) {
            if (settings.hasOwnProperty(name)) {
                self[name] = settings[name];
            }
        }
        
        variables = settings.variables || {};
        variableArgs = settings.variableArgs || [];
    }
    
    
    /* State changes
    */
    
    /**
     * 
     */
    self.clearScreen = function () {
        // 
        self.left = 0;
        self.top = 0;
        
        // 
        self.right = self.left + self.width;
        self.bottom = self.top + self.height;
        
        // 
        setMiddleX();
        setMiddleY();
        
        // 
        self.setVariables();
    };
    
    /**
     * 
     */
    function setMiddleX() {
        self.middlex = (self.left + self.right) / 2;
    }
    
    /**
     * 
     */
    function setMiddleY() {
        self.middley = (self.top + self.bottom) / 2;
    }
    
    /**
     * 
     */
    self.setVariables = function () {
        for (var i in variables) {
            self[i] = variables[i].apply(self, variableArgs);
        }
    }
    
    
    /* Element shifting
    */
    
    /**
     * 
     */
    self.shift = function(dx, dy) {
        if (dx) {
            self.shiftX(dx);
        }
        
        if (dy) {
            self.shiftY(dy);
        }
    };
    
    /**
     * 
     */
    self.shiftX = function(dx) {
        self.left += dx;
        self.right += dx;
    };
    
    /**
     * 
     */
    self.shiftY = function(dy) {
        self.top += dy;
        self.bottom += dy;
    };
    
    self.reset(settings || {});
}
/**
 * 
 */
function MapsCreatr(settings) {
    "use strict";
    if (!this || this === window) {
        return new MapsCreatr(settings);
    }
    var self = this,
        
        // ObjectMakr factory used to create Maps and Things
        ObjectMaker,
        
        // Associative array storing Map objects created by self.createMap
        maps,
        
        // Associative array storing macro functions, keyed by string alias
        macros,
        
        // Associative array storing default macro settings for all macros
        macroDefaults,
        
        // Associative array storing entrance functions, keyed by string alias
        entrances,
        
        // An Array of Strings that represents all the possible group types
        // processed PreThings may be placed in
        groupTypes,
        
        // Scratch xloc and yloc to be used for location offsets with PreThings
        xloc,
        yloc,
        
        // What key to check for group type under a Thing
        keyGroupType,
        
        // What key to check for if a PreThing's Thing is a Location's entrance
        key_entrance,
        
        // An optional scope to pass to macros as an argument after maps
        scope;
    
    /**
     * 
     */
    self.reset = function reset(settings) {
        // Maps and Things are created using an ObjectMaker factory
        if (!settings.ObjectMaker) {
            throw new Error("No ObjectMaker provided to MapsManger.");
        }
        ObjectMaker = settings.ObjectMaker;
        
        // At least one group type name should be defined for PreThing output
        if (!settings.groupTypes) {
            throw new Error("No group type names provided to MapsCreatr.");
        }
        groupTypes = settings.groupTypes;
        
        keyGroupType = settings.keyGroupType || "grouptype";
        key_entrance = settings.key_entrance || "entrance";
        
        macros = settings.macros || {};
        macroDefaults = settings.macroDefaults || {};
        entrances = settings.entrances || {};
        scope = settings.scope || self;
        
        maps = {};
        if (settings.maps) {
            self.storeMaps(settings.maps);
        }
    };
    
    
    /* Simple gets
    */
    
    /**
     * Simple getter for the maps container.
     * 
     * @return {Object} maps
     */
    self.getMaps = function getMaps() {
        return maps;
    };
    
    /**
     * Simple getter for a map under the maps container. If the map has not been
     * initialized (had its areas and locations set), that is done here as lazy
     * loading.
     * 
     * @param {Mixed} name   A key to find the map under. This will typically be
     *                       a String.
     * @return {Map}
     */
    self.getMap = function getMap(name) {
        var map = maps[name];
        if (!map) {
            throw new Error("No map found under: " + name);
        }
        
        if (!map.initialized) {
            // Set the one-to-many Map->Area relationships within the Map
            setMapAreas(map);
            
            // Set the one-to-many Area->Location relationships within the Map
            setMapLocations(map);    
            
            map.initialized = true;
        }
        
        return map;
    };
    
    /**
     * Creates and stores a set of new maps based on the key/value pairs in a 
     * given Object. These will be stored as maps by their string keys via 
     * self.storeMap.
     * 
     * @param {Object} settings   An Object containing a set of key/map pairs to
     *                            store as maps.
     * @return {Object}   The newly created maps object.
     */
    self.storeMaps = function(maps) {
        for (var i in maps) {
            if (maps.hasOwnProperty(i)) {
                self.storeMap(i, maps[i]);
            }
        }
    };
    
    /**
     * Creates and stores a new map. The internal ObjectMaker factory is used to
     * auto-generate it based on a given settings object. The actual loading of
     * areas and locations is deferred to self.getMap as lazy loading.
     * 
     * @param {Mixed} name   A name under which the map should be stored, 
     *                       commonly a String or Array.
     * @param {Object} settings   An Object containing arguments to be sent to
     *                            the ObjectMakr being used as a maps factory.
     * @return {Map}   The newly created map.
     */
    self.storeMap = function(name, settings) {
        var map = ObjectMaker.make("Map", settings);
        
        if (!name) {
            throw new Error("Maps cannot be created with no name.");
        }
        
        if (!map.areas) {
            throw new Error("Maps cannot be used with no areas: " + name);
        }
        
        if (!map.locations) {
            throw new Error("Maps cannot be used with no locations: " + name);
        }
        
        maps[name] = map;
        return map;
    }
    
    /**
     * Converts the raw area settings in a Map into Area objects.
     * 
     * These areas are typically stored as an Array or Object inside the Map 
     * containing some number of attribute keys (such as "settings") along with
     * an Array under "Creation" that stores some number of commands for 
     * populating that area in MapsHandlr::spawnMap.
     * 
     * @param {Map} map
     */
    function setMapAreas(map) {
        var areasRaw = map.areas,
            locationsRaw = map.locations,
            // The parsed containers should be the same types as the originals
            areas_parsed = new areasRaw.constructor(),
            locations_parsed = new locationsRaw.constructor(),
            obj, i;
        
        // Parse all the Area objects (works for both Arrays and Objects)
        for (i in areasRaw) {
            if (areasRaw.hasOwnProperty(i)) {
                obj = areas_parsed[i] = ObjectMaker.make("Area", areasRaw[i]);
                obj.map = map;
                obj.name = i;
            }
            obj.boundaries = {
                "top": 0,
                "right": 0,
                "bottom": 0,
                "left": 0
            };
        }
        
        // Parse all the Location objects (works for both Arrays and Objects)
        for (i in locationsRaw) {
            if (locationsRaw.hasOwnProperty(i)) {
                obj = locations_parsed[i] = ObjectMaker.make("Location", locationsRaw[i]);
                
                // Location entrances should actually be the keyed functions
                if (!entrances.hasOwnProperty(obj.entry)) {
                    throw new Error("Location " + i + " has unknown entry string: " + obj.entry);
                }
                obj.entryRaw = obj.entry;
                obj.entry = entrances[obj.entry];
                obj.name = i;
                obj.area = locationsRaw[i].area || 0;
            }
        }
        
        // Store the output object in the Map, and keep the raw settings for the
        // sake of debugging / user interest
        map.areas = areas_parsed;
        map.areasRaw = areasRaw;
        map.locations = locations_parsed;
        map.lcationsRaw = locationsRaw;
    }
    
    /**
     * Converts the raw location settings in a Map into Location objects.
     * 
     * These locations typically have very little information, generally just a
     * container Area, x-location, y-location, and spawning function.
     * 
     * @param {Map} map
     */
    function setMapLocations(map) {
        var locsRaw = map.locations,
            // The parsed container should be the same type as the original
            locs_parsed = new locsRaw.constructor(),
            location, i;
            
        // Parse all the keys in locasRaw (works for both Arrays and Objects)
        for (i in locsRaw) {
            if (locsRaw.hasOwnProperty(i)) {
                locs_parsed[i] = ObjectMaker.make("Location", locsRaw[i]);
                
                // The area should be an object reference, under the Map's areas
                locs_parsed[i].area = map.areas[locs_parsed[i].area || 0];
                if (!locs_parsed[i].area) {
                    throw new Error("Location " + i
                            + " references an invalid area: "
                            + locsRaw[i].area);
                }
            }
        }
        
        // Store the output object in the Map, and keep the old settings for the
        // sake of debugging / user interest
        map.locations = locs_parsed;
        map.locationsRaw = locsRaw;
    }
    
    
    /* Area setup (PreThing analysis)
    */
    
    /**
     * Given a Location object, which should contain a .area reference to its
     * parent Area and .map reference to its parent Map, this returns an 
     * associative array of PreThings containers.
     * 
     * Each reference (which is a JSON object taken from an Area's .creation 
     * Array) is an instruction to this script to switch to a location, push 
     * some number of PreThings to the PreThings object via a predefined macro,
     * or push a single PreThing to the PreThings object.
     * 
     * Once those PreThing objects are obtained, they are filtered for validity
     * (e.g. location setter commands are irrelevant after a single use), and 
     * sorted on .xloc and .yloc.
     * 
     * @param {Location} location 
     * @return {Object}   An associative array of PreThing containers. The keys 
     *                    will be the unique group types of all the allowed 
     *                    Thing groups, which will be stored in the parent
     *                    EightBittr's GroupHoldr. Each container stores Arrays
     *                    of the PreThings sorted by .xloc and .yloc in both
     *                    increasing and decreasing order.
     */
    self.getPreThings = function (location) {
        var area = location.area,
            map = area.map,
            creation = area.creation,
            prethings = fromKeys(groupTypes),
            i, len;
        
        xloc = 0;
        yloc = 0;
        
        area.collections = {};
        
        for (i = 0, len = creation.length; i < len; i += 1) {
            self.analyzePreSwitch(creation[i], prethings, area, map);
        }
        
        return processPreThingsArrays(prethings);
    };
    
    /**
     * PreThing switcher: Given a JSON representation of a PreThing, this 
     * determines what to do with it. It may be a location setter (to switch the
     * x- and y- location offset), a macro (to repeat some number of actions),
     * or a raw PreThing.
     * Any modifications done in a called function will be to push some number
     * of PreThings to their respective group in the output PreThings Object.
     * 
     * @param {Object} reference   A JSON mapping of some number of PreThings. 
     * @param {Object} PreThings   An associative array of PreThing Arrays, 
     *                             keyed by the allowed group types.
     * @param {Area} area   The Area object to be populated by these PreThings.
     * @param {Map} map   The Map object containing the Area object.
     */
    self.analyzePreSwitch = function (reference, prethings, area, map) {
        // Case: location setter
        if (reference.hasOwnProperty("location")) {
            analyzePreLocation(reference, prethings, area, map);
        }
        // Case: macro (unless it's undefined)
        else if (reference.macro) {
            self.analyzePreMacro(reference, prethings, area, map);
        }
        // Case: default (a regular PreThing)
        else {
            self.analyzePreThing(reference, prethings, area, map);
        }
    }
    
    /**
     * PreThing case: Location instruction. This modifies the currently used
     * xloc and yloc variables to match that location's.
     * 
     * @param {Object} reference   A JSON mapping of some number of PreThings. 
     * @param {Object} PreThings   An associative array of PreThing Arrays, 
     *                             keyed by the allowed group types.
     * @param {Area} area   The Area object to be populated by these PreThings.
     * @param {Map} map   The Map object containing the Area object.
     */
    function analyzePreLocation(reference, prethings, area, map) {
        var location = reference.location;
        
        if (!map.locations.hasOwnProperty(location)) {
            console.warn("A non-existent location is referenced. It will be "
                    + "ignored: " + location, reference, prethings, area, map);
            return;
        }
        
        xloc = map.locations[location].x;
        yloc = map.locations[location].y;
    }
    
    /**
     * PreThing case: Macro instruction. This calls the macro on the same input,
     * captures the output, and recursively repeats the analyzePreSwitch driver
     * function on the output(s). 
     * 
     * @param {Object} reference   A JSON mapping of some number of PreThings. 
     * @param {Object} PreThings   An associative array of PreThing Arrays, 
     *                             keyed by the allowed group types.
     * @param {Area} area   The Area object to be populated by these PreThings.
     * @param {Map} map   The Map object containing the Area object.
     */
    self.analyzePreMacro = function(reference, prethings, area, map) {
        var macro = macros[reference.macro],
            outputs, len, i;
        
        if (!macro) {
            console.warn("A non-existent macro is referenced. It will be "
                    + "ignored: " + macro, reference, prethings, area, map);
            return;
        }
        
        // Avoid modifying the original macro by creating a new object in its
        // place, while submissively proliferating any default macro settings
        outputs = macro(reference, prethings, area, map, scope);
        for (i in macroDefaults) {
            if (macroDefaults.hasOwnProperty(i) && !outputs.hasOwnProperty(i)) {
                outputs[i] = macroDefaults[i];
            }
        }
        
        // If there is any output, recurse on all components of it, Array or not
        if (outputs) {
            if (outputs instanceof Array) {
                for (i = 0, len = outputs.length; i < len; i += 1) {
                    self.analyzePreSwitch(outputs[i], prethings, area, map);
                }
            } else {
                self.analyzePreSwitch(outputs, prethings, area, map);
            }
        }
        
        return outputs;
    }
    
    /**
     * Macro case: PreThing instruction. This creates a PreThing from the
     * given reference and adds it to its respective group in PreThings (based
     * on the PreThing's [keyGroupType] variable).
     * 
     * @param {Object} reference   A JSON mapping of some number of PreThings. 
     * @param {Object} PreThings   An associative array of PreThing Arrays, 
     *                             keyed by the allowed group types.
     * @param {Area} area   The Area object to be populated by these PreThings.
     * @param {Map} map   The Map object containing the Area object.
     */
    self.analyzePreThing = function (reference, prethings, area, map, scope) {
        var thing = reference.thing,
            prething;
        
        if (!ObjectMaker.hasFunction(thing)) {
            console.warn("A non-existent Thing type is referenced. It will be "
                    + "ignored: " + thing, reference, prethings, area, map);
            return; 
        }
        
        prething = new PreThing(ObjectMaker.make(thing, reference), reference);
        thing = prething.thing;
        
        if (!prething.thing[keyGroupType]) {
            console.warn("A Thing does not contain a " + keyGroupType + ". "
                    + "It will be ignored: ",
                    prething, "\n", arguments);
            return;
        }
        
        if (groupTypes.indexOf(prething.thing[keyGroupType]) === -1) {
            console.warn("A Thing contains an unknown " + keyGroupType
                    + ". It will be ignored: " + thing[keyGroupType],
                    prething, reference, prethings, area, map);
            return;
        }
        
        prethings[prething.thing[keyGroupType]].push(prething);
        if (!thing.noBoundaryStretch && area.boundaries) {
            stretchAreaBoundaries(prething, area);
        }
        
        // If a Thing is an entrance, then the location it is an entrance to 
        // must it and its position. Note that this will have to be changed
        // for Pokemon/Zelda style games.
        if (thing[key_entrance] !== undefined && typeof thing[key_entrance] != "object") {
            map.locations[thing[key_entrance]].xloc = prething.left;
            map.locations[thing[key_entrance]].entrance = prething.thing;
        }
        
        if (reference.collectionName && area.collections) {
            ensureThingCollection(
                prething,
                reference.collectionName, 
                reference.collectionKey, 
                area
            );
        }
        
        return prething;
    }
    
    /**
     * 
     */
    function stretchAreaBoundaries(prething, area) {
        var boundaries = area.boundaries;
        
        boundaries.top = Math.min(prething.top, boundaries.top);
        boundaries.right = Math.max(prething.right, boundaries.right);
        boundaries.bottom = Math.max(prething.bottom, boundaries.bottom);
        boundaries.left = Math.min(prething.left, boundaries.left);
    }
    
    /**
     * 
     */
    function PreThing(thing, reference) {
        this.thing = thing;
        this.title = thing.title;
        this.reference = reference;
        this.spawned = false;
        
        this.left = (reference.x || reference.left) || 0;
        this.top = (reference.y || reference.top) || 0;
        
        this.right = this.left + (
            reference.width
            || ObjectMaker.getFullPropertiesOf(this.title).width
        );
        this.bottom = this.top + (
            reference.height
            || ObjectMaker.getFullPropertiesOf(this.title).height
        );
        
        if (reference.position) {
            this.position = reference.position;
        }
    }
    
    /**
     * Adds a Thing to the specified collection in the Map's Area.
     * 
     * @param {PreThing} prething
     * @param {String} collectionName
     */
    function ensureThingCollection(prething, collectionName, collectionKey, area) {
        var thing = prething.thing,
            collection = area.collections[collectionName];
        
        if (!collection) {
            collection = area.collections[collectionName] = {};
        }
        
        thing.collection = collection;
        collection[collectionKey] = thing;
    }   
    
    /**
     * Creates an Object wrapper around a PreThings Object with versions of
     * each child PreThing[]sorted by xloc and yloc, in increasing and 
     * decreasing order.
     * 
     * @param {Object} prethings
     * @return {Object} A PreThing wrapper with the keys "xInc", "xDec",
     *                  "yInc", and "yDec".
     */
    function processPreThingsArrays(prethings) {
        var output = {},
            children, i;
        
        for (i in prethings) {
            if (prethings.hasOwnProperty(i)) {
                children = prethings[i];
                output[i] = {
                    "xInc": getArraySorted(children, sortPreThingsXInc),
                    "xDec": getArraySorted(children, sortPreThingsXDec),
                    "yInc": getArraySorted(children, sortPreThingsYInc),
                    "yDec": getArraySorted(children, sortPreThingsYDec)
                };
                
                // Adding in a "push" lambda allows MapsCreatr to interact with
                // this using the same .push syntax as Arrays.
                output[i].push = (function (prethings, prething) {
                    addArraySorted(prethings["xInc"], prething, sortPreThingsXInc);
                    addArraySorted(prethings["xDec"], prething, sortPreThingsXDec);
                    addArraySorted(prethings["yInc"], prething, sortPreThingsYInc);
                    addArraySorted(prethings["yDec"], prething, sortPreThingsYDec);
                }).bind(undefined, output[i]);
            }
        }
        
        return output;
    }
    
    
    /* Utilities
    */
    
    /**
     * Creates an Object pre-populated with one key for each of the Strings in
     * the input Array, each pointing to a new Array. 
     * 
     * @param {String[]} arr
     * @return {Object}
     * @remarks This is a rough opposite of Object.keys, which takes in an 
     *          Object and returns an Array of Strings.
     */
    function fromKeys(arr) {
        var output = {},
            i;
        for (i = arr.length - 1; i >= 0; i -= 1) {
            output[arr[i]] = [];
        }
        return output;
    }
    
    /**
     * 
     */
    function getArraySorted(arr, func) {
        arr = arr.slice();
        arr.sort(func);
        return arr;
    }
    
    /**
     * 
     * 
     * @remarks This should eventually be O(logN), instead of O(N).
     */
    function addArraySorted(arr, object, sorter) {
        for (var i = 0; i < arr.length; i += 1) {
            if (sorter(object, arr[i]) < 0) {
                arr.splice(i, 0, object);
                return;
            }
        }
        arr.push(object);
    }
    
    /**
     * 
     */
    function sortPreThingsXInc(a, b) {
        return a.left === b.left ? a.top - b.top : a.left - b.left;
    }
    
    /**
     * 
     */
    function sortPreThingsXDec(a, b) {
        return b.right === a.right ? b.bottom - a.bottom : b.right - a.right;
    }
    
    /**
     * 
     */
    function sortPreThingsYInc(a, b) {
        return a.top === b.top ? a.left - b.left : a.top - b.top;
    }
    
    /**
     * 
     */
    function sortPreThingsYDec(a, b) {
        return b.bottom === a.bottom ? b.right - a.right : b.bottom - a.bottom;
    }
    
    self.reset(settings || {});
}
/**
 * 
 */
function MapsHandlr(settings) {
    "use strict";
    if (!this || this === window) {
        return new MapsCreatr(settings);
    }
    var self = this,
        
        // MapsCreatr container for maps from which this obtains Thing settings
        MapsCreator,
        
        // MapScreenr container for map attributes, such as "floor" or "setting"
        MapScreener,
        
        // An Array of strings representing the names of attributes to be copied
        // to the MapScreener during self.setLocation
        screenAttributes,
        
        // The currently referenced map from MapsCreator, set by self.setMap
        map_current, 
        
        // The currently referenced area in a map, set by self.setLocation
        area_current,
        
        // The currently referenced location in an area, set by self.setLocation
        location_current,
        
        // The name of the currently edited map, set by self.setMap
        mapName,
        
        // The current area's array of prethings that are to be added in order
        // during self.spawnMap
        prethings,
        
        // When a prething is to be spawned, this function should spawn it
        onSpawn,
        
        // When a prething is to be unspawned, this function should unspawn it
        on_unspawn,
        
        // Optionally, an array of Things to stretch across the map horizontally
        stretches,
        
        // If stretches exists, the function to call to add one to the map
        stretchAdd,
        
        // If stretches exists, the function to call to stretch horizontally
        onStretch,
        
        // Optionally, an array of Things to place at the end of the map
        afters,
        
        // If afters exists, the function to call to add one to the map
        afterAdd,
        
        // If afters exists, the function to call to stretch horizontally
        on_after,
        
        // Directional equivalents for converting from directions to keys
        directionKeys = {
            "xInc": "left",
            "xDec": "right",
            "yInc": "top",
            "yDec": "bottom"
        },
        
        // Opposite directions for when finding descending order Arrays
        directionOpposites = {
            "xInc": "xDec",
            "xDec": "xInc",
            "yInc": "yDec",
            "yDec": "yInc"
        };
    
    /**
     * 
     */
    self.reset = function (settings) {
        // Maps themselves should have been created in the MapsCreator object
        if (!settings.MapsCreator) {
            throw new Error("No MapsCreator provided to MapsHandlr.");
        }
        MapsCreator = settings.MapsCreator;
        
        // Map/Area attributes will need to be stored in a MapScreenr object
        if (!settings.MapScreener) {
            throw new Error("No MapScreener provided to MapsHandlr.");
        }
        MapScreener = settings.MapScreener;
        
        screenAttributes = settings.screenAttributes || [];
        
        onSpawn = settings.onSpawn;
        on_unspawn = settings.on_unspawn;
        
        stretchAdd = settings.stretchAdd;
        onStretch = settings.onStretch;
        
        afterAdd = settings.afterAdd;
        on_after = settings.on_after;
    };
    
    
    /* Simple gets
    */
    
    /**
     * Simple getter for the MapsCreatr object that makes the actual maps.
     * 
     * @return {MapsCreatr}
     */
    self.getMapsCreator = function () {
        return MapsCreator;
    };
    
    /**
     * Simple getter for the MapScreenr object where attributes are copied.
     * 
     * @return {MapScreenr}
     */
    self.getMapScreener = function () {
        return MapScreener;
    };
    
    /**
     * Simple getter for the Array of attribute names copied to the MapScreener.
     */
    self.getScreenAttributes = function () {
        return screenAttributes;
    };
    
    /**
     * Simple getter for the key by which the current map is located in 
     * the MapCreatr. This is typically a String.
     *
     * @return {Mixed}
     */
    self.getMapName = function () {
        return mapName;
    };
    
    /** 
     * Gets the map listed under the given name. If no name is provided, the
     * map_current is returned instead.
     * 
     * @param {Mixed} [name]   An optional key to find the map under. This will
     *                         typically be a String.
     * @return {Map}
     */
    self.getMap = function (name) {
        if (typeof name !== "undefined") {
            return MapsCreator.getMap(name);
        } else {
            return map_current;
        }
    };
    
    /**
     * Simple getter pipe to the internal MapsCreator.getMaps() function.
     * 
     * @return {Object}   An associative array of maps, keyed by their names.
     */
    self.getMaps = function () {
        return MapsCreator.getMaps();
    };
    
    /**
     * Simple getter function for the area_current object.
     * 
     * @return {Object} The current area object, included area attributes.
     */
    self.getArea = function () {
        return area_current;
    };
    
    /**
     * Simple getter function for a location within the current area's map.
     * 
     * @reutrn {Object} The request location object.
     */
    self.getLocation = function (location) {
        return area_current.map.locations[location];
    }
    
    /**
     * Simple getter function for the internal prethings object. This will be
     * null before the first self.setMap.
     * 
     * return {Prething[]}   An array of the current area's Prethings.
     */
    self.getPreThings = function () {
        return prethings;
    }
    
    
    /* Map / location setting
    */
    
    /**
     * Sets the currently manipulated map in the handler to be the one under a
     * given name. Note that this will do very little unless a location is 
     * provided (this is by design - an EightBitter using this should set them
     * manually).
     * 
     * @param {Mixed} name   A key to find the map under. This will typically be
     *                       a String.
     * @param {Number} [location]   An optional number for a location to
     *                              immediately start the map in. 
     *                          
     */
    self.setMap = function (name, location) {
        // Get the newly current map from self.getMap normally
        map_current = self.getMap(name);
        if (!map_current) {
            throw new Error("No map found under: " + name);
        }
        
        mapName = name;
        
        // Most of the work is done by setLocation (by default, the map's first)
        if (arguments.length > 1) {
            self.setLocation(location);
        }
        
        return map_current;
    };
    
    /**
     * Goes to a particular location in the given map. This is the primary,
     * meaty function for resetting attributes in the MapScreenr.
     * 
     * @param [mixed] location_number   The number of the location to start in.
     */
    self.setLocation = function (name) {
        var location, attribute, len, i;

        // Query the location from the current map and ensure it exists
        location = map_current.locations[name];
        if (!location) {
            throw new Error("Unknown location given: " + name);
        }
        
        // Since the location is valid, mark it as current (with its area)
        location_current = location;
        area_current = location.area;
        
        // Copy all the settings from that area into the MapScreenr container
        for (i = 0, len = screenAttributes.length; i < len; i += 1) {
            attribute = screenAttributes[i];
            MapScreener[attribute] = area_current[attribute];
        }
        
        // Reset the prethings object, enabling it to be used as a fresh start
        // for the new Area/Location placements
        prethings = MapsCreator.getPreThings(location);
        
        if (area_current.stretches) {
            setStretches(area_current.stretches);
        } else {
            stretches = undefined;
        }
        
        if (area_current.afters) {
            setAfters(area_current.afters);
        } else {
            afters = undefined;
        }
    };
    
    /**
     * 
     */
    function setStretches(stretchesRaw) {
        if (stretchesRaw) {
            stretches = stretchesRaw.map(stretchAdd);
        } else {
            stretches = [];
        }
    }
    
    /**
     * 
     */
    function setAfters(aftersRaw) {
        if (aftersRaw) {
            afters = aftersRaw.map(afterAdd);
        } else {
            afters = [];
        }
    }
    
    /**
     * 
     * 
     * 
     */
    self.spawnMap = function (direction, top, right, bottom, left) {
        applySpawnAction(onSpawn, true, direction, top, right, bottom, left);
    };
    
    /**
     * 
     * 
     * 
     */
    self.unspawnMap = function (direction, top, right, bottom, left) {
        applySpawnAction(on_unspawn, false, direction, top, right, bottom, left);
    };
    
    /**
     *
     *
     *
     * @param {Function} [callback]   The callback to be run whenever a 
     *                                matching PreThing is found.
     * @param {Boolean} status   The spawn status to match PreThings against.
     *                           Only PreThings with .spawned === status will 
     *                           have the callback applied to them.
     *
     *
     * @todo This will almost certainly present problems when different 
     *       directions are used. For Pokemon/Zelda style games, the system
     *       will probably need to be adapted to use a Quadrants approach
     *       instead of plain Arrays.
     */
    function applySpawnAction(callback, status, direction, top, right, bottom, left) {
        var name, group, mid, start, end, i, prething;
        
        // For each group of PreThings currently able to spawn...
        for (name in prethings) {
            if (!prethings.hasOwnProperty(name)) {
                continue;
            }
            
            // Don't bother trying to spawn the group if it has no members
            group = prethings[name][direction];
            if (group.length === 0) {
                continue;
            }
            
            // Find the start and end points within the PreThings Array
            // Ex. if direction="xInc", go from .left >= left to .left <= right
            mid = (group.length / 2) | 0;
            start = findPreThingsSpawnStart(direction, group, mid, top, right, bottom, left);
            end = findPreThingsSpawnEnd(direction, group, mid, top, right, bottom, left);
            
            // Loop through all the directionally valid PreThings, spawning if 
            // they're within the bounding box
            for (i = start; i <= end; i += 1) {
                prething = group[i];
                
                // This will have to be made relative to work for Pokemon/Zelda games...
                // if (
                    // prething.top > bottom
                    // || prething.right < left
                    // || prething.bottom < top
                    // || prething.left > right
                // ) {
                    // continue;
                // }
                
                // For example: if status is true (spawned), don't spawn again
                if (prething.spawned !== status) {
                    prething.spawned = status;
                    if (callback) {
                        callback(prething);
                    }
                }
            }
        }
    }
    
    
    /**
     * Warning: very inefficient! Should switch to binary search.
     */
    function findPreThingsSpawnStart(direction, group, i, top, right, bottom, left) {
        var directionKey = directionKeys[direction],
            directionEnd = getDirectionEnd(directionKey, top, right, bottom, left);
        
        for (var i = 0; i < group.length; i += 1) {
            if (group[i][directionKey] >= directionEnd) {
                return i;
            }
        }
        
        return i;
    }
    
    /**
     * Warning: very inefficient! Should switch to binary search.
     */
    function findPreThingsSpawnEnd(direction, group, i, top, right, bottom, left) {
        var directionKey = directionKeys[direction],
            directionKeyOpposite = directionKeys[directionOpposites[direction]],
            directionEnd = getDirectionEnd(directionKeyOpposite, top, right, bottom, left),
            i;
        
        for (i = group.length - 1; i >= 0; i -= 1) {
            if (group[i][directionKey] <= directionEnd) {
                return i;
            }
        }
        
        return i;
    }
    
    /**
     * 
     */
    function getDirectionEnd(directionKey, top, right, bottom, left) {
        switch (directionKey) {
            case "top": 
                return top;
            case "right":
                return right;
            case "bottom":
                return bottom;
            case "left":
                return left;
        }
    }
    
    
    self.reset(settings || {});
}
/**
 * ModAttachr.js
 * 
 * An addon for for extensible modding functionality. "Mods" register triggers
 * such as "onModEnable" or "onReset" that can be triggered.
 * 
 * @example
 * // Creating and using a ModAttachr to log event activity.
 * var ModAttacher = new ModAttachr({
 *     "mods": [{
 *         "name": "Testing Mod",
 *         "description": "A mod used for testing a ModAttachr.",
 *         "author": {
 *             "name": "Josh Goldberg",
 *             "email": "josh@fullscreenmario.com"
 *         },
 *         "enabled": false,
 *         "events": {
 *             "onModEnable": function () {
 *                 console.log("I am enabled!");
 *             },
 *             "onModDisable": function () {
 *                 console.log("I am disabled...");
 *             },
 *             "log": function () {
 *                 console.log("You have logged me.");
 *             }
 *         }
 *     }]
 * });
 * ModAttacher.enableMod("Testing Mod"); // log: "I am enabled!"
 * ModAttacher.fireEvent("log"); // log: "You have logged me."
 * ModAttacher.disableMod("Testing Mod"); // log: "I am disabled..."
 * 
 * // Creating and using a ModAttachr to log event activity, with timestamps
 * // and numbered logs.
 * var ModAttacher = new ModAttachr({
 *     "mods": [{
 *         "name": "Testing Mod",
 *         "description": "A mod used for testing a ModAttachr.",
 *         "author": {
 *             "name": "Josh Goldberg",
 *             "email": "josh@fullscreenmario.com"
 *         },
 *         "enabled": false,
 *         "events": {
 *             "onModEnable": function () {
 *                 console.log("I am enabled!");
 *             },
 *             "onModDisable": function () {
 *                 console.log("I am disabled...");
 *             },
 *             "log": function (mod) {
 *                 var numLog = (mod.settings.numLogs += 1);
 *                 console.log("Log " + numLog + ": " + Date());
 *             }
 *         },
 *         "settings": {
 *             "numLogs": 0
 *         }
 *     }]
 * });
 * ModAttacher.enableMod("Testing Mod"); // log: "I am enabled!"
 * ModAttacher.fireEvent("log"); // log: "Log 1: Sat Dec 13 2014 21:00:14 ..."
 * ModAttacher.fireEvent("log"); // log: "Log 2: Sat Dec 13 2014 21:00:14 ..."
 * ModAttacher.disableMod("Testing Mod"); // log: "I am disabled..."
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function ModAttachr(settings) {
    "use strict";
    if (this === window) {
        return new ModAttachr(settings);
    }
    var self = this,
        
        // An Object of the mods with a listing for each event
        // by event names (e.g. "onReset" => [{Mod1}, {Mod2}]
        events,
        
        // An Object of information on each mod, keyed by mod names
        // (e.g. { "MyMod": { "Name": "Mymod", "enabled": 1, ...} ...})
        mods,
        
        // A new StatsHolder object to be created to store whether each
        // mod is stored locally (optional)
        StatsHolder,
        
        // A default scope to apply mod events from (optional)
        scopeDefault;
    
    /**
     * Resets the ModAttachr.
     * 
     * @constructor
     * @param {Object[]} mods   Objects representing the new mods to be added.
     * @param {Boolean} storeLocally   Whether this should store which mods have
     *                                 been enabled in local storage via a 
     *                                 StatsHoldr (by default, false).
     * @param {Mixed} scopeDefault   An optional default scope to use for each
     *                               mod, if one isn't provided by the mod.
     */
    self.reset = function (settings) {
        mods = {};
        events = {};
        scopeDefault = settings.scopeDefault;
        
        if (settings.storeLocally) {
            StatsHolder = new settings.StatsHoldr({
                "prefix": settings.prefix,
                "proliferate": settings.proliferate,
                "createElement": settings.createElement
            });
        }
        
        if (settings.mods) {
            self.addMods(settings.mods);
        }
        
    };
    
    
    /* Simple gets 
    */
    
    /**
     * @return {Object} An Object keying each mod by their name.
     */
    self.getMods = function () {
        return mods;
    };
    
    /**
     * @return {Object} An Object keying each event by their name.
     */
    self.getEvents = function () {
        return events;
    };
    
    /**
     * @return {StatsHoldr} The StatsHoldr if storeLocally is true, or undefined
     *                      otherwise.
     */
    self.getStatsHolder = function () {
        return StatsHolder;
    };
    
    
    /* Alterations 
    */
    
    /**
     * Adds a mod to the pool of mods, listing it under all the relevant events.
     * If the event is enabled, the "onModEnable" event for it is triggered.
     * 
     * @param {Object} mod   A summary Object for a mod, containing at the very
     *                       least a name and Object of events.
     */
    self.addMod = function (mod) {
        var mod_events = mod.events,
            event, i;
        
        for (i in mod_events) {
            if (mod_events.hasOwnProperty(i)) {
                event = mod_events[i];
                
                if (!events.hasOwnProperty(i)) {
                    events[i] = [mod];
                } else {
                    events[i].push(mod);
                }
            }
        }
        
        mod.scope = mod.scope || scopeDefault;
        
        mods[mod.name] = mod;
        if (mod.enabled && mod.events["onModEnable"]) {
            self.fireModEvent("onModEnable", mod.name, arguments);
        }
        
        if (StatsHolder) {
            StatsHolder.addStatistic(mod.name, {
                "valueDefault": 0,
                "storeLocally": true
            });
            
            if (StatsHolder.get(mod.name)) {
                self.enableMod(mod.name);
            }
        }
    };
    
    /**
     * Adds each mod in a given Array.
     * 
     * @param {Array} mods
     */
    self.addMods = function (mods) {
        for (var i = 0; i < mods.length; i += 1) {
            self.addMod(mods[i]);
        }
    };
    
    /**
     * Enables a mod of the given name, if it exists. The onModEnable event is
     * called for the mod.
     * 
     * @param {String} name   The name of the mod to enable.
     */
    self.enableMod = function (name) {
        var mod = mods[name],
            args;
        
        if (!mod) {
            throw new Error("No mod of name: '" + name + "'");
        }
        
        mod.enabled = true;
        args = Array.prototype.slice.call(arguments);
        args[0] = mod;
        
        if (mod.events["onModEnable"]) {
            self.fireModEvent("onModEnable", mod.name, arguments);
        }
        
        if (StatsHolder) {
            StatsHolder.set(name, 1);
        }
    };
    
    /**
     * Enables any number of mods, given as any number of Strings or Arrays of
     * Strings.
     * 
     * @param {String} [mods]
     * @param {Array} [mods]
     */
    self.enableMods = function () {
        for (var i = 0; i < arguments.length; i += 1) {
            if (arguments[i] instanceof Array) {
                self.enableMods(arguments[i]);
            } else {
                self.enableMod(arguments[i]);
            }
        }
    };
    
    /**
     * Disables a mod of the given name, if it exists. The onModDisable event is
     * called for the mod.
     * 
     * @param {String} name   The name of the mod to disable.
     */
    self.disableMod = function (name) {
        var mod = mods[name],
            args;
        
        if (!mods[name]) {
            throw new Error("No mod of name: '" + name + "'");
        }
        
        mods[name].enabled = false;
        args = Array.prototype.slice.call(arguments);
        args[0] = mod;
        
        if (mod.events["onModDisable"]) {
            self.fireModEvent("onModDisable", mod.name, args);
        }
        
        if (StatsHolder) {
            StatsHolder.set(name, 0);
        }
    };
    
    /**
     * Disables any number of mods, given as any number of Strings or Arrays of
     * Strings.
     * 
     * @param {String} [mods]
     * @param {Array} [mods]
     */
    self.disableMods = function () {
        for (var i = 0; i < arguments.length; i += 1) {
            if (arguments[i] instanceof Array) {
                self.disableMods(arguments[i]);
            } else {
                self.disableMod(arguments[i]);
            }
        }
    };
    
    /**
     * Toggles a mod via enableMod/disableMod of the given name, if it exists.
     * 
     * @param {String} name   The name of the mod to toggle.
     */
    self.toggleMod = function (name) {
        var mod = mods[name];
        
        if (!mod) {
            throw new Error("No mod found under " + name);
        }
        
        if (mod.enabled) {
            self.disableMod(name);
        } else {
            self.enableMod(name);
        }
    };
    
    /**
     * Toggles any number of mods, given as any number of Strings or Arrays of
     * Strings.
     * 
     * @param {String} [mods]
     * @param {Array} [mods]
     */
    self.toggleMods = function () {
        for (var i = 0; i < arguments.length; i += 1) {
            if (arguments[i] instanceof Array) {
                self.toggleMods(arguments[i]);
            } else {
                self.toggleMod(arguments[i]);
            }
        }
    };
    
    
    /* Actions
    */
    
    /**
     * Fires an event, which calls all functions listed undder mods for that 
     * event. Any number of arguments may be given.
     * 
     * @param {String} event   The name of the event to fire.
     */
    self.fireEvent = function (event) {
        var fires = events[event],
            args = Array.prototype.splice.call(arguments, 0),
            mod, i;
        
        if (!fires) {
            // console.warn("Unknown event name triggered: '" + name + "'");
            return;
        }
        
        for (i = 0; i < fires.length; i += 1) {
            mod = fires[i];
            args[0] = mod;
            if (mod.enabled) {
                mod.events[event].apply(mod.scope, args);
            }
        }
    };
    
    /**
     * Fires an event specifically for one mod, rather than all mods containing
     * that event.
     * 
     * @param {String} eventName   The name of the event to fire.
     * @param {String} modName   The name of the mod to fire the event.
     */
    self.fireModEvent = function (eventName, modName) {
        var mod = mods[modName],
            args = Array.prototype.slice.call(arguments, 2),
            fires;
        
        if (!mod) {
            throw new Error("Unknown mod requested: '" + modName + "'");
        }
        
        args[0] = mod;
        fires = mod.events[eventName];
        
        if (!fires) {
            throw new Error("Mod does not contain event: '" + eventName + "'");
        }
        
        fires.apply(mod.scope, args);
    }
    
    
    self.reset(settings || {});
}
/**
 * NumberMakr.js
 * 
 * An updated version of the traditional MersenneTwister JavaScript class by 
 * Sean McCullough (2010), based on code by Takuji Nishimura and Makoto 
 * Matsumoto (1997 - 2002).
 * 
 * For the 2010 code, see https://gist.github.com/banksean/300494.
 * 
 * @example
 * // Creating and using a NumberMaker as a substute for Math.random().
 * var NumberMaker = new NumberMakr();
 * console.log(NumberMaker.random()); // some random Number in [0, 1)
 * console.log(NumberMaker.random()); // some random Number in [0, 1)
 * 
 * @example
 * // Creating and using a NumberMaker with a seed.
 * var NumberMaker = new NumberMakr({
 *     "seed": 7777777
 * });
 * console.log(NumberMaker.random()); // 0.337172580184415
 * console.log(NumberMaker.random()); // 0.4261356364004314
 *
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
/*
  I've wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace
  so it's better encapsulated. Now you can have multiple random number generators
  and they won't stomp all over each other's state.
  
  If you want to use this as a substitute for Math.random(), use the random()
  method like so:
  
  var statePeriod = new MersenneTwister();
  var randomNumber = statePeriod.random();
  
  You can also call the other genrand_{foo}() methods on the instance.

  If you want to use a specific seed in order to get a repeatable random
  sequence, pass an integer into the constructor:

  var statePeriod = new MersenneTwister(123);

  and that will always produce the same random sequence.

  Sean McCullough (banksean@gmail.com)
*/
/* 
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.
 
   Before using, initialize the state by using init_genrand(seed)  
   or init_by_array(keyInitial, keyLength).
 
   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.                          
 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
 
     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
 
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
 
     3. The names of its contributors may not be used to endorse or promote 
        products derived from this software without specific prior written 
        permission.
 
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 
   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~statePeriod-mat/stateVector/emt.html
   email: statePeriod-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/
function NumberMakr(settings) {
    "use strict";
    if (!this || this === window) {
        return new NumbrMakr(settings);
    }
    var self = this,
        
        // Number length of the state vector
        stateLength,
        
        // Number period
        statePeriod,
        
        // Constant vector a
        matrixA,

        // Constant magic array from matrixA
        matrixAMagic,
        
        // Most significant w-r bits
        maskUpper,
        
        // Least significant r bits
        maskLower,
        
        // Array for the state vector
        stateVector,
        
        // Number for place in state vector (if out of range, uninitialised)
        stateIndex,
        
        // The starting seed used to initialize. This may be a Number or Array.
        seed = 0;
    
    /**
     * Resets the NumberMakr.
     * 
     * @constructor
     * @param {Number/Array} [seed]   A starting seed used to initialize. This 
     *                                can be a Number or Array; the appropriate
     *                                resetFrom Function will be called.
     * @param {Number} [stateLength]   How long the state vector will be.
     * @param {Number} [statePeriod]   How long the state period will be.
     * @param {Number} [matrixA]   A constant mask to generate the matrixAMagic
     *                             Array of [0, some number]
     * @param {Number} [maskUpper]   An upper mask to binary-and on (the most 
     *                               significant w-r bits).
     * @param {Number} [maskLower]   A lower mask to binary-and on (the least
     *                               significant r bits).
     */
    self.reset = function (settings) {
        stateLength = settings.stateLength || 624;
        statePeriod = settings.statePeriod || 397;
        matrixA = settings.matrixA || 0x9908b0df;
        maskUpper = settings.maskUpper || 0x80000000;
        maskLower = settings.maskLower || 0x7fffffff;
        
        stateVector = new Array(stateLength);
        stateIndex = stateLength + 1;
        matrixAMagic = new Array(0x0, matrixA);
        
        self.resetFromSeed(settings.seed || new Date().getTime());
    };
    
    /**
     * 
     */
    self.getSeed = function () {
        return seed;
    };
    
    /**
     * Initializes state from a Number.
     * 
     * @param {Number} [seedNew]   Defaults to the previously set seed.
     */
    self.resetFromSeed = function (seedNew) {
        var s;
        
        if (typeof(seedNew) === "undefined") {
            seedNew = seed;
        }
        
        stateVector[0] = seedNew >>> 0;
        
        for (stateIndex = 1; stateIndex < stateLength; stateIndex += 1) {
            s = stateVector[stateIndex - 1] ^ (stateVector[stateIndex - 1] >>> 30);
            stateVector[stateIndex] = (
                (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) 
                    + (s & 0x0000ffff) * 1812433253
                ) + stateIndex
            ) >>> 0;
        }
        
        seed = seedNew;
    };
    
    /**
     * Initializes state from an Array.
     * 
     * @param {Number[]} keyInitial
     * @param {Number} [keyLength]   The length of keyInitial (defaults to the
     *                                actual keyInitial.length).
     * @remarks   There was a slight change for C++, 2004/2/26.
     */
    self.resetFromArray = function (keyInitial, keyLength) {
        var i = 1,
            j = 0, 
            k,
            s;
        
        self.resetFromSeed(19650218);
        
        if (typeof(keyLength) === "undefined") {
            keyLength = keyInitial.length;
        }
        k = stateLength > keyLength ? stateLength : keyLength;
        
        while(k > 0) {
            s = stateVector[i - 1] ^ (stateVector[i - 1] >>> 30);
            stateVector[i] = (this.stateVector[i] ^ (
                    ((((s & 0xffff0000) >>> 16) * 1664525) << 16)
                    + ((s & 0x0000ffff) * 1664525)
                ) + keyInitial[j] + j
            ) >>> 0;
            
            i += 1;
            j += 1;
            
            if (i >= stateLength) {
                stateVector[0] = stateVector[stateLength - 1];
                i = 1;
            }
            
            if (j >= keyLength) {
                j = 0;
            }
        }
        
        for (k = stateLength - 1; k; k -= 1) {
            s = stateVector[i-1] ^ (stateVector[i-1] >>> 30);
            stateVector[i] = ((stateVector[i] ^ (
                    ((((s & 0xffff0000) >>> 16) * 1566083941) << 16) 
                    + (s & 0x0000ffff) * 1566083941)
                ) - i
            ) >>> 0;
            
            i += 1;
            
            if (i >= stateLength) {
                stateVector[0] = stateVector[stateLength - 1];
                i = 1;
            }
        }
        
        stateVector[0] = 0x80000000;
        seed = keyInitial;
    };
    
    
    /* Random number generation
    */
    
    /**
     * @return {Number} Random Number in [0,0xffffffff].
     */
    self.randomInt32 = function () {
        var y, kk;
        
        if (stateIndex >= stateLength) {
            if (stateIndex === stateLength + 1) {
                self.resetFromSeed(5489);
            }
            
            for (kk = 0; kk < stateLength - statePeriod; kk += 1) {
                y = (stateVector[kk] & maskUpper)
                    | (stateVector[kk + 1] & maskLower);
                
                stateVector[kk] = stateVector[kk + statePeriod]
                    ^ (y >>> 1)
                    ^ matrixAMagic[y & 0x1];
            }
            
            for (; kk < stateLength - 1; kk += 1) {
                y = (stateVector[kk] & maskUpper)
                    | (stateVector[kk + 1] & maskLower);
                
                stateVector[kk] = stateVector[kk + (statePeriod - stateLength)]
                    ^ (y >>> 1) 
                    ^ matrixAMagic[y & 0x1];
            }
            
            y = (stateVector[stateLength - 1] & maskUpper) 
                | (stateVector[0] & maskLower);
            
            stateVector[stateLength - 1] = stateVector[statePeriod - 1]
                ^ (y >>> 1) ^ matrixAMagic[y & 0x1];
            
            stateIndex = 0;
        }
        
        y = stateVector[stateIndex];
        stateIndex += 1;
        
        y ^= (y >>> 11);
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^= (y >>> 18);

        return y >>> 0;
    };
    
    /**
     * @return {Number} Random number in [0,1).
     * @remarks Divided by 2^32.
     */
    self.random = function () {
        return self.randomInt32() * (1.0 / 4294967296.0); 
    };
    
    /**
     * @return {Number} Random Number in [0,0x7fffffff].
     */
    self.randomInt31 = function () {
        return self.randomInt32() >>> 1;
    };
    
    
    /* Real number generators (due to Isaku Wada, 2002/01/09)
    */
    
    /**
     * @return {Number} Random real Number in [0,1].
     * @remarks Divided by 2 ^ 32 - 1.
     */
    self.randomReal1 = function () {
        return self.randomInt32() * (1.0 / 4294967295.0); 
    };
    
    /**
     * @return {Number} Random real Number in (0,1).
     * @remarks Divided by 2 ^ 32.
     */
    self.randomReal3 = function () {
        return (self.randomInt32() + 0.5) * (1.0 / 4294967296.0); 
    };
    
    /**
     * @return {Number} Random real Number in [0,1) with 53-bit resolution.
     */
    self.randomReal53Bit = function () {
        var a = self.randomInt32() >>> 5,
            b = self.randomInt32() >>> 6; 
        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0); 
    };
    
    
    /* Ranged Number generators
    */
    
    /**
     * @param {Number} max
     * @return {Number} Random Number in [0,max).
     */
    self.randomUnder = function (max) {
        return self.random() * max;
    };
    
    /**
     * @param {Number} min
     * @param {Number} max
     * @return {Number} Random Number in [min,max).
     */
    self.randomWithin = function (min, max) {
        return self.random(max - min) + min;
    };
    
    
    /* Ranged integer generators
    */
    
    /**
     * @param {Number} max
     * @return {Number} Random integer in [0,max).
     */
    self.randomInt = function (max) {
        return self.randomUnder(max) | 0;
    };
    
    /**
     * @param {Number} min
     * @param {Number} max
     * @return {Number} Random integer in [min,max).
     */
    self.randomIntWithin = function (min, max) {
        return (self.randomUnder(max - min) + min) | 0;
    };
    
    /**
     * @return {Boolean} Either 1 or 2, with 50% probability of each.
     */
    self.randomBoolean = function () {
        return self.randomInt(2) === 1;
    };
    
    
    self.reset(settings || {});
}
/**
 * ObjectMakr.js
 * 
 * An Abstract Factory for JavaScript classes that automates the process of 
 * setting constructors' prototypal inheritance. A sketch of class inheritance 
 * and a listing of properties for each class is taken in, and dynamically
 * accessible function constructors are made available.
 * 
 * @example
 * // Creating and using an ObjectMakr to generate a shape class hierarchy.
 * var ObjectMaker = new ObjectMakr({
 *     "inheritance": {
 *         "Circle": {},
 *         "Rectangle": {
 *             "Square": {}
 *     },
 *     "properties": {
 *         "Circle": {
 *             "perimeter": "2 * pi * radius",
 *             "area": "pi * radius ^ 2"
 *         },
 *         "Rectangle": {
 *             "perimeter": "2 * length + 2 * width",
 *             "area": "length * width"
 *         },
 *         "Square": {
 *             "perimeter": "4 * width",
 *             "area": "width ^ 2"
 *         }
 *     }
 * });
 * console.log(ObjectMaker.make("Square")); // Square {constructor: function... 
 * console.log(ObjectMaker.make("Square").area); // "width ^ 2
 * console.log(ObjectMaker.getFunction("Square")); // function Square() {}
 * 
 * @example
 * // Creating and using an ObjectMakr to generate a shape class hierarchy using 
 * // an index mapping.
 * var ObjectMaker = new ObjectMakr({
 *     "indexMap": ["perimeter", "area"],
 *     "inheritance": {
 *         "Circle": {},
 *         "Rectangle": {
 *             "Square": {}
 *     },
 *     "properties": {
 *         "Circle": ["2 * pi * radius", "pi * radius ^ 2"],
 *         "Rectangle": ["2 * length + 2 * width", "area": "length * width"],
 *         "Square": ["perimeter": "4 * width", "area": "width ^ 2"]
 *     }
 * });
 * console.log(ObjectMaker.make("Square")); // Square {constructor: function... 
 * console.log(ObjectMaker.make("Square").area); // "width ^ 2
 * console.log(ObjectMaker.getFunction("Square")); // function Square() {}
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function ObjectMakr(settings) {
    "use strict";
    if (!this || this === window) {
        return new ObjectMakr(settings);
    }
    var self = this,

        // The sketch of classes inheritance, keyed by name.
        inheritance,

        // An associative array of type properties, as "name" => {properties}.
        properties,

        // Stored keys for the functions to be made.
        functions,
        
        // Whether a full property mapping should be made for each type
        doPropertiesFull,
        
        // If doPropertiesFull, a version of properties that contains the sum
        // properties for each type (rather than missing inherited attributes).
        propertiesFull,

        // Optionally, how properties can be mapped from an array to an object.
        indexMap,

        // Optionally, an index of a function to be run when an object is made.
        onMake;

    /**
     * 
     */
    self.reset = function reset(settings) {
        inheritance = settings.inheritance;
        properties = settings.properties || {};
        indexMap = settings.indexMap;
        onMake = settings.onMake;
        doPropertiesFull = settings.doPropertiesFull;
        
        if (!inheritance) {
            throw new Error("No inheritance mapping given to ObjectMakr.");
        }

        functions = {};
        
        if (doPropertiesFull) {
            propertiesFull = {};
        }

        if (indexMap) {
            processProperties(properties);
        }

        processFunctions(inheritance, Object);
    };
    
    
    /* Simple gets
    */
    

    /**
     * @return {Object} The complete inheritance mapping Object.
     */
    self.getInheritance = function () {
        return inheritance;
    };

    /**
     * @return {Object} The complete properties mapping Object.
     */
    self.getProperties = function () {
        return properties;
    };

    /**
     * @return {Object} The properties Object for a particular class.
     */
    self.getPropertiesOf = function (title) {
        return properties[title];
    };

    /**
     * @return {Object} The full properties Object, if doPropertiesFull is on.
     */
    self.getFullProperties = function () {
        return propertiesFull;
    };
    
    /**
     * @return {Object} The full properties Object for a particular class, if
     *                  doPropertiesFull is on.
     */
    self.getFullPropertiesOf = function (title) {
        return doPropertiesFull ? propertiesFull[title] : undefined;
    };
    
    /**
     * @return {Object} The full mapping of class constructors.
     */
    self.getFunctions = function () {
        return functions;
    };

    /**
     * @param {String} type   The name of a class to retrieve.
     * @return {Function}   The constructor for the given class.
     */
    self.getFunction = function (type) {
        return functions[type];
    };

    /**
     * @param {String} type   The name of a class to check for.
     * @return {Boolean} Whether that class exists.
     */
    self.hasFunction = function (type) {
        return functions.hasOwnProperty(type);
    };


    /* Core usage
    */

    /**
     * Creates a new instance of the given type and returns it.
     * If desired, any settings are applied to it (deep copy using proliferate).
     *
     * @param {String} type   The type for which a new object of is being made.
     * @param {Objetct} [settings]   Additional attributes to add to the newly
     *                               created Object.
     * @return {Mixed}
     */
    self.make = function (type, settings) {
        var output;

        // Make sure the type actually exists in functions
        if (!functions.hasOwnProperty(type)) {
            throw new Error("Unknown type given to ObjectMakr: " + type);
        }
        
        // Create the new object, copying any given settings
        output = new functions[type]();
        if (settings) {
            proliferate(output, settings);
        }

        // onMake triggers are handled respecting doPropertiesFull.
        if (onMake && output[onMake]) {
            if (doPropertiesFull) {
                output[onMake](
                    output, type, properties[type], propertiesFull[type]
                );
            } else {
                output[onMake](
                    output, type, properties[type], functions[type].prototype
                );
            }
        }

        return output;
    }


    /* Core parsing
     */

    /**
     * Parser that calls processPropertyArray on all properties given as arrays
     *
     * @param {Object} properties   The object of function properties
     * @remarks Only call this if indexMap is given as an array
     */
    function processProperties(properties) {
        var name, property;

        // For each of the given properties:
        for (name in properties) {
            if (properties.hasOwnProperty(name)) {
                // If it's an array, replace it with a mapped version
                if (properties[name] instanceof Array) {
                    properties[name] = processPropertyArray(properties[name]);
                }
            }
        }
    }

    /**
     * Creates an output properties object with the mapping shown in indexMap
     *
     * @param {Array} properties   An array with indiced versions of properties
     * @example indexMap = ["width", "height"];
     *          properties = [7, 14];
     *          output = processPropertyArray(properties);
     *          // output is now { "width": 7, "height": 14 }
     */
    function processPropertyArray(properties) {
        var output = {},
            i;

        // For each [i] in properties, set that property as under indexMap[i]
        for (i = properties.length - 1; i >= 0; --i) {
            output[indexMap[i]] = properties[i];
        }

        return output;
    }

    /**
     * Recursive parser to generate each function, starting from the base.
     *
     * @param {Object} base   An object whose keys are the names of functions to
     *                        made, and whose values are objects whose keys are
     *                        for children that inherit from these functions
     * @param {Function} parent   The parent function of the functions about to
     *                            be made
     * @remarks This uses eval which is evil and almost never a good idea, but
     *          here it's the only way to make functions with dynamic names.
     */
    function processFunctions(base, parent, parentName) {
        var name, ref;

        // For each name in the current object:
        for (name in base) {
            if (base.hasOwnProperty(name)) {
                // Clean the name, so the user can't mess anything up
                name = cleanFunctionName(name);

                // Eval is evil, you should *almost* never use it!
                // cleanFunctionName(name) ensures this is "safe", though slow.
                eval("functions[name] = function " + name + "() {};");

                // This sets the function as inheriting from the parent
                functions[name].prototype = new parent();
                functions[name].prototype.constructor = functions[name];

                // Add each property from properties to the function prototype
                for (ref in properties[name]) {
                    if (properties[name].hasOwnProperty(ref)) {
                        functions[name].prototype[ref] = properties[name][ref];
                    }
                }
                
                // If the entire property tree is being mapped, copy everything
                // from both this and its parent to its equivalent
                if (doPropertiesFull) {
                    propertiesFull[name] = {};
                    
                    if (parentName) {
                        for (ref in propertiesFull[parentName]) {
                            if (propertiesFull[parentName].hasOwnProperty(ref)) {
                                propertiesFull[name][ref] 
                                    = propertiesFull[parentName][ref];
                            }
                        }
                    }
                    
                    for (ref in properties[name]) {
                        if (properties[name].hasOwnProperty(ref)) {
                            propertiesFull[name][ref] = properties[name][ref];
                        }
                    }
                }

                processFunctions(base[name], functions[name], name);
            }
        }
    }


    /* Utilities
    */

    /**
     * Takes a desired function name, and strips any unsafe characters from it.
     * Allowed chars are the RegExp \w filter, so A-Z, a-z, 0-9, and _. 
     *
     * @param {String} str   A potentially unsafe function name to be made safe.
     * @return {String} A generally safer version of the function name.
     * @remarks The goal of this function is to make names safe for eval (yes,
     *          eval), not to allow full semantic compatibility (some improper
     *          names, like those starting with numbers, are not filtered out). 
     */
    function cleanFunctionName(str) {
        return str.replace(/[^\w]/g, '');
    }

    /**
     * Proliferates all members of the donor to the recipient recursively. This
     * is therefore a deep copy.
     * 
     * @param {Object} recipient   An object receiving the donor's members.
     * @param {Object} donor   An object whose members are copied to recipient.
     * @param {Boolean} noOverride   If recipient properties may be overriden.
     */
    function proliferate(recipient, donor, noOverride) {
        var setting, i;
        // For each attribute of the donor
        for (i in donor) {
            // If noOverride is specified, don't override if it already exists
            if (noOverride && recipient.hasOwnProperty(i)) continue;

            // If it's an object, recurse on a new version of it
            setting = donor[i];
            if (typeof setting === "object") {
                if (!recipient.hasOwnProperty(i)) {
                    recipient[i] = new setting.constructor();
                }
                proliferate(recipient[i], setting, noOverride);
            }
            // Regular primitives are easy to copy otherwise
            else {
                recipient[i] = setting;
            }
        }
        return recipient;
    }
    

    self.reset(settings || {});
}
function PixelDrawr(settings) {
    "use strict";
    if (this === window) {
        return new PixelDrawr(settings);
    }
    var self = this,
        
        // A PixelRender object used to obtain raw sprite data and canvases
        PixelRender,
        
        // A MapScreenr variable to be used for bounds checking
        MapScreener,
        
        // The canvas object each Thing is to be drawn on
        canvas,
        
        // The 2D canvas context associated with the canvas
        context,
        
        // A separate canvas that keeps the background of the scene
        backgroundCanvas,
        
        // The 2D canvas context associated with the background canvas
        backgroundContext,
        
        // Arrays of Thing[]s that are to be drawn in each refillGlobalCanvas
        thing_arrays,
        
        // Utility function to create a canvas (typically taken from EightBittr)
        createCanvas,
        
        unitsize,
        
        // A utility function to generate a class key to get an object sprite
        generateObjectKey,
        
        // The maximum size of a SpriteMultiple to pre-render
        spriteCacheCutoff,
        
        // Whether self.refillGlobalCanvas should skip redrawing the main canvas
        // every time.
        noRefill,
        
        // For refillQuadrant, an Array of string names to refill (bottom-to-top)
        groupNames,
        
        // How often the screen redraws. 1 is always, 2 is every other call, etc.
        framerateSkip,
        
        // How many frames have been drawn so far
        framesDrawn;
    
    /**
     * 
     */
    self.reset = function(settings) {
        PixelRender = settings.PixelRender;
        MapScreener = settings.MapScreener;
        createCanvas = settings.createCanvas;
        unitsize = settings.unitsize || 4;
        noRefill = settings.noRefill;
        spriteCacheCutoff = settings.spriteCacheCutoff || 0;
        groupNames = settings.groupNames;
        framerateSkip = settings.framerateSkip || 1;
        framesDrawn = 0;
        
        generateObjectKey = settings.generateObjectKey || function (object) {
            return object.toString();
        };
        
        self.resetBackground();
    }
    
    
    
    /* Simple gets & sets
    */
    
    /**
     * 
     */
    self.getFramerateSkip = function () {
        return framerateSkip;
    };
    
    /**
     * 
     */
    self.setFramerateSkip = function (skip) {
        framerateSkip = skip;
    };
    
    /**
     * 
     */
    self.setThingArrays = function (arrays) {
        thing_arrays = arrays;
    }
    
    /**
     * 
     */
    self.setCanvas = function (canvasNew) {
        canvas = canvasNew;
        context = canvas.getContext("2d");
        self.drawThingOnContextBound = self.drawThingOnContext.bind(self, context);
    }
    
    /**
     * 
     */
    self.setNoRefill = function (enabled) {
        noRefill = enabled;
    };
    
    
    /* Background manipulations
    */
    
    /**
     * 
     */
    self.resetBackground = function () {
        backgroundCanvas = createCanvas(MapScreener.width, MapScreener.height);
        backgroundContext = backgroundCanvas.getContext("2d");
    };
    
    /**
     * 
     */
    self.setBackground = function (fill) {
        backgroundContext.fillStyle = fill;
        backgroundContext.fillRect(0, 0, MapScreener.width, MapScreener.height);
    };
    
    /**
     * 
     */
    function drawBackground() {
        context.drawImage(backgroundCanvas, 0, 0);
    }
    
    
    /* Core rendering
    */
    
    /**
     * Goes through all the motions of find and parsing a thing's sprite
     * This should be called whenever the sprite's appearance changes
     * 
     * @param {Thing} thing   A thing whose sprite must be updated
     * @return {Self}
     */
    self.setThingSprite = function(thing) {
        // If it's set as hidden, don't bother updating it
        if (thing.hidden) {
            return;
        }
        
        // PixelRender does most of the work in fetching the rendered sprite
        thing.sprite = PixelRender.decode(generateObjectKey(thing), thing);
        
        // To do: remove dependency on .num_sprites and spriteType
        if (thing.sprite.multiple) {
            thing.spriteType = thing.sprite.type;
            refillThingCanvasMultiple(thing, thing.sprite);
        }
        else {
            thing.num_sprites = 1;
            thing.spriteType = "normal";
            refillThingCanvasSingle(thing, thing.sprite);
        }
        
        return self;
    }
    
    /**
     * Simply draws a thing's sprite to its canvas by getting and setting
     * a canvas::imageData object via context.getImageData(...).
     * 
     * @param {Thing} thing   A thing whose .canvas must be updated
     * @return {Self}
     * @private
     */
    function refillThingCanvasSingle(thing) {
        if (thing.width < 1 || thing.height < 1) {
            return;
        }
        
        var canvas = thing.canvas,
            context = thing.context,
            imageData = context.getImageData(0, 0, canvas.width, canvas.height);
        
        PixelRender.memcpyU8(thing.sprite, imageData.data);
        context.putImageData(imageData, 0, 0);
        
        return self;
    }
    
    /**
     * For SpriteMultiples, this copies the sprite information for each 
     * sub-sprite into its own canvas, sets thing.sprites, then draws the newly
     * rendered information onto the thing's canvas.
     * 
     * @param {Thing} thing   A thing whose .canvas and .sprites must be updated
     * @return {Self}
     * @private
     */
    function refillThingCanvasMultiple(thing) {
        if (thing.width < 1 || thing.height < 1) {
            return;
        }
        
        var spritesRaw = thing.sprite,
            canvases = thing.canvases = {
                "direction": spritesRaw.direction,
                "multiple": true 
            },
            canvas, context, imageData, i;

        thing.num_sprites = 1;

        for (i in spritesRaw.sprites) {
            // Make a new sprite for this individual component
            canvas = createCanvas(thing.spritewidth * unitsize, thing.spriteheight * unitsize);
            context = canvas.getContext("2d");

            // Copy over this sprite's information the same way as refillThingCanvas
            imageData = context.getImageData(0, 0, canvas.width, canvas.height);
            PixelRender.memcpyU8(spritesRaw.sprites[i], imageData.data);
            context.putImageData(imageData, 0, 0);

            // Record the canvas and context in thing.sprites
            canvases[i] = {
                "canvas": canvas,
                "context": context
            }
            thing.num_sprites += 1;
        }
        
        if (thing.width * thing.height < spriteCacheCutoff) {
            thing.canvas.width = thing.width * unitsize;
            thing.canvas.height = thing.height * unitsize;
            drawThingOnContextMultiple(thing.context, thing.canvases, thing, 0, 0);
        } else {
            thing.canvas.width = thing.canvas.height = 0;
        }
      
        return canvases;
    }
    
    
    /* Core drawing
    */
    
    /**
     * Called every upkeep to refill the entire main canvas. All Thing arrays
     * are made to call self.refillThingArray in order.
     * 
     * @param {string} background   The background to refill the context with
     *                              before drawing anything, unless noRefill is
     *                              enabled.
     * 
     * @return {Self}
     */
    self.refillGlobalCanvas = function () {
        framesDrawn += 1;
        if (framesDrawn % framerateSkip !== 0) {
            return;
        }
        
        if (!noRefill) {
            drawBackground();
        }
        
        thing_arrays.forEach(self.refillThingArray);
        
        return self;
    };
    
    /**
     * 
     * 
     * 
     */
    self.refillThingArray = function (array) {
        array.forEach(self.drawThingOnContextBound);
    };
    
    /**
     * 
     */
    self.refillQuadrantGroups = function (groups) {
        var i;
        
        framesDrawn += 1;
        if (framesDrawn % framerateSkip !== 0) {
            return;
        }
        
        for (i = 0; i < groups.length; i += 1) {
            self.refillQuadrants(groups[i].quadrants);
        }
    };
    
    /**
     * 
     */
    self.refillQuadrants = function (quadrants) {
        var quadrant, i;
        
        for (i = 0; i < quadrants.length; i += 1) {
            quadrant = quadrants[i];
            if (
                quadrant.changed
                && quadrant.top < MapScreener.height
                && quadrant.right > 0
                && quadrant.bottom > 0
                && quadrant.left < MapScreener.width
            ) {
                self.refillQuadrant(quadrant);
                context.drawImage(
                    quadrant.canvas,
                    quadrant.left,
                    quadrant.top
                );
            }
        }
    };
    
    // var letters = '0123456789ABCDEF'.split('');
    // function getRandomColor() {
        // var color = '#';
        // for (var i = 0; i < 6; i++ ) {
            // color += letters[Math.floor(Math.random() * 16)];
        // }
        // return color;
    // }
    
    /**
     * 
     */
    self.refillQuadrant = function (quadrant) {
        var group, i, j;
        
        // quadrant.context.fillStyle = getRandomColor();
        // quadrant.context.fillRect(0, 0, quadrant.canvas.width, quadrant.canvas.height);
        
        if (!noRefill) {
            quadrant.context.drawImage(
                backgroundCanvas,
                quadrant.left,
                quadrant.top,
                quadrant.canvas.width,
                quadrant.canvas.height,
                0,
                0,
                quadrant.canvas.width,
                quadrant.canvas.height
            );
        }
        
        for (i = groupNames.length - 1; i >= 0; i -= 1) {
            group = quadrant.things[groupNames[i]];
            
            for (j = 0; j < group.length; j += 1) {
                self.drawThingOnQuadrant(group[j], quadrant);
            }
        }
        
        quadrant.changed = false;
    };
    
    /**
     * General function to draw a Thing to a context
     * This will call drawThingOnContext[Single/Multiple] with more arguments
     * 
     * @return {Self}
     */
    // self.drawThingOnContext = function(context, thing) {
    self.drawThingOnContext = function(context, thing) {
        if (
            thing.hidden
            || thing.height < 1
            || thing.width < 1
            // || thing.top > MapScreener.height
            // || thing.right < 0
            // || thing.bottom < 0
            // || thing.left > MapScreener.width
        ) {
            return;
        }
        
        // If Thing hasn't had a sprite yet (previously hidden), do that first
        if (typeof thing.num_sprites === "undefined") {
            self.setThingSprite(thing);
        }
        
        // Whether or not the thing has a regular sprite or a SpriteMultiple, 
        // that sprite has already been drawn to the thing's canvas, unless it's
        // above the cutoff, in which case that logic happens now.
        if (thing.canvas.width > 0) {
            drawThingOnContextSingle(context, thing.canvas, thing, thing.left, thing.top);
        } else {
            drawThingOnContextMultiple(context, thing.canvases, thing, thing.left, thing.top);
        }
    }
    
    /**
     * 
     */
    self.drawThingOnQuadrant = function (thing, quadrant) {
        if (
            thing.hidden
            || thing.top > quadrant.bottom
            || thing.right < quadrant.left
            || thing.bottom < quadrant.top
            || thing.left > quadrant.right
        ) {
            return;
        }
        
        // If there's just one sprite, it's pretty simple
        if (thing.num_sprites === 1) {
            return drawThingOnContextSingle(quadrant.context, thing.canvas, thing, thing.left - quadrant.left, thing.top - quadrant.top);
        }
        // For multiple sprites, some calculations will be needed
        else {
            return drawThingOnContextMultiple(quadrant.context, thing.canvases, thing, thing.left - quadrant.left, thing.top - quadrant.top);
        }
    };
    
    /**
     * Draws a Thing's single canvas onto a context (called by self.drawThingOnContext).
     * 
     * @param {CanvasRenderingContext2D} context    
     * @param {Canvas} canvas
     * @param {Thing} thing
     * @param {Number} leftc
     * @param {Number} topc
     * @return {Self}
     * @private
     */
    function drawThingOnContextSingle(context, canvas, thing, leftc, topc) {
        // If the sprite should repeat, use the pattern equivalent
        if (thing.repeat) {
            drawPatternOnCanvas(context, canvas, leftc, topc, thing.unitwidth, thing.unitheight, thing.opacity || 1);
        }
        // Opacities not equal to one must reset the context afterwards
        else if (thing.opacity !== 1) {
            context.globalAlpha = thing.opacity;
            context.drawImage(canvas, leftc, topc);
            context.globalAlpha = 1;
        } else {
            context.drawImage(canvas, leftc, topc);
        }
        
        return self;
    }
    
    /**
     * Draws a Thing's multiple canvases onto a context (called by self.drawThingOnContext)
     * 
     * @return {Self}
     * @private
     */
    function drawThingOnContextMultiple(context, canvases, thing, leftc, topc) {
        var sprite = thing.sprite,
            topreal = topc,
            leftreal = leftc,
            rightreal = leftc + thing.unitwidth,
            bottomreal = topc + thing.unitheight,
            widthreal = thing.unitwidth,
            heightreal = thing.unitheight,
            spritewidthpixels = thing.spritewidthpixels,
            spriteheightpixels = thing.spriteheightpixels,
            widthdrawn = Math.min(widthreal, spritewidthpixels),
            heightdrawn = Math.min(heightreal, spriteheightpixels),
            opacity = thing.opacity,
            diffhoriz, diffvert, canvasref;
        
        switch (canvases.direction) {
            // Vertical sprites may have 'top', 'bottom', 'middle'
            case "vertical":
                // If there's a bottom, draw that and push up bottomreal
                if ((canvasref = canvases.bottom)) {
                    diffvert = sprite.bottomheight ? sprite.bottomheight * unitsize : spriteheightpixels;
                    drawPatternOnCanvas(context, canvasref.canvas, leftreal, bottomreal - diffvert, widthreal, heightdrawn, opacity);
                    bottomreal -= diffvert;
                    heightreal -= diffvert;
                }
                // If there's a top, draw that and push down topreal
                if ((canvasref = canvases.top)) {
                    diffvert = sprite.topheight ? sprite.topheight * unitsize : spriteheightpixels;
                    drawPatternOnCanvas(context, canvasref.canvas, leftreal, topreal, widthreal, heightdrawn, opacity);
                    topreal += diffvert;
                    heightreal -= diffvert;
                }
            break;
            // Horizontal sprites may have 'left', 'right', 'middle'
            case "horizontal":
                // If there's a left, draw that and push forward leftreal
                if ((canvasref = canvases.left)) {
                    diffhoriz = sprite.leftwidth ? sprite.leftwidth * unitsize : spritewidthpixels;
                    drawPatternOnCanvas(context, canvasref.canvas, leftreal, topreal, widthdrawn, heightreal, opacity);
                    leftreal += diffhoriz;
                    widthreal -= diffhoriz;
                }
                // If there's a right, draw that and push back rightreal
                if ((canvasref = canvases.right)) {
                    diffhoriz = sprite.rightwidth ? sprite.rightwidth * unitsize : spritewidthpixels;
                    drawPatternOnCanvas(context, canvasref.canvas, rightreal - diffhoriz, topreal, widthdrawn, heightreal, opacity);
                    rightreal -= diffhoriz;
                    widthreal -= diffhoriz;
                }
            break;
            // Corner (vertical + horizontal + corner) sprites must have corners
            // in 'topRight', 'bottomRight', 'bottomLeft', and 'topLeft'.
            case "corners":
                // topLeft, left, bottomLeft
                diffvert = sprite.topheight ? sprite.topheight * unitsize : spriteheightpixels;
                diffhoriz = sprite.leftwidth ? sprite.leftwidth * unitsize : spritewidthpixels;
                drawPatternOnCanvas(context, canvases.topLeft.canvas, leftreal, topreal, widthdrawn, heightdrawn, opacity);
                drawPatternOnCanvas(context, canvases.left.canvas, leftreal, topreal + diffvert, widthdrawn, heightreal - diffvert * 2, opacity);
                drawPatternOnCanvas(context, canvases.bottomLeft.canvas, leftreal, bottomreal - diffvert, widthdrawn, heightdrawn, opacity);
                leftreal += diffhoriz;
                widthreal -= diffhoriz;
                
                // top, topRight
                diffhoriz = sprite.rightwidth ? sprite.rightwidth * unitsize : spritewidthpixels;
                drawPatternOnCanvas(context, canvases.top.canvas, leftreal, topreal, widthreal - diffhoriz, heightdrawn, opacity);
                drawPatternOnCanvas(context, canvases.topRight.canvas, rightreal - diffhoriz, topreal, widthdrawn, heightdrawn, opacity);
                topreal += diffvert;
                heightreal -= diffvert;
                
                // right, bottomLeft, bottom
                diffvert = sprite.bottomheight ? sprite.bottomheight * unitsize : spriteheightpixels;
                drawPatternOnCanvas(context, canvases.right.canvas, rightreal - diffhoriz, topreal, widthdrawn, heightreal - diffvert, opacity);
                drawPatternOnCanvas(context, canvases.bottomRight.canvas, rightreal - diffhoriz, bottomreal - diffvert, widthdrawn, heightdrawn, opacity);
                drawPatternOnCanvas(context, canvases.bottom.canvas, leftreal, bottomreal - diffvert, widthreal - diffhoriz, heightdrawn, opacity);
                rightreal -= diffhoriz;
                widthreal -= diffhoriz;
                bottomreal -= diffvert;
                heightreal -= diffvert;
            break;
        }
        
        // If there's still room/*, and it exists*/, draw the actual canvas
        if ((canvasref = canvases.middle) && topreal < bottomreal && leftreal < rightreal) {
            if (sprite.middleStretch) {
                context.globalAlpha = opacity;
                context.drawImage(canvasref.canvas, leftreal, topreal, widthreal, heightreal);
                context.globalAlpha = 1;
            } else {
                drawPatternOnCanvas(context, canvasref.canvas, leftreal, topreal, widthreal, heightreal, opacity);
            }
        }
        
        return self;
    }
    
    
    /* Utilities
    */
    
    /**
     * Macro to draw a pattern onto a canvas because of how
     * often it's used by the regular draw functions.
     * Not a fan of this lack of control over pattern source coordinates...
     */
    function drawPatternOnCanvas(context, source, left, top, width, height, opacity) {
        context.globalAlpha = opacity;
        context.translate(left, top);
        context.fillStyle = context.createPattern(source, "repeat");
        context.fillRect(
            0, 0, 
            Math.min(width, MapScreener.right - left), 
            Math.min(height, MapScreener.bottom - top)
        );
        context.translate(-left, -top);
        context.globalAlpha = 1;
    }
    
    self.reset(settings || {});
}
/**
 * PixelRendr.js
 */
function PixelRendr(settings) {
    "use strict";
    if (!this || this === window) {
        return new PixelRendr(settings);
    }
    var self = this,

        // Library for storing sprite strings, along with a StringFilr interface
        library,
        BaseFiler,

        // Applies processing functions to turn raw strings into sprites
        // This is used on application startup
        ProcessorBase,

        // Takes sprites and repeats rows, then checks for dimension flipping
        // This is used on-demand, when dimensions are being set
        ProcessorDims,
        
        // Reverse of ProcessorBase: Takes real images and compresses their data
        ProcessorEncode,

        // Ordered array of arrays, each representing an RGBA value.
        // [0,0,0,0] is clear, [255,255,255,255] is white, and so on.
        paletteDefault,

        // Default digit size (how many characters per number)
        // E.x. "7" is 1, "07" is 2
        digitsizeDefault,

        // Utility RegExp to split strings on every #digitsize characters
        digitsplit,
        
        // How much to expand sprites by (definition fuzzy)
        unitsize,

        // How much to repeat each pixel
        scale,

        // String keys to know whether to flip a sprite, vertically or horizontally
        flip_vert,
        flip_horiz,

        // String keys for canvas creation & sizing from attributes
        spriteWidth,
        spriteHeight,

        // Associative array of color mapping filters
        // E.x. {"07" => "14"} maps all sevens to fourteens
        filters,
        
        // 
        Uint8ClampedArray;
    
    /**
     * 
     */
    self.reset = function (settings) {
        if (!settings.palette) {
            throw new Error("No palette given to PixelRendr.");
        }

        paletteDefault = settings.palette;
        digitsizeDefault = getDigitSize(paletteDefault);
        digitsplit = new RegExp('.{1,' + digitsizeDefault + '}', 'g');
        filters = settings.filters || {};
        unitsize = settings.unitsize || 4;
        scale = settings.scale || 2;
        flip_vert = settings.flip_vert || "flip-vert";
        flip_horiz = settings.flip_horiz || "flipped";
        spriteWidth = settings.spriteWidth || "spriteWidth";
        spriteHeight = settings.spriteHeight || "spriteHeight";
        Uint8ClampedArray = (
            settings.Uint8ClampedArray 
            || window.Uint8ClampedArray
            || window.Uint8Array 
            || Array
        );

        // The first ChangeLinr does the raw processing, of strings to sprites
        ProcessorBase = new ChangeLinr({
            "transforms": {
                "spriteUnravel": spriteUnravel,
                "spriteApplyFilter": spriteApplyFilter,
                "spriteExpand": spriteExpand,
                "spriteGetArray": spriteGetArray
            },
            "pipeline": [
                "spriteUnravel",
                "spriteApplyFilter",
                "spriteExpand",
                "spriteGetArray"
            ]
        });

        // The second ChangeLinr does row repeating and flipping
        ProcessorDims = new ChangeLinr({
            "transforms": {
                "spriteRepeatRows": spriteRepeatRows,
                "spriteFlipDimensions": spriteFlipDimensions
            },
            "pipeline": [
                "spriteRepeatRows",
                "spriteFlipDimensions"
            ]
        });
        
        // As a utility, a processor is included to encode image data to sprites
        ProcessorEncode = new ChangeLinr({
            "transforms": {
                "imageGetData": imageGetData,
                "imageGetPixels": imageGetPixels,
                "imageMapPalette": imageMapPalette,
                "imageCombinePixels": imageCombinePixels
            },
            "pipeline": [
                "imageGetData",
                "imageGetPixels",
                "imageMapPalette",
                "imageCombinePixels"
            ],
            "do_use_cache": false
        });

        // The library starts with raw sprites, but is parsed by ProcessorBase
        library = {
            "raws": settings.library || {},
            "posts": []
        };
        library.sprites = libraryParse(library.raws, ''),

        // Post commands are evaluated after the first processing run
        libraryPosts();

        // The BaseFiler provides a searchable 'view' on the library of sprites
        BaseFiler = new StringFilr({
            "library": library.sprites,
            "normal": "normal", // to do: put this somewhere more official?
        });
    };

    /* External functions
     */

    // Standard render function - given a key, find and parse the raw sprite
    // Attributes are needed so it can manipulate on width and height
    self.decode = function (key, attributes) {
        // BaseFiler stores the cache of the base sprites
        // It does not actually require the extra attributes
        var sprite = BaseFiler.get(key);
        if (!sprite) {
            throw new Error("No raw sprite found for " + key + ".");
        }
        
        // Multiple sprites have their sizings taken from attributes
        if (sprite.multiple) {
            if (!sprite.processed) {
                processSpriteMultiple(sprite, key, attributes);
            }
        }
        // Single (actual) sprites process for size (row) scaling, and flipping
        else {
            if (!(sprite instanceof Uint8ClampedArray)) {
                throw new Error("No single raw sprite found for: '" + key + "'");
            }
            sprite = ProcessorDims.process(sprite, key, attributes);
        }

        sprite.processed = true;
        return sprite;
    };

    /**
     * 
     */
    self.encode = function (image, callback, source) {
        var result = ProcessorEncode.process(image);
        
        if (callback) {
            callback(result, image, source);
        }
    };
    
    /**
     * 
     */
    self.encodeURI = function (source, callback) {
        var image = document.createElement("img");
        image.onload = self.encode.bind(self, image, callback);
        image.src = source;
    };
    
    /**
     * 
     */
    self.getBaseFiler = function () {
        return BaseFiler;
    };
    
    /**
     * 
     */
    self.getBaseLibrary = function () {
        return BaseFiler.getLibrary();
    };
    
    /**
     * 
     */
    self.getProcessorBase = function () {
        return ProcessorBase;
    };
    
    /**
     * 
     */
    self.getProcessorDims = function () {
        return ProcessorDims;
    };
    
    /**
     * 
     */
    self.getProcessorEncode = function () {
        return ProcessorEncode;
    };
    
    self.getSpriteBase = function (key) {
        return BaseFiler.get(key);
    }


    /* Library parsing
     */

    // Recursively go through everything in the library, parsing into sprite data
    function libraryParse(setref, path) {
        var setnew = {},
            objref, objnew,
            i;
        // For each child of the current layer:
        for (i in setref) {
            objref = setref[i];
            switch (objref.constructor) {
            // If it's a string, parse it
            case String:
                // setnew[i] = spriteGetArray(spriteExpand(spriteUnravel(objref)));
                setnew[i] = ProcessorBase.process(objref, path + ' ' + i);
                break;
            // If it's an array, it should have a command such as 'same' to be post-processed
            case Array:
                library.posts.push({
                    caller: setnew,
                    name: i,
                    command: setref[i],
                    path: path + ' ' + i
                });
                break;
            // If it's an object, simply recurse
            case Object:
                setnew[i] = libraryParse(objref, path + ' ' + i);
                break;
            }
        }
        return setnew;
    }

    // Post-processing (such as copies and filters) once the main processing finishes
    function libraryPosts() {
        var posts = library.posts,
            post, i;
        for (i = 0; i < posts.length; i += 1) {
            post = posts[i];
            post.caller[post.name] = evaluatePost(post.caller, post.command, post.path);
        }
    }

    // Returns an obj and the parsed version of the following parts of command
    function evaluatePost(caller, command, path) {
        switch (command[0]) {
        // Same: just returns a reference to the target
        // ["same", ["container", "path", "to", "target"]]
        case "same":
            var spriteRaw = followPath(library.raws, command[1], 0);
            switch (spriteRaw.constructor) {
            case String:
                return ProcessorBase.process(spriteRaw, path);
            case Array:
                return evaluatePost(caller, spriteRaw, path);
            default:
                return libraryParse(spriteRaw, path);
            }

        // Filter: takes a reference to the target, and applies a filter to it
        // ["filter", ["container", "path", "to", "target"], filters.DoThisFilter]
        case "filter":
            // Find the sprite this should be filtering from
            var spriteRaw = followPath(library.raws, command[1], 0),
                filter = filters[command[2]];
            if (!filter) {
                console.log("Invalid filter provided:", command[2], filters);
                // return spriteRaw;
                filter = {};
            }
            return evaluatePostFilter(spriteRaw, path, filter);

        // Multiple: uses more than one image, either vertically or horizontally
        // Not to be confused with having .repeat = true.
        // ["multiple", "vertical", {
        //    top: "...",       // (just once at the top)
        //    middle: "..."     // (repeated after top)
        //  }
        case "multiple":
            return evaluatePostMultiple(path, command);
        }
        
        // Commands not evaluated by the switch are unknown and bad
        console.warn("Unknown command specified in post-processing: '" + command[0] + "'.", caller, command, path);
    }

    // Driver function to recursively apply a filter on a sprite / container
    function evaluatePostFilter(spriteRaw, path, filter) {
        // If it's just a String, process the sprite normally
        if (typeof (spriteRaw) == "string") {
            return ProcessorBase.process(spriteRaw, path, {
                filter: filter
            });
        }

        // If it's an Array, that's a post that hasn't yet been evaluated: evaluate it by the path
        if (spriteRaw instanceof Array) {
            return evaluatePostFilter(followPath(library.raws, spriteRaw[1], 0), spriteRaw[1].join(' '), filter);
        }

        // If it's a generic Object, go recursively on its children
        if (spriteRaw instanceof Object) {
            var output = {},
                i;
            for (i in spriteRaw) {
                output[i] = evaluatePostFilter(spriteRaw[i], path + ' ' + i, filter);
            }
            return output;
        }

        // Anything else is a complaint
        console.warn("Invalid sprite provided for a post filter.", spriteRaw, path, filter);
    }

    //
    function evaluatePostMultiple(path, command) {
        var direction = command[1],
            dir_path = ' ' + direction + ' ',
            sections = command[2],
            output = new self.SpriteMultiple(command[1], direction),
            i;
        
        for (i in sections) {
            output.sprites[i] = ProcessorBase.process(sections[i], path + direction + i);
        }
        
        output.topheight = sections.topheight | 0;
        output.rightwidth = sections.rightwidth | 0;
        output.bottomheight = sections.bottomheight | 0;
        output.leftwidth = sections.leftwidth | 0;
        
        output.middleStretch = sections.middleStretch || false;
        
        return output;
    }


    // Used so object.constructor is super awesome
    // Type is 'horizontal' or 'vertical'
    self.SpriteMultiple = function (type, direction) {
        this.type = type;
        this.direction = direction;
        this.multiple = true;
        this.sprites = {};
        this.decoded = false;
    }
    

    /* Actual pipeline functions
     */

    // Given a compressed raw sprite data string, this 'unravels' it (uncompresses)
    // This is the first function called on strings in libraryParse
    // This could output the Uint8ClampedArray immediately if given the area - deliberately does not, for ease of storage
    function spriteUnravel(colors) {
        var paletteref = getPaletteReferenceStarting(paletteDefault),
            digitsize = digitsizeDefault,
            clength = colors.length,
            current, rep, nixloc, newp, i, len,
            output = "",
            loc = 0;
        while (loc < clength) {
            switch (colors[loc]) {
                // A loop, ordered as 'x char times ,'
            case 'x':
                // Get the location of the ending comma
                nixloc = colors.indexOf(",", ++loc);
                // Get the color
                current = makeDigit(paletteref[colors.slice(loc, loc += digitsize)], digitsizeDefault);
                // Get the rep times
                rep = Number(colors.slice(loc, nixloc));
                // Add that int to output, rep many times
                while (rep--) {
                    output += current;
                }
                loc = nixloc + 1;
                break;

                // A palette changer, in the form 'p[X,Y,Z...]' (or 'p' for default)
            case 'p':
                // If the next character is a '[', customize.
                if (colors[++loc] == '[') {
                    nixloc = colors.indexOf(']');
                    // Isolate and split the new palette's numbers
                    paletteref = getPaletteReference(colors.slice(loc + 1, nixloc).split(","));
                    loc = nixloc + 1;
                    digitsize = 1;
                }
                // Otherwise go back to default
                else {
                    paletteref = getPaletteReference(paletteDefault);
                    digitsize = digitsizeDefault;
                }
                break;

                // A typical number
            default:
                output += makeDigit(paletteref[colors.slice(loc, loc += digitsize)], digitsizeDefault);
                break;
            }
        }

        return output;
    }

    // Now that the sprite is unraveled, expand it to scale (repeat characters)
    // Height isn't known, so it'll be created during drawtime
    function spriteExpand(colors) {
        var output = "",
            clength = colors.length,
            current, i = 0,
            j;

        // For each number,
        while (i < clength) {
            current = colors.slice(i, i += digitsizeDefault);
            // Put it into output as many times as needed
            for (j = 0; j < scale; ++j)
                output += current;
        }
        return output;
    }

    // Used during post-processing before spriteGetArray to filter colors
    function spriteApplyFilter(sprite, key, attributes) {
        // If there isn't a filter (as is the normal), just return the sprite
        if (!attributes || !attributes.filter) return sprite;
        var filter = attributes.filter,
            filterName = filter[0];
        if (!filterName) return sprite;

        switch (filterName) {
            // Palette filters switch all instances of one color with another
        case "palette":
            // Split the sprite on on each digit ('...1234...' => [...,'12','34,...]
            var split = sprite.match(digitsplit),
                i;
            // For each color filter to be applied, replace it
            for (i in filter[1])
                arrayReplace(split, i, filter[1][i]);
            return split.join('');
        }
        return sprite;
    }

    // Given the expanded version of colors, output the rgba array
    function spriteGetArray(colors) {
        var clength = colors.length,
            numcolors = clength / digitsizeDefault,
            split = colors.match(digitsplit),
            olength = numcolors * 4,
            output = new Uint8ClampedArray(olength),
            reference, i, j, k;
        // For each color,
        for (i = 0, j = 0; i < numcolors; ++i) {
            // Grab its RGBA ints
            reference = paletteDefault[Number(split[i])];
            // Place each in output
            for (k = 0; k < 4; ++k)
                output[j + k] = reference[k];
            j += 4;
        }

        return output;
    }

    // Repeats each row of a sprite based on the container attributes
    function spriteRepeatRows(sprite, key, attributes) {
        // With the rows set, repeat them by unitsize to create the final, parsed product
        var parsed = new Uint8ClampedArray(sprite.length * scale),
            rowsize = attributes[spriteWidth] * 4,
            heightscale = attributes[spriteHeight] * scale,
            readloc = 0,
            writeloc = 0,
            si, sj;
        
        // For each row:
        for (si = 0; si < heightscale; ++si) {
            // Add it to parsed x scale
            for (sj = 0; sj < scale; ++sj) {
                self.memcpyU8(sprite, parsed, readloc, writeloc, rowsize);
                writeloc += rowsize;
            }
            readloc += rowsize;
        }

        return parsed;
    }

    // Flips a sprite based on flip_vert and flip_horiz
    // To do: cache this again, like it used to
    function spriteFlipDimensions(sprite, key, attributes) {
        if (key.indexOf(flip_horiz) != -1) {
            if (key.indexOf(flip_vert) != -1) {
                return flipSpriteArrayBoth(sprite, attributes);
            } else {
                return flipSpriteArrayHoriz(sprite, attributes);
            }
        } else if (key.indexOf(flip_vert) != -1) {
            return flipSpriteArrayVert(sprite, attributes);
        }
        return sprite;
    }

    // Flipping horizontally is reversing pixels within each row
    function flipSpriteArrayHoriz(sprite, thing) {
        var length = sprite.length,
            width = thing.spritewidth,
            height = thing.spriteheight,
            newsprite = new Uint8ClampedArray(length),
            rowsize = width * unitsize * 4,
            newloc, oldloc,
            i, j, k;
        // For each row
        for (i = 0; i < length; i += rowsize) {
            newloc = i;
            oldloc = i + rowsize - 4;
            // For each pixel
            for (j = 0; j < rowsize; j += 4) {
                for (k = 0; k < 4; ++k)
                    newsprite[newloc + k] = sprite[oldloc + k];
                newloc += 4;
                oldloc -= 4;
            }
        }
        return newsprite;
    }
    // Flipping vertically is reversing the order of rows
    function flipSpriteArrayVert(sprite, thing) {
        var length = sprite.length,
            width = thing.spritewidth,
            height = thing.spriteheight,
            newsprite = new Uint8ClampedArray(length),
            rowsize = width * unitsize * 4,
            newloc = 0,
            oldloc = length - rowsize,
            i, j, k;

        // For each row
        while (newloc < length) {
            // For each pixel in the rows
            for (i = 0; i < rowsize; i += 4) {
                // For each rgba value
                for (j = 0; j < 4; ++j) {
                    newsprite[newloc + i + j] = sprite[oldloc + i + j];
                }
            }
            newloc += rowsize;
            oldloc -= rowsize;
        }

        return newsprite;
    }
    // Flipping both horizontally and vertically is actually just reversing the order of pixels
    function flipSpriteArrayBoth(sprite) {
        var length = sprite.length,
            newsprite = new Uint8ClampedArray(length),
            oldloc = sprite.length - 4,
            newloc = 0,
            i;
        while (newloc < length) {
            for (i = 0; i < 4; ++i)
                newsprite[newloc + i] = sprite[oldloc + i];
            newloc += 4;
            oldloc -= 4;
        }
        return newsprite;
    }

    // SpriteMultiple components need to be individually processed
    function processSpriteMultiple(sprite, key, attributes) {
        for (var i in sprite.sprites) {
            if (sprite.sprites[i] instanceof Uint8ClampedArray) {
                sprite.sprites[i] = ProcessorDims.process(sprite.sprites[i], key + ' ' + i, attributes);
            }
        }
        
        sprite.processed = true;
    }

    
    /* Encoding pipeline functions
    */
    
    /**
     * 
     */
    function imageGetData(image) {
        var canvas = document.createElement("canvas"),
            context = canvas.getContext("2d");
        
        canvas.width = image.width;
        canvas.height = image.height;
        
        context.drawImage(image, 0, 0);
        return context.getImageData(0, 0, image.width, image.height).data;
    }
    
    /**
     * 
     */
    function imageGetPixels(data) {
        var pixels = new Array(data.length / 4),
            occurences = {},
            pixel,
            i, j;
        
        for (i = 0, j = 0; i < data.length; i += 4, j += 1) {
            pixel = getClosestInPalette(data.subarray(i, i + 4));
            pixels[j] = pixel;
            
            if (occurences.hasOwnProperty(pixel)) {
                occurences[pixel] += 1;
            } else {
                occurences[pixel] = 1;
            }
        }
        
        return [pixels, occurences];
    }
    
    /**
     * 
     */
    function imageMapPalette(information) {
        var pixels = information[0],
            occurences = information[1],
            palette = Object.keys(occurences),
            digitsize = getDigitSize(palette),
            paletteIndices = getValueIndices(palette),
            numbers = pixels.map(getKeyValue.bind(undefined, paletteIndices));
        
        return [palette, numbers, digitsize];
    }
    
    /**
     * 
     */
    function imageCombinePixels(information) {
        var palette = information[0],
            numbers = information[1],
            digitsize = information[2],
            threshold = Math.max(3, Math.round(4 / digitsize)),
            output,
            current,
            digit,
            i = 0,
            j;
        
        output = "p["
            + palette.map(makeSizedDigit.bind(undefined, digitsize)).join(',')
            + "]";
        
        while(i < numbers.length) {
            j = i + 1;
            current = numbers[i];
            digit = makeDigit(current, digitsize);
            
            while(current == numbers[j]) {
                j += 1;
            }
            
            if (j - i > threshold) {
                output += "x" + digit + String(j - i) + ",";
                i = j;
            } else {
                do {
                    output += digit;
                    i += 1;
                }
                while(i < j);
            }
        }
        
        return output;
    }
    

    /* Misc. utility functions
     */

    // Returns what a digitsize should be from a palette
    // E.x. A palette with 20 colors gives 2; 117 colors gives 3
    // @param {Array} palette
    function getDigitSize(palette) {
        return Number(String(palette.length).length);
    }
    
    /**
     * 
     */
    function getDigitSizeFromLength(length) {
        return Numbet(String(length).length);
    }

    // Given a palette array, this returns the actual palette object
    // E.x. [0,7] becomes {0: 0, 1: 7}
    function getPaletteReference(palette) {
        var output = {},
            digitsize = getDigitSize(palette);
        for (var i = 0; i < palette.length; ++i)
            output[makeDigit(i, digitsize)] = makeDigit(palette[i], digitsize);
        return output;
    }

    // Given a string of a palette, this returns the actual palette object
    // E.x. "p[0,7]" becomes {0: 0, 1: 7}
    function getPaletteReferenceStarting(palette) {
        var output = {};
        for (var i = 0; i < palette.length; ++i)
            output[makeDigit(i, digitsizeDefault)] = makeDigit(i, digitsizeDefault)
        return output;
    }
    
    /**
     * 
     */
    function getClosestInPalette(rgba) {
        var difference,
            best_difference = Infinity,
            best_i,
            i;
        
        for (i = paletteDefault.length - 1; i >= 0; i -= 1) {
            difference = arrayDifference(paletteDefault[i], rgba);
            if (difference < best_difference) {
                best_difference = difference;
                best_i = i;
            }
        }
        
        return best_i;
    }

    // Creates a string of me, repeated n times
    function stringOf(me, n) {
        return (n == 0) ? '' : new Array(1 + (n || 1)).join(me);
    }

    // Converts ('7',3,1) to '117'
    function makeDigit(num, size) {
        return stringOf('0', Math.max(0, size - String(num).length)) + num;
    }
    
    // Curry function (useful for binding)
    function makeSizedDigit(size, num) {
        return makeDigit(num, size);
    }

    // Equivalent of String.replace for Arrays
    function arrayReplace(arr, outs, ins) {
        for (var i = 0; i < arr.length; ++i) {
            if (arr[i] == outs) {
                arr[i] = ins;
            }
        }
        return arr;
    }
    
    /**
     * 
     */
    function arrayDifference(a, b) {
        var sum = 0,
            i;
        for (i = a.length - 1; i >= 0; i -= 1) {
            sum += Math.abs(a[i] - b[i]);
        }
        return sum;
    }
    
    /**
     * 
     */
    function getValueIndices(array) {
        var output = {},
            i;
        
        for (i = 0; i < array.length; i += 1) {
            output[array[i]] = i;
        }
        
        return output;
    }
    
    /**
     * 
     */
    function getKeyValue(object, key) {
        return object[key];
    }

    // Follows a path inside an object recursively
    // Path is ["path", "to", "target"], where num is how far along the path it is
    // Num must be given at start, for performance reasons
    function followPath(obj, path, num) {
        if (path.hasOwnProperty(num) && obj.hasOwnProperty(path[num]))
            return followPath(obj[path[num]], path, num + 1);
        return obj;
    }

    // http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/
    // http://www.javascripture.com/Uint8ClampedArray
    // function memcpyU8(source, destination, readloc, writeloc, length) {
    // if (readloc == null) readloc = 0;
    // if (length == null) length = source.length - readloc;
    // destination.set(source.subarray(readloc || 0, length), writeloc || 0);
    // }
    self.memcpyU8 = function (source, destination, readloc, writeloc, writelength) {
        if (!source || !destination || readloc < 0 || writeloc < 0 || writelength <= 0) return;
        if (readloc >= source.length || writeloc >= destination.length) {
            // console.log("Alert: memcpyU8 requested out of bounds!");
            // console.log("source, destination, readloc, writeloc, writelength");
            // console.log(arguments);
            return;
        }
        if (readloc == null) readloc = 0;
        if (writeloc == null) writeloc = 0;
        if (writelength == null) writelength = Math.max(0, Math.min(source.length, destination.length));

        var lwritelength = writelength + 0; // Allow JIT integer optimization (Firefox needs this)
        var lwriteloc = writeloc + 0;
        var lreadloc = readloc + 0;
        while (lwritelength--)
        // while(--lwritelength)
            destination[lwriteloc++] = source[lreadloc++];
    }

    self.reset(settings || {});
}
function QuadsKeepr(settings) {
    "use strict";
    if (!this || this === window) {
        return new QuadsKeepr(settings);
    }
    var self = this,
        
        // The ObjectMakr factory used to create Quadrant objects
        ObjectMaker,
        
        // Function used to create a canvas of a given width and height
        createCanvas,
        
        // How many rows and columns of quadrants there should be
        numRows,
        numCols,
        
        // Scrolling offsets during gameplay (initially 0)
        offsetX,
        offsetY,
        
        // Starting coordinates for rows & cols
        startLeft,
        startTop,
        
        quadrantRows,
        
        quadrantCols,
        
        quadrantWidth,
        
        quadrantHeight,

        // Names under which external Things should store Quadrant information
        thingLeft,
        thingTop,
        thingRight,
        thingBottom,
        thingNumQuads,
        thingMaxQuads,
        thingQuadrants,
        thingChanged,
        thingToleranceX,
        thingToleranceY,
        thingGroupName,
        
        // An Array of string names a Thing may be placed into 
        groupNames,

        // Callback for when Quadrants are added or removed, respectively
        onAdd,
        onRemove;
        

    /**
     * 
     */
    self.reset = function (settings) {
        ObjectMaker = settings.ObjectMaker;
        createCanvas = settings.createCanvas;
        
        numRows = settings.numRows;
        numCols = settings.numCols;
        
        startLeft = settings.startLeft | 0;
        startTop = settings.startTop | 0;
        
        quadrantWidth = settings.quadrantWidth | 0;
        quadrantHeight = settings.quadrantHeight | 0;
        
        groupNames = settings.groupNames;

        onAdd = settings.onAdd;
        onRemove = settings.onRemove;

        thingLeft = settings.thingLeft || "left";
        thingRight = settings.thingRight || "right";
        thingTop = settings.thingTop || "top";
        thingBottom = settings.thingBottom || "bottom";
        thingNumQuads = settings.thingNumQuads || "numquads";
        thingMaxQuads = settings.thingMaxQuads || "maxquads";
        thingQuadrants = settings.thingQuadrants || "quadrants";
        thingChanged = settings.thingChanged || "changed";
        thingToleranceX = settings.thingToleranceX || "tolx";
        thingToleranceY = settings.thingToleranceY || "toly";
        thingGroupName = settings.thingGroupName || "group";
    };
    
    
    /* Simple gets
    */
    
    /**
     * 
     */
    self.getQuadrantRows = function () {
        return quadrantRows;
    };
    
    /**
     * 
     */
    self.getQuadrantCols = function () {
        return quadrantCols;
    };
    
    /**
     * 
     */
    self.getNumRows = function () {
        return numRows;
    };
    
    /**
     * 
     */
    self.getNumCols = function () {
        return numCols;
    };
    
    /**
     * 
     */
    self.getQuadrantWidth = function () {
        return quadrantWidth;
    };
    
    /**
     * 
     */
    self.getQuadrantHeight = function () {
        return quadrantHeight;
    };
    
    
    /* Quadrant updates
    */
    
    /**
     8 
     */
    self.shiftQuadrants = function (x, y) {
        var row, col;
        
        x = x | 0;
        y = y | 0;
        
        offsetX += x;
        offsetY += y;
        
        self.top += y;
        self.right += x;
        self.bottom += y;
        self.left += x;
        
        for (row = 0; row < numRows; row += 1) {
            quadrantRows[row].top += y;
            quadrantRows[row].left += x;
        }
        
        for (col = 0; col< numCols; col += 1) {
            quadrantCols[col].top += y;
            quadrantCols[col].left += x;
        }
        
        for (row = 0; row < numRows; row += 1) {
            for (col = 0; col < numCols; col += 1) {
                shiftQuadrant(quadrantRows[row].quadrants[col], x, y);
            }
        }
        
        adjustOffsets();
    }
    
    /** 
     * 
     */
    function adjustOffsets() {
        // Quadrant shift: add to the right
        while(-offsetX > quadrantWidth) {
            self.shiftQuadrantCol(true);
            self.pushQuadrantCol(true);
            offsetX += quadrantWidth;
        }
        
        // Quadrant shift: add to the left
        while(offsetX > quadrantWidth) {
            self.popQuadrantCol(true);
            self.unshiftQuadrantCol(true);
            offsetX -= quadrantWidth;
        }
        
        // Quadrant shift: add to the bottom
        while(-offsetY > quadrantHeight) {
            self.unshiftQuadrantRow(true);
            self.pushQuadrantRow(true);
            offsetY += quadrantHeight;
        }
        
        // Quadrant shift: add to the top
        while(offsetY > quadrantHeight) {
            self.popQuadrantRow(true);
            self.unshiftQuadrantRow(true);
            offsetY -= quadrantHeight;
        }
    };
    
    /**
     * 
     */
    function shiftQuadrant(quadrant, x, y) {
        quadrant.top += y;
        quadrant.right += x;
        quadrant.bottom += y;
        quadrant.left += x;
        quadrant.changed = true;
    }
    
    
    /* Quadrant placements
    */
    
    /**
     * 
     */
    self.resetQuadrants = function () {
        var left = startLeft,
            top = startTop,
            quadrant,
            i, j;
        
        self.top = startTop;
        self.right = startLeft + quadrantWidth * numCols;
        self.bottom = startTop + quadrantHeight * numRows;
        self.left = startLeft;
        
        quadrantRows = [];
        quadrantCols = [];
        
        offsetX = 0;
        offsetY = 0;
        
        for (i = 0; i < numRows; i += 1) {
            quadrantRows.push({
                "left": startLeft,
                "top": top,
                "quadrants": []
            });
            top += quadrantHeight;
        }
        
        for (j = 0; j < numCols; j += 1) {
            quadrantCols.push({
                "left": left,
                "top": startTop,
                "quadrants": []
            });
            left += quadrantWidth;
        }
        
        top = startTop;
        for (i = 0; i < numRows; i += 1) {
            left = startLeft;
            for (j = 0; j < numCols; j += 1) {
                quadrant = createQuadrant(left, top);
                quadrantRows[i].quadrants.push(quadrant);
                quadrantCols[j].quadrants.push(quadrant);
                left += quadrantWidth;
            }
            top += quadrantHeight;
        }
        
        onAdd("xInc", self.top, self.right, self.bottom, self.left);
    };
    
    /**
     * 
     */
    function createQuadrant(left, top) {
        var quadrant = ObjectMaker.make("Quadrant"),
            canvas = createCanvas(quadrantWidth, quadrantHeight),
            i;
        
        quadrant.changed = true;
        quadrant.things = {};
        quadrant.numthings = {};
        
        for (i = 0; i < groupNames.length; i += 1) {
            quadrant.things[groupNames[i]] = [];
            quadrant.numthings[groupNames[i]] = 0;
        }
        
        quadrant.left = left;
        quadrant.top = top;
        quadrant.right = left + quadrantWidth;
        quadrant.bottom = top + quadrantHeight;
        
        quadrant.canvas = canvas;
        quadrant.context = canvas.getContext("2d");
        
        return quadrant;
    }
    
    /**
     * 
     */
    function createQuadrantRow(left, top) {
        var row = {
                "top": top,
                "quadrants": []
            },
            i;
        
        for (i = 0; i < numCols; i += 1) {
            row.quadrants.push(createQuadrant(left, top));
            left += quadrantWidth;
        }
        
        return row;
    };
    
    /**
     * 
     */
    function createQuadrantCol(left, top) {
        var col = {
                "left": left,
                "quadrants": []
            },
            i;
        
        for (i = 0; i < numRows; i += 1) {
            col.quadrants.push(createQuadrant(left, top));
            top += quadrantHeight;
        }
        
        return col;
    };
    
    /**
     * Adds a Quadrant row to the end of the quadrantRows Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new row's bounding box.
     */
    self.pushQuadrantRow = function (callUpdate) {
        var row = createQuadrantRow(self.left, self.bottom),
            i;
        
        numRows += 1;
        quadrantRows.push(row);
        
        for (i = 0; i < quadrantCols.length; i += 1) {
            quadrantCols[i].quadrants.push(row.quadrants[i]);
        }
        
        self.bottom += quadrantHeight;
        
        if (callUpdate && onAdd) {
            onAdd(
                "yInc",
                self.bottom, 
                self.right, 
                self.bottom - quadrantHeight, 
                self.left
            );
        }
        
        return row;
    };
    
    /**
     * Adds a Quadrant col to the end of the quadrantCols Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new col's bounding box.
     */
    self.pushQuadrantCol = function (callUpdate) {
        var col = createQuadrantCol(self.right, self.top),
            i;
        
        numCols += 1;
        quadrantCols.push(col);
    
        for (i = 0; i < quadrantRows.length; i += 1) {
            quadrantRows[i].quadrants.push(col.quadrants[i]);
        }
        
        self.right += quadrantWidth;
        
        if (callUpdate && onAdd) {
            onAdd(
                "xInc", 
                self.top,
                self.right - offsetY, 
                self.bottom, 
                self.right - quadrantWidth - offsetY
            );
        }
        
        return col;
    };
    
    /**
     * Removes the last Quadrant row from the end of the quadrantRows Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new row's bounding box.
     */
    self.popQuadrantRow = function (callUpdate) {
        for (var i = 0; i < quadrantCols.length; i += 1) {
            quadrantCols[i].quadrants.pop();
        }
        
        numRows -= 1;
        quadrantRows.pop();
        
        if (callUpdate && onRemove) {
            onRemove(
                "yInc",
                self.bottom, 
                self.right, 
                self.bottom - quadrantHeight, 
                self.left
            );
        }
        
        self.bottom -= quadrantHeight;
    };
    
    /**
     * Removes the last Quadrant col from the end of the quadrantCols Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new row's bounding box.
     */
    self.popQuadrantCol = function (callUpdate) {
        for (var i = 0; i < quadrantRows.length; i += 1) {
            quadrantRows[i].quadrants.pop();
        }
        
        numCols -= 1;
        quadrantCols.pop();
        
        if (callUpdate && onRemove) {
            onRemove(
                "xDec", 
                self.top,
                self.right - offsetY, 
                self.bottom, 
                self.right - quadrantWidth - offsetY
            );
        }
        
        self.right -= quadrantWidth;
    };
    
    /**
     * Adds a Quadrant row to the beginning of the quadrantRows Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new row's bounding box.
     */
    self.unshiftQuadrantRow = function (callUpdate) {
        var row = createQuadrantRow(self.left, self.top - quadrantHeight),
            i;
        
        numRows += 1;
        quadrantRows.unshift(row);
        
        for (i = 0; i < quadrantCols.length; i += 1) {
            quadrantCols[i].quadrants.unshift(row.quadrants[i]);
        }
        
        self.top -= quadrantHeight;
        
        if (callUpdate && onAdd) {
            onAdd(
                "yInc",
                self.top,
                self.right, 
                self.top + quadrantHeight, 
                self.left
            );
        }
        
        return row;
    };
    
    /**
     * Adds a Quadrant col to the beginning of the quadrantCols Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new row's bounding box.
     */
    self.unshiftQuadrantCol = function (callUpdate) {
        var col = createQuadrantCol(self.left - quadrantWidth, self.top),
            i;
        
        numCols += 1;
        quadrantCols.unshift(col);
        
        for (i = 0; i < quadrantRows.length; i += 1) {
            quadrantRows[i].quadrants.unshift(col.quadrants[i]);
        }
        
        self.left -= quadrantWidth;
        
        if (callUpdate && onAdd) {
            onAdd(
                "xInc",
                self.top,
                self.left,
                self.bottom, 
                self.left + quadrantWidth
            );
        }
        
        return col;
    };
    
    /**
     * Removes a Quadrant row from the beginning of the quadrantRows Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new row's bounding box.
     */
    self.shiftQuadrantRow = function (callUpdate) {
        for (var i = 0; i < quadrantCols.length; i += 1) {
            quadrantCols[i].quadrants.shift();
        }
        
        numRows -= 1;
        quadrantRows.pop();
        
        if (callUpdate && onRemove) {
            onRemove(
                "yInc",
                self.top,
                self.right, 
                self.top + quadrantHeight, 
                self.left
            );
        }
        
        self.top += quadrantHeight;
    };
    
    /**
     * Removes a Quadrant col from the beginning of the quadrantCols Array.
     * 
     * @param {Boolean} callUpdate   Whether this should call the onAdd 
     *                               trigger with the new row's bounding box.
     */
    self.shiftQuadrantCol = function (callUpdate) {
        for (var i = 0; i < quadrantRows.length; i += 1) {
            quadrantRows[i].quadrants.shift();
        }
        
        numCols -= 1;
        quadrantCols.pop();
        
        if (callUpdate && onRemove) {
            onRemove(
                "xInc",
                self.top,
                self.left + quadrantWidth,
                self.bottom,
                self.left
            );
        }
        
        self.left += quadrantWidth;
    };
    
    
    /* Thing manipulations
    */
    
    /**
     * Determines the quadrants for an entire Array of Things. This is done by
     * wiping each quadrant's memory of that Array's group type and determining
     * each Thing's quadrants.
     * 
     * @param {String} groupName
     * @param {Thing[]} things
     */
    self.determineAllQuadrants = function (group, things) {
        var row, col, k;
        
        for (row = 0; row < numRows; row += 1) {
            for (col = 0; col < numCols; col += 1) {
                quadrantRows[row].quadrants[col].numthings[group] = 0;
            }
        }
        
        things.forEach(self.determineThingQuadrants);
    };
        
    /**
     * 
     */
    self.determineThingQuadrants = function (thing) {
        var group = thing[thingGroupName],
            rowStart = findQuadrantRowStart(thing),
            colStart = findQuadrantColStart(thing),
            rowEnd = findQuadrantRowEnd(thing),
            colEnd = findQuadrantColEnd(thing),
            row, col;
        
        // Mark each of the Thing's Quadrants as changed
        // This is done first because the old Quadrants are changed
        if (thing[thingChanged]) {
            markThingQuadrantsChanged(thing);
        }
        
        // The Thing no longer has any Quadrants: rebuild them!
        thing[thingNumQuads] = 0;
        
        for (row = rowStart; row <= rowEnd; row += 1) {
            for (col = colStart; col <= colEnd; col += 1) {
                self.setThingInQuadrant(group, thing, quadrantRows[row].quadrants[col]);
            }
        }
        
        // Mark the Thing's new Quadrants as changed
        if (thing[thingChanged]) {
            markThingQuadrantsChanged(thing);
        }
        
        // The thing is no longer considered changed, since quadrants know it
        thing[thingChanged] = false;
    };
    
    /**
     * 
     */
    self.setThingInQuadrant = function (group, thing, quadrant) {
        // Mark the Quadrant in the Thing
        thing[thingQuadrants][thing[thingNumQuads]] = quadrant;
        thing[thingNumQuads] += 1;
        
        // Mark the Thing in the Quadrant
        quadrant.things[group][quadrant.numthings[group]] = thing;
        quadrant.numthings[group] += 1;
    }
    
    /** 
     * 
     */
    function markThingQuadrantsChanged(thing) {
        for (var i = 0; i < thing[thingNumQuads]; i += 1) {
            thing[thingQuadrants][i].changed = true;
        }
    }
    
    /**
     * 
     */
    function findQuadrantRowStart(thing) {
        return Math.max(Math.floor((thing.top - self.top) / quadrantHeight), 0);
    }
    
    /**
     * 
     */
    function findQuadrantRowEnd(thing) {
        return Math.min(Math.floor((thing.bottom - self.top) / quadrantHeight), numRows - 1);
    }
    
    /**
     * 
     */
    function findQuadrantColStart(thing) {
        return Math.max(Math.floor((thing.left - self.left) / quadrantWidth), 0);
    }
    
    /**
     * 
     */
    function findQuadrantColEnd(thing) {
        return Math.min(Math.floor((thing.right - self.left) / quadrantWidth), numCols - 1);
    }
    
    
    self.reset(settings || {});
}
/**
 * StatsHoldr.js
 * 
 * A versatile container to store and manipulate values in localStorage, and
 * optionally keep an updated HTML container showing these values. Operations 
 * such as setting, increasing/decreasing, and default values are all abstracted
 * automatically. Values are stored in memory as well as in localStorage for
 * fast lookups.
 * Each StatsHoldr instance requires proliferate and createElement functions 
 * (such as those given by the EightBittr prototype).
 * 
 * @example
 * // Creating and using a StatsHoldr to store user statistics.
 * var StatsHolder = new StatsHoldr({
 *     "prefix": "MyStatsHoldr",
 *     "values": {
 *         "bestStage": {
 *             "valueDefault": "Beginning",
 *             "storeLocally": true
 *         },
 *         "bestScore": {
 *             "valueDefault": 0,
 *             "storeLocally": true
 *         }
 *     },
 *     "proliferate": EightBittr.prototype.proliferate,
 *     "createElement": EightBittr.prototype.createElement
 * });
 * StatsHolder.set("bestStage", "Middle");
 * StatsHolder.set("bestScore", 9001);
 * console.log(StatsHolder.get("bestStage")); // "Middle"
 * console.log(StatsHolder.get("bestScore")); // "9001"
 * 
 * @example
 * // Creating and using a StatsHoldr to show user statistics in HTML elements.
 * var StatsHolder = new StatsHoldr({
 *     "prefix": "MyStatsHoldr",
 *     "doMakeContainer": true,
 *     "containers": [
 *         ["table", {
 *             "id": "StatsOutside",
 *             "style": {
 *                 "textTransform": "uppercase"
 *             }
 *         }],
 *         ["tr", {
 *             "id": "StatsInside"
 *         }]
 *     ],
 *     "defaults": {
 *         "element": "td"
 *     },
 *     "values": {
 *         "bestStage": {
 *             "valueDefault": "Beginning",
 *             "hasElement": true,
 *             "storeLocally": true
 *         },
 *         "bestScore": {
 *             "valueDefault": 0,
 *             "hasElement": true,
 *             "storeLocally": true
 *         }
 *     },
 *     "proliferate": EightBittr.prototype.proliferate,
 *     "createElement": EightBittr.prototype.createElement
 * });
 * document.body.appendChild(StatsHolder.getContainer());
 * StatsHolder.set("bestStage", "Middle");
 * StatsHolder.set("bestScore", 9001);
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function StatsHoldr(settings) {
    "use strict";
    if (!this || this === window) {
        return new StatsHoldr(settings);
    }
    var self = this,

        // The objects being stored, keyed as Object<String, Object>.
        values,

        // Default attributes for value, as Object<String, Object>.
        defaults,
        
        // A reference to localStorage or a replacement object.
        localStorage,

        // A prefix to store things under in localStorage.
        prefix,

        // A container element containing children for each value's element.
        container,

        // An array of elements as createElement arguments, outside-to-inside.
        containers,

        // An Array of objects to be passed to triggered events.
        callbackArgs,
        
        // Helper Function to copy Object attributes, such as from EightBittr.
        proliferate,
        
        // Helper Function to create an element, such as from EightBittr.
        createElement;
    
    /**
     * Resets the StatsHoldr.
     * 
     * @constructor
     * @param {String} prefix   A String prefix to prepend to key names in 
     *                          localStorage.
     * @param {Function} proliferate   A Function that takes in a recipient 
     *                                 Object and a donor Object, and copies
     *                                 attributes over. Generally given by
     *                                 EightBittr.prototype to minimize 
     *                                 duplicate code.
     * @param {Function} createElement   A Function to create an Element of a
     *                                   given String type and apply attributes
     *                                   from subsequent Objects. Generally 
     *                                   given by EightBittr.prototype to reduce
     *                                   duplicate code.
     * @param {Object} [values]   The keyed values to be stored, as well as all
     *                            associated information with them. The names of
     *                            values are keys in the values Object.
     * @param {Object} [localStorage]   A substitute for localStorage, generally
     *                                  used as a shim (defaults to window's 
     *                                  localStorage, or a new Object if that
     *                                  does not exist).
     * @param {Boolean} [doMakeContainer]   Whether an HTML container with 
     *                                      children for each value should be
     *                                      made (defaults to false).
     * @param {Object} [defaults]   Default attributes for each value.
     * @param {Array} [callbackArgs]   Arguments to pass via Function.apply to 
     *                                 triggered callbacks (defaults to []).
     */
    self.reset = function (settings) {
        prefix = settings.prefix;
        proliferate = settings.proliferate;
        createElement = settings.createElement;
        callbackArgs = settings.callbackArgs || [];
        localStorage = settings.localStorage || window.localStorage || {};
        
        defaults = settings.defaults || {};

        values = {};
        if (settings.values) {
            for (var key in settings.values) {
                self.addStatistic(key, settings.values[key]);
            }
        }

        if (settings.doMakeContainer) {
            containers = settings.containers || [
                ["div", {
                    "className": prefix + "_container"
                }]
            ]
            container = makeContainer(settings.containers);
        }
    };
    
    
    /* Retrieval
     */
     
    /**
     * @return {String[]} The names of all value's keys.
     */
    self.getKeyNames = function () {
        return Object.keys(values);
    };

    /**
     * @param {String} key   The key for a known value.
     * @return {Mixed} The known value of a key, assuming that key exists.
     */
    self.get = function (key) {
        checkExistence(key);
        
        return values[key].value;
    }
    
    /**
     * @param {String} key   The key for a known value.
     * @return {Object} The settings for that particular key.
     */
    self.getObject = function (key) {
        return values[key];
    }
    
    
    /* Values
    */
    
    /**
     * Adds a new key & value pair to by linking to a newly created Value.
     * 
     * @param {String} key   The key to reference by new Value by.
     * @param {Object} settings   The settings for the new Value.
     * @return {Value} The newly created Value.
     */
    self.addStatistic = function (key, settings) {
        return values[key] = new Value(key, settings);
    };
    
    /**
     * Creates a new Value with the given key and settings. Defaults are given
     * to the value via proliferate before the settings.
     * 
     * @constructor
     * @param {String} key   The key to reference this new Value by.
     * @param {Object} settings   The settings for the new Value.
     * @param {Mixed} [value]   The actual value for this Value (defaults to
     *                          this.valueDefault).
     * @param {Mixed} [valueDefault]   A default value to use if no value is
     *                                 provided (by default, "").
     * @param {Boolean} [hasElement]   Whether an HTML element should be created
     *                                 and stored in the container (by default,
     *                                 false).
     * @param {String} [element]   The tag name for the HTML element, if 
     *                             hasElement is true (defaults to "div").
     * @param {Boolean} [storeLocally]   Whether to store this as a key/value
     *                                   pair in localStorage.
     * @param {Object} [triggers]   A mapping of any values that, if hit, should 
     *                              result in a mapped callback being called.
     * @param {Number} [modularity]   A Number value to call onModular when the
     *                                value is modular with, if a Number.
     * @param {Function} [onModular]   A callback to be colled when modularity
     *                                 is hit.
     * @param {Number} [digits]   The minimum number of digits to display for a
     *                            Number's HTML element (so 7 becomes "007" if
     *                            digits is 3).
     * @param {Number} [minimum]   A "minimum" value below which Number values
     *                             may not go.
     * @param {Function} [onMinimum]   A calback for when the Number value hits
     *                                 the minimum.
     * @param {Number} [maximum]   A "maximum" value below which Number values
     *                             may not go.   
     * @param {Function} [onMaximum]   A calback for when the Number value hits
     *                                 the maximum.
     * @remarks The actual Function arguments are key and settings; all 
     *          subsequent arguments are members of settings.
     */
    function Value(key, settings) {
        this.key = key;
        
        proliferate(this, defaults);
        proliferate(this, settings);

        if (!this.hasOwnProperty("value")) {
            this.value = this.valueDefault;
        }
        
        if (this.hasElement) {
            this.element = createElement(this.element || "div", {
                className: prefix + "_value " + key
            });
            this.element.appendChild(createElement("div", {
                "textContent": key
            }));
            this.element.appendChild(createElement("div", {
                "textContent": this.value
            }));
        }

        if (this.storeLocally) {
            // If there exists an old version of this property, get it 
            if (localStorage.hasOwnProperty([prefix + key])) {
                var reference = localStorage[prefix + key],
                    constructor;

                // If possible, use the same type as valueDefault
                // This ensure 7 doesn't get converted to "7" or vice-versa.
                if (this.hasOwnProperty("value")) {
                    if (this.value === null || this.value === undefined) {
                        constructor = false;
                    } else {
                        constructor = this.value.constructor;
                    }
                } else if (this.hasOwnProperty("valueDefault")) {
                    constructor = this.valueDefault.constructor;
                }
                
                this.value = constructor ? new constructor(reference).valueOf() : reference;
                
                // Remember: false will be stored as "false", which is truthy!
                if (this.value.constructor === Boolean) {
                    console.warn(
                        "Key '" + key + "' is a boolean instead of a Number, "
                        + "which will always save to true."
                    );
                }
            }
            // Otherwise save the new version to memory
            else {
                this.updateLocalStorage();
            }
        }
    }
    
    /**
     * General update Function to be run whenever the internal value is changed.
     * It runs all the trigger, modular, etc. checks, updates the HTML element
     * if there is one, and updates localStorage if needed.
     * 
     * @this {Value}
     */
    Value.prototype.update = function () {
        // Mins and maxes must be obeyed before any other considerations
        if (
            this.hasOwnProperty("minimum") 
            && Number(this.value) <= Number(this.minimum)
        ) {
            this.value = this.minimum;
            if (this.onMinimum) {
                this.onMinimum.apply(this, callbackArgs);
            }
        } else if (
            this.hasOwnProperty("maximum") 
            && Number(this.value) <= Number(this.maximum)
        ) {
            this.value = this.maximum;
            if (this.on_maximum) {
                this.on_maximum.apply(this, callbackArgs);
            }
        }
    
        if (this.modularity) {
            this.checkModularity();
        }
        
        if (this.triggers) {
            this.checkTriggers();
        }
        
        if (this.hasElement) {
            this.updateElement();
        }
        
        if (this.storeLocally) {
            this.updateLocalStorage();
        }
    };
    
    /**
     * Checks if the current value should trigger a callback, and if so calls 
     * it.
     * 
     * @this {Value}
     */
    Value.prototype.checkTriggers = function () {
        if (this.triggers.hasOwnProperty(this.value)) {
            this.triggers[this.value].apply(this, callbackArgs);
        }
    };
    
    /**
     * Checks if the current value is greater than the modularity (assuming
     * modular is a non-zero Numbers), and if so, continuously reduces value and 
     * calls this.onModular.
     * 
     * @this {Value}
     */
    Value.prototype.checkModularity = function () {
        if (Number || !this.modularity) {
            return;
        }
        
        while (this.value >= this.modularity) {
            this.value = Math.max(0, this.value - this.modularity);
            if (this.onModular) {
                this.onModular.apply(this, callbackArgs);
            }
        }
    };
    
    /**
     * Updates the Value's element's second child to be the Value's value.
     * 
     * @this {Value}
     */
    Value.prototype.updateElement = function () {
        this.element.children[1].textContent = this.value;
    };
    
    /**
     * Stores a Value's value in localStorage under the prefix plus its key.
     * 
     * @this {Value}
     */
    Value.prototype.updateLocalStorage = function () {
        localStorage[prefix + this.key] = this.value;
    };


    /* Updating values
     */
    
    /**
     * Sets the value for the Value under the given key, then updates the Value
     * (including the Value's element and localStorage, if needed).
     * 
     * @param {String} key   The key of the Value.
     * @param {Mixed} value   The new value for the Value.
     */
    self.set = function (key, value) {
        checkExistence(key);
        
        values[key].value = value;
        values[key].update();
    }
    
    /**
     * Increases the value for the Value under the given key, via addition for
     * Numbers or concatenation for Strings.
     * 
     * @param {String} key   The key of the Value.
     * @param {Mixed} [amount]   The amount to increase by (by default, 1).
     */
    self.increase = function (key, amount) {
        checkExistence(key);
        
        values[key].value += arguments.length > 1 ? amount : 1;
        values[key].update();
    }
    
    /**
     * Increases the value for the Value under the given key, via addition for
     * Numbers or concatenation for Strings.
     * 
     * @param {String} key   The key of the Value.
     * @param {Mixed} [amount]   The amount to increase by (by default, 1).
     */
    self.decrease = function (key, value) {
        checkExistence(key);
        
        values[key].value -= arguments.length > 1 ? value : 1;
        values[key].update();
    }

    /**
     * Toggles whether a value is 1 or 0.
     * 
     * @param {String} key   The key of the Value.
     * @remarks Toggling requires the type to be a Boolean, since true becomes 
     *          "true" becomes NaN.
     */
    self.toggle = function (key) {
        checkExistence(key);
        values[key].value = values[key].value ? 0 : 1;
        values[key].update();
    }

    /**
     * Ensures a key exists in values, and throws an Error if it doesn't.
     * 
     * @param {String} key
     */
    function checkExistence(key) {
        if (!values.hasOwnProperty(key)) {
            throw new Error("Unknown key given to StatsHoldr: '" + key + "'.");
        }
    }
    

    /* HTML helpers
    */

    /**
     * @return {HTMLElement} The container Element, if it exists.
     */
    self.getContainer = function () {
        return container;
    };

    /**
     * Hides the container Element by setting its visibility to hidden.
     */
    self.hideContainer = function () {
        container.style.visibility = "hidden";
    };

    /**
     * Shows the container Element by setting its visibility to visible.
     */
    self.displayContainer = function () {
        container.style.visibility = "visible";
    };

    /**
     * Creates the container Element, which contains a child for each Value that
     * specifies hasElement to be true.
     * 
     * @param {Mixed[][]} containers   An Array representing the Element to be
     *                                 created and the children between it and 
     *                                 the contained Values. Each contained 
     *                                 Mixed[]  has a String tag name as its 
     *                                 first member, followed by any number of 
     *                                 Objects to apply via createElement.
     */
    function makeContainer(containers) {
        var output = createElement.apply(undefined, containers[0]),
            current = output,
            child, key, i;

        for (i = 1; i < containers.length; ++i) {
            child = createElement.apply(undefined, containers[i]);
            current.appendChild(child);
            current = child;
        }
        
        for (key in values) {
            if (values[key].hasElement) {
                child.appendChild(values[key].element);
            }
        }
        
        return output;
    }
    

    self.reset(settings || {});
}
/**
 * StringFilr.js
 * 
 * A general utility for retrieving data from an Object based on nested class
 * names. You can think of the internal "library" Object as a tree structure,
 * such that you can pass in a listing (in any order) of the path to data for 
 * retrieval.
 * 
 * @example
 * // Creating and using a StringFilr to store simple measurements.
 * var StringFiler = new StringFilr({
 *     "library": {
 *         "cup": "8oz",
 *         "gallon": "128oz",
 *         "half": {
 *             "cup": "4oz",
 *             "gallon": "64oz",
 *         }
 *     }
 * });
 * console.log(StringFiler.get("cup")); // "8oz"
 * console.log(StringFiler.get("half cup")); // "4oz"
 * 
 * @example 
 * // Creating and using a StringFilr to store order-sensitive information.
 * var StringFiler = new StringFilr({
 *     "library": {
 *         "milk": {
 *             "chocolate": "A lighter chocolate"
 *         },
 *         "chocolate": {
 *             "milk": "Milk mixed with syrup" 
 *         }
 *     }
 * });
 * console.log(StringFiler.get("milk chocolate")); // "A lighter chocolate"
 * console.log(StringFiler.get("chocolate milk")); // "Milk mixed with syrup"
 * 
 * @example 
 * // Creating and using a StringFilr to store a few people's measurements.
 * var StringFiler = new StringFilr({
 *     "normal": "color",
 *     "library": {
 *         "my": {
 *             "color": {
 *                 "eye": "blue-green",
 *                 "hair": "dirty blonde"
 *             },
 *             "major": "Computer Science"
 *         },
 *         "Mariah's": {
 *             "color": {
 *                 "eye": "brown",
 *                 "hair": "blonde"
 *             },
 *             "major": "Biomedical Engineering"
 *         },
 *         "Brandon's": {
 *             "color": {
 *                 "eye": "black",
 *                 "hair": "black"
 *             },
 *             "major": "Computer Science"
 *         }
 *     }
 * });
 * console.log(StringFiler.get("my major")); // "Computer Science"
 * console.log(StringFiler.get("Mariah's eye color")); // "brown"
 * console.log(StringFiler.get("Brandon's hair")); // "black"
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function StringFilr(settings) {
    "use strict";
    if (!this || this === window) {
        return new StringFilr(settings);
    }
    var self = this,

        // The library of data.
        library,

        // Listing of previously found lookups, for speed's sake.
        cache,

        // Optional default class to use when no suitable option is found.
        normal,

        // Whether to crash when a sub-object in reset has no normal child.
        requireNormalKey;

    /**
     * Resets the StringFilr.
     * 
     * @constructor
     * @param {Object} library   An Object containing data stored as children
     *                           of sub-Objects.
     * @param {String} [normal]   A String to use as a default key to recurse 
     *                            on. Defaults to undefined, so falsy.
     * @param {Boolean} [requireNormalKey]   Whether it's ok for the library to 
     *                                   have Objects that don't contain the
     *                                   normal key. Defaults to false.
     */
    self.reset = function (settings) {
        library = settings.library;
        normal = settings.normal;
        requireNormalKey = settings.requireNormalKey;
        
        cache = {};

        if (requireNormalKey) {
            if (!normal) {
                throw new Error("StringFilr is given requireNormalKey, but no normal class.");
            }
            
            var caught = findLackingNormal(library, "base", []);
            if (caught.length) {
                throw new Error("Found " + caught.length + " library "
                    + "sub-directories missing the normal: " 
                    + "\r\n  " + caught.join("\r\n  "));
            }
        }
    };

    /**
     * @return {Object} The base library of stored information.
     */
    self.getLibrary = function () {
        return library;
    };

    /**
     * @return {Object} The complete cache of cached output.
     */
    self.getCache = function () {
        return cache;
    };

    /**
     * Completely clears the cache Object.  
     */
    self.clearCache = function () {
        cache = {};
    };

    /**
     * Clears the cached entry for a key.
     * 
     * @param {String} key
     */
    self.clearCached = function(key) {
        if (normal) {
            key = key.replace(normal, '');
        }
        
        delete cache[key];
    }

    /**
     * Retrieves the deepest matching data in the library for a key. 
     * 
     * @param {String} key
     * @return {Mixed}
     */
    self.get = function(key) {
        var result;
        
        if (normal) {
            key = key.replace(normal, "");
        }

        // Quickly return a cached result if it exists
        if (cache.hasOwnProperty(key)) {
            return cache[key]
        };

        result = followClass(key.split(/\s+/g), library);

        cache[key] = result;
        return result;
    }

    /**
     * Utility helper to recursively check for tree branches in the library 
     * that don't have a key equal to the normal. For each sub-directory that
     * is caught, the path to it is added to output.
     * 
     * @param {Object} current   The current location being searched within
     *                           the library.
     * @param {String} path   The current path within the library.
     * @param {String[] output   An Array of the String paths to parts that
     *                           don't have a matching key.
     * @return {String[]} output
     */
    self.findLackingNormal = function (current, path, output) {
        var i;
        
        if (!current.hasOwnProperty(normal)) {
            output.push(path);
        }
        
        if (typeof current[i] === "object") {
            for (i in current) {
                findLackingNormal(current[i], path + " " + i, output);
            }
        }
        
        return output;
    };

    /**
     * Utility function to follow a path into the library (this is the driver 
     * for searching into the library). For each available key, if it matches
     * a key in current, it is removed from keys and recursion happens on the
     * sub-directory in current.
     * 
     * @param {String[]} keys   The currently available keys to search within.
     * @param {Object} current   The current location being searched within
     *                           the library.
     * @return {Mixed} The most deeply matched part of the library.
     */
    function followClass(keys, current) {
        var key, i;
        
        // If keys runs out, we're done
        if (!keys || !keys.length) {
            return current;
        }

        // For each key in the current array...
        for (i in keys) {
            key = keys[i];
            
            // ...if it matches, recurse on the other keys
            if (current.hasOwnProperty(key)) {
                keys.splice(i, 1);
                return followClass(keys, current[key]);
            }
        }

        // If no key matched, try the normal (default)
        if (normal && current.hasOwnProperty(normal)) {
            return followClass(keys, current[normal]);
        }
        
        // Nothing matches anything; we're done.
        return current;
    }

    /**
     * Simple utility function to get the last (deepest) parts of self.get 
     * results. This is useful because they're normally in reverse-order.
     * 
     * @param {Mixed} results 
     */
    function getResultsFinal(results) {
        if (typeof results[2] === "object") {
            return getResultsFinal(results[2]);
        }
        
        return results;
    }
    

    self.reset(settings || {});
}
/**
 * 
 */
function ThingHittr(settings) {
    "use strict";
    if (!this || this === window) {
        return new ThingHittr(settings);
    }
    var self = this,
        
        // GroupHoldr object used to hold the groups and manipulate contents
        GroupHolder,
        
        // QuadsKeepr object used for collision checking
        QuadsKeeper,
        
        // Names of groups to check collisions within
        groupNames,
        
        globalChecks,
        
        hitChecks,
        
        hitFunctions,
        
        hitCheckGenerators,
        
        globalCheckGenerators,
        
        hitFunctionGenerators,
        
        cachedGroupNames,
        
        cachedTypeNames;
    
    /**
     * 
     */
    self.reset = function(settings) {
        GroupHolder = settings.GroupHolder || new GroupHoldr(settings);
        QuadsKeeper = settings.QuadsKeeper || new GroupHoldr(settings);
        
        globalCheckGenerators = settings.globalCheckGenerators;
        hitCheckGenerators = settings.hitCheckGenerators;
        hitFunctionGenerators = settings.hitFunctionGenerators;
        
        hitChecks = {};
        globalChecks = {};
        hitFunctions = {};
        
        groupNames = settings.groupNames;
        cachedGroupNames = {};
        cachedTypeNames = {};
        
        self.checkHitsOf = {};
    };
    
    
    /* Simple gets
    */
    
    /**
     * 
     */
    self.getGroupHolder = function () {
        return GroupHolder;
    };
    
    /**
     * 
     */
    self.getQuadsKeeper = function () {
        return QuadsKeeper;
    };
    
    
    /* Runtime preparation
    */
    
    /**
     * 
     */
    self.cacheHitCheckGroup = function (groupName) {
        if (cachedGroupNames[groupName]) {
            return;
        }
        
        cachedGroupNames[groupName] = true;
        
        if (typeof globalCheckGenerators[groupName] !== "undefined") {
            globalChecks[groupName] = cacheGlobalCheck(groupName);
        }
    };
    
    /**
     * 
     */
    self.cacheHitCheckType = function (typeName, groupName) {
        if (cachedTypeNames[typeName]) {
            return;
        }
        
        if (typeof globalCheckGenerators[groupName] !== "undefined") {
            globalChecks[typeName] = cacheGlobalCheck(groupName);
        }
        
        if (typeof hitCheckGenerators[groupName] !== "undefined") {
            hitChecks[typeName] = cacheFunctionGroup(hitCheckGenerators, groupName);
        }
        
        if (typeof hitFunctionGenerators[groupName] !== "undefined") {
            hitFunctions[typeName] = cacheFunctionGroup(hitFunctionGenerators, groupName);
        }

        cachedTypeNames[typeName] = true;
        self.checkHitsOf[typeName] = self.generateHitsCheck(typeName);
    };
    
    /**
     * 
     */
    self.generateHitsCheck = function (typeName) {
        /**
         * 
         */
        return function checkHitsGenerated(thing) {
            var others, other, hitCheck,
                i, j, k;
             
            // Don't do anything if the thing shouldn't be checking
            if (!globalChecks[typeName](thing)) {
                return;
            }
            
            // For each quadrant this is in, look at that quadrant's groups
            for (i = 0; i < thing.numquads; i += 1) {
                for (j = 0; j < groupNames.length; j += 1) {
                    others = thing.quadrants[i].things[groupNames[j]];
                    hitCheck = hitChecks[typeName][groupNames[j]];
                    
                    // If no hit check exists for this combo, don't bother
                    if (!hitCheck) {
                        continue;
                    }
                    
                    // For each 'other' in this group that should be checked...
                    for (k = 0; k < others.length; k += 1) {
                        other = others[k];
                        
                        // If the two are the same, breaking prevents double hits
                        if (thing === other) { 
                            break;
                        }
                        
                        // Do nothing if these two shouldn't be colliding
                        if (!globalChecks[other.grouptype](other)) {
                            continue;
                        }
                        
                        // If they do hit, great! Do the corresponding hitFunction
                        if (hitCheck(thing, other)) {
                            hitFunctions[typeName][other.grouptype](thing, other);
                        }
                    }
                }
            }
        };
    };
    
    /**
     * 
     */
    function cacheGlobalCheck(groupName) {
        return globalCheckGenerators[groupName]();
    };
    
    /**
     * 
     */
    function cacheFunctionGroup(functions, groupName) {
        var group = functions[groupName],
            output = {},
            i;
        
        for (i in group) {
            output[i] = group[i]();
        }
        
        return output;
    };
    
    
    self.reset(settings || {});
}
/**
 * TimeHandlr.js
 * 
 * A timed events library intended to provide a flexible alternative to 
 * setTimeout and setInterval that respects pauses and resumes. Events (which 
 * are really Functions with arguments pre-set) are assigned integer timestamps,
 * and can be set to repeat a number of times determined by a number or callback
 * Function. Functionality to automatically "cycle" between certain classes of
 * an Object is also provided, similar to jQuery's class toggling.
 * 
 * @example
 * // Using a TimeHandler to simulate setTimeout (albeit slowly).
 * var TimeHandler = new TimeHandlr();
 * TimeHandler.addEvent(console.log.bind(console), 500, "Hello world!");
 * setInterval(TimeHandler.handleEvents);
 * 
 * @example
 * // Using a TimeHandler to simulate setInterval (albeit slowly) seven times.
 * var TimeHandler = new TimeHandlr();
 * TimeHandler.addEventInterval(
 *     console.log.bind(console), 500, 7, "Hello world!"
 * );
 * setInterval(TimeHandler.handleEvents);
 * 
 * @example
 * // Using a TimeHandler to continuously toggle an element's class between
 * // "active" and "hidden" every second.
 * var TimeHandler = new TimeHandlr();
 * TimeHandler.addClassCycle(
 *     document.getElementById("test"),
 *     [ "active", "hidden" ],
 *     "toggling",
 *     1
 * );
 * setInterval(TimeHandler.handleEvents, 1000);
 * 
 * @author "Josh Goldberg" <josh@fullscreenmario.com>
 */
function TimeHandlr(settings) {
    "use strict";
    if (!this || this === window) {
        return new TimeHandlr(settings);
    }
    var self = this,

        // The current (most recently reached) game time
        time,

        // An int->event hash table of events to be run
        events,

        // Default time separations
        timingDefault,

        // Default attribute names, so they can be overridden
        keyCycles,
        keyClassName,
        keyOnSpriteCycleStart,
        keyDoSpriteCycleStart,
        keyCycleCheckValidity,

        // Whether a copy of settings should be made in setSpriteCycle
        copyCycleSettings,

        // Function handlers
        addClass,
        removeClass;
    
    /**
     * 
     */
    self.reset = function (settings) {
        time = 0;
        events = {};

        timingDefault = settings.timingDefault || 7;

        keyCycles = settings.keyCycles || "cycles";
        keyClassName = settings.keyClassName || "className";
        keyOnSpriteCycleStart = settings.keyOnSpriteCycleStart || "onSpriteCycleStart";
        keyDoSpriteCycleStart = settings.keyDoSpriteCycleStart || "doSpriteCycleStart";
        keyCycleCheckValidity = settings.keyCycleCheckValidity;
        
        copyCycleSettings = typeof settings.copyCycleSettings === "undefined"
            ? true : settings.copyCycleSettings;

        addClass = settings.classAdd || addClassGeneric;
        removeClass = settings.classRemove || removeClassGeneric;
    }

    
    /* Simple gets
    */
     
    /**
     * @return {Number} The current time.
     */
    self.getTime = function () {
        return time;
    };
    
    /**
     * @return {Object} The catalog of events, keyed by their time triggers.
     */
    self.getEvents = function () {
        return events;
    };

    
    /* Event adding
    */
    
    /**
     * Basic container for events information. These are stored in the events
     * Object, keyed by time.
     * 
     * @constructor
     * @param {Function} callback   The callback to be run when time is equal to
     *                              this event's key in events.
     * @param {Number} timeDelay   The time at which to call this event.
     * @param {Number} timeRepeat   How long between calls (irrelevant if repeat
     *                              is 1, but useful for re-adding).
     * @param {Array} args   Arguments for the callback to be run with.
     * @param {Number} repeat   How many times this should repeat. Infinity is
     *                          an acceptable option.
     */
    function Event(callback, timeDelay, timeRepeat, args, repeat) {
        this.callback = callback;
        this.timeDelay = timeDelay;
        this.timeRepeat = timeRepeat;
        this.args = args;
        this.repeat = repeat;
    }

    /**
     * Adds an event in a manner similar to setTimeout, though any arguments 
     * past the timeDelay will be passed to the event callback. The added event
     * is inserted into the events container and is set to only repeat once.
     * 
     * @param {Function} callback   The callback to be run after some time.
     * @param {Number} [timeDelay]   How long from now to run the callback, (1
     *                               by default).
     * @example
     * // Scheduling a console log 7 steps in the future two different ways.
     * TimeHandler.addEvent(console.log.bind(console, "Hello"), 7);
     * TimeHandler.addEvent(console.log.bind(console), 7, "world!");
     */
    self.addEvent = function (callback, timeDelay) {
        var event, args;
        
        // Make sure callback is actually a function
        if (typeof callback !== "function") {
            throw new Error("Invalid event given to addEvent.");
        }
        
        timeDelay = timeDelay || 1;

        // Arguments exclude callback and timeDelay
        args = Array.prototype.slice.call(arguments, 2);

        // Add the event to events, then return it
        event = new Event(callback, time + timeDelay, timeDelay, args, 1);
        insertEvent(event, event.timeDelay);
        return event;
    };
    
    /**
     * Adds an event in a manner similar to setInterval, though any arguments
     * past the numRepeats will be passed to the event callback. The added event
     * is inserted into the events container and is set to repeat a numRepeat
     * amount of times, though if the callback returns true, it will stop.
     * 
     * @param {Function} callback   The callback to be run some number of times.
     *                              If it returns true, repetition stops.
     * @param {Number} [timeDelay]   How long from now to run the callback, and
     *                               how many steps between each call (1 by
     *                               default).
     * @param {Number} [numRepeats]   How many times to run the event. Infinity
     *                                is an acceptable option (1 by default).
     * @example 
     * // Scheduling console logs 1ms apart 7 times, two different ways.
     * TimeHandler.addEventInterval(console.log.bind(console, "Hello"), 1, 7);
     * TimeHandler.addEventInterval(console.log.bind(console), 1, 7, "world!");
     */
    self.addEventInterval = function (callback, timeDelay, numRepeats) {
        var event, args;
        
        // Make sure callback is actually a function
        if (typeof callback !== "function") {
            throw new Error("Invalid event given to addEventInterval.");
        }
        
        timeDelay = timeDelay || 1;
        numRepeats = numRepeats || 1;

        // Arguments exclude callback, timeDelay, and numRepeats
        args = Array.prototype.slice.call(arguments, 3);

        // Add the event to events, then return it
        // It may need to have a reference to the event from the function
        event = new Event(callback, time + timeDelay, timeDelay, args, numRepeats);
        callback.event = event;
        insertEvent(event, event.timeDelay);
        return event;
    };
    
    /**
     * Fancy wrapper around self.addEventInterval. It delays starting the event
     * until the current time is modular with the repeat delay, so that all 
     * event intervals synched to the same period are in unison. This is useful 
     * for things like sprite animations (like Mario blocks) that would look odd
     * when out of sync.
     * 
     * @param {Function} callback   The callback to be run some number of times.
     *                              If it returns true, repetition stops.
     * @param {Number} [timeDelay]   How long from now to run the callback, and
     *                               how many steps between each call (1 by
     *                               default).
     * @param {Number} [numRepeats]   How many times to run the event. Infinity
     *                                is an acceptable option (1 by default).
     * @param {Mixed} thing   Some data container to be manipulated. Using the
     *                        block example, this would be the block itself.
     * @param {Mixed} settings   A container for repetition settings. This
     *                           appears to only require a .length Number
     *                           attribute, to calculate the time until launch.
     *                           In the block example, this would be an Array
     *                           containing the ordered sprite names of the 
     *                           block (dim, medium, etc.).
     * @example
     * // Adding a synched sprite cycle for a Mario-style block.
     * TimeHandler.addEventIntervalSynched(
     *     function (thing, sprites) {
     *         console.log("Should be", sprites[thing.spriteNum]);
     *         thing.spriteNum = (thing.spriteNum += 1) % sprites.length;
     *     },
     *     7,
     *     Infinity,
     *     { "thing": "Block", "spriteNum": 0 },
     *     [ "dim", "medium", "high", "high", "medium", "dim" ]
     * );
     * 
     * @todo Rearrange this and setSpriteCycle to remove the "thing" argument.
     */
    self.addEventIntervalSynched = function (callback, timeDelay, numRepeats, thing, settings) {
        var calctime = timeDelay * settings.length,
            entryTime = Math.ceil(time / calctime) * calctime,
            scope = self,
            args = arguments,
            adder = Function.apply.bind(self.addEventInterval, scope, args);
        
        timeDelay = timeDelay || 1;
        numRepeats = numRepeats || 1;
        
        // If there's no difference in times, you're good to go
        if (entryTime === time) {
            return adder();
        }
        // Otherwise it should be delayed until the time is right
       self.addEvent(adder, entryTime - time, scope, arguments, thing);
    };

    
    /* General event handling
    */

    /**
     * Meaty often-called function to increment time and handle all events at
     * the new time. For each event, its callback is run, and if that returned
     * true, or the event's .repeat Number runs out, the event stops repeating.
     */
    self.handleEvents = function () {
        var currentEvents, event, length, i;
        
        time += 1;
        currentEvents = events[time];
        
        // If there isn't anything to run, don't even bother
        if (!currentEvents) {
            return; 
        }
        
        // For each event currently scheduled:
        for (i = 0, length = currentEvents.length; i < length; ++i) {
            event = currentEvents[i];

            // Call the function, using apply to pass in arguments dynamically
            // If running it returns true, it's done. Otherwise, check the 
            // event's .repeat to see if it should repeat.
            if (event.repeat > 0 && !event.callback.apply(this, event.args)) {

                // It may have a count changer (typically keyCycles do that)
                if (event.count_changer) {
                    event.count_changer(event);
                }

                // If repeat is a function, running it determines whether to repeat
                if (event.repeat instanceof Function) {
                    // This is where the event's callback is actually run!
                    if (event.repeat.call(event)) {
                        event.count += event.timeRepeat;
                        insertEvent(event, event.timeDelay);
                    }
                }
                // It's a Number: decrement it, and repeat if it's > 0.
                else {
                    event.repeat -= 1;
                    if (event.repeat > 0) {
                        event.timeDelay += event.timeRepeat;
                        insertEvent(event, event.timeDelay);
                    }
                }
            }
        }

        // Once all these events are done, ignore the memory
        delete events[time];
    };

    /**
     * Cancels an event by making its .repeat value 0.
     * 
     * @param {Event} event   The event to cancel.
     */
    self.cancelEvent = function (event) {
        event.repeat = 0;
    };

    /**
     * Cancels all events by clearing the events Object.
     */
    self.cancelAllEvents = function () {
        events = {};
    };

    /**
     * Cancels the class cycle of a thing by finding the cycle under the thing's
     * keyCycles and making it appear to be empty.
     * 
     * @param {Mixed} thing   The thing (any data structure) whose cycle is to 
     *                        be cancelled.
     * @param {String} name   The name of the cycle to be cancelled.
     */
    self.cancelClassCycle = function (thing, name) {
        var cycle;
        
        if (!thing[keyCycles] || !thing[keyCycles][name]) {
            return;
        }
        
        cycle = thing[keyCycles][name];
        cycle.length = 1;
        cycle[0] = false;
        
        delete thing[keyCycles][name];
    };

    /**
     * Cancels all class keyCycles of a thing under the thing's sycles.
     * 
     * @param {Mixed} thing   The thing (any data structure) whose keyCycles are to 
     *                        be cancelled.
     */
    self.cancelAllCycles = function (thing) {
        var keyCycles = thing[keyCycles],
            name, cycle;
        
        for (name in keyCycles) {
            cycle = keyCycles[name];
            cycle.length = 1;
            cycle[0] = false;
            delete keyCycles[name];
        }
    };

    
    /* Sprite keyCycles
    */

    /**
     * Adds a sprite cycle (settings) for a thing, to be referenced by the given
     * name in the thing's keyCycles Object. The sprite cycle switches the thing's
     * class using addClass and removeClass (which can be given by the user in
     * reset, but default to internally defined Functions).
     * 
     * @param {Mixed} thing   The object whose class is to be cycled.
     * @param {Mixed} settings   A container for repetition settings. This
     *                           appears to only require a .length Number
     *                           attribute, so Arrays are optimal. Generally,
     *                           this should be an Array containing the ordered
     *                           sprite names to cycle through on the thing.
     * @param {String} name   The name of the cycle, to be referenced in the
     *                        thing's keyCycles Object.
     * @param {Mixed} timing   The way to determine how often to do the cycle.
     *                         This is normally a Number, but can also be a 
     *                         Function (for variable cycle speeds).
     * @example
     * // Adding a sprite cycle for a Mario-style block.
     * TimeHandler.addClassCycle(
     *     { "thing": "Block", "spriteNum": 0 },
     *     [ "dim", "medium", "high", "high", "medium", "dim" ],
     *     "glowing",
     *     7
     * );
     */
    self.addClassCycle = function (thing, settings, name, timing) {
        var isTimingFunction = typeof timing === "function",
            cycle;
        
        // Make sure the object has a holder for keyCycles...
        if (!thing[keyCycles]) {
            thing[keyCycles] = {};
        }
        // ...and nothing previously existing for that name
        self.cancelClassCycle(thing, name);

        name = name || 0;

        // Set the cycle under thing[keyCycles][name]
        cycle = thing[keyCycles][name] = setSpriteCycle(
            thing, settings, isTimingFunction ? 0 : timing
        );

        // If there is a timing function, make it the count changer
        if (cycle.event && isTimingFunction) {
            cycle.event.count_changer = timing;
        }

        // Immediately run the first class cycle, then return
        cycleClass(thing, settings);
        return cycle;
    };

    /**
     * Adds a synched sprite cycle (settings) for a thing, to be referenced by
     * the given name in the thing's keyCycles Object, and in tune with all other
     * keyCycles of the same period. The sprite cycle switches the thing's class 
     * using addClass and removeClass (which can be given by the user in reset,
     * but default to internally defined Functions).
     * 
     * @param {Mixed} thing   The object whose class is to be cycled.
     * @param {Mixed} settings   A container for repetition settings. This
     *                           appears to only require a .length Number
     *                           attribute, so Arrays are optimal. Generally,
     *                           this should be an Array containing the ordered
     *                           sprite names to cycle through on the thing.
     * @param {String} name   The name of the cycle, to be referenced in the
     *                        thing's keyCycles Object.
     * @param {Mixed} timing   The way to determine how often to do the cycle.
     *                         This is normally a Number, but can also be a 
     *                         Function (for variable cycle speeds).
     * @example
     * // Adding a sprite cycle for a Mario-style block.
     * TimeHandler.addClassCycleSynched(
     *     { "thing": "Block", "spriteNum": 0 },
     *     [ "dim", "medium", "high", "high", "medium", "dim" ],
     *     "glowing",
     *     7
     * );
     */
    self.addClassCycleSynched = function (thing, settings, name, timing) {
        var cycle;
        
        // Make sure the object has a holder for keyCycles...
        if (!thing[keyCycles]) {
            thing[keyCycles] = {};
        }
        // ...and nothing previously existing for that name
        self.cancelClassCycle(thing, name);

        // Set the cycle under thing[keyCycles][name]
        name = name || 0;
        cycle = thing[keyCycles][name] = setSpriteCycle(thing, settings, timing, true);

        // Immediately run the first class cycle, then return
        cycleClass(thing, thing[keyCycles][name]);
        return cycle;
    };

    /**
     * Initialization utility for sprite keyCycles of things. The settings are 
     * added at the right time (immediately if not synched, or on a delay if 
     * synched).
     * 
     * @param {Mixed} thing   The object whose class is to be cycled.
     * @param {Mixed} settings   A container for repetition settings. This
     *                           appears to only require a .length Number
     *                           attribute, so Arrays are optimal. Generally,
     *                           this should be an Array containing the ordered
     *                           sprite names to cycle through on the thing.
     * @param {Mixed} timing   The way to determine how often to do the cycle.
     *                         This is normally a Number, but can also be a 
     *                         Function (for variable cycle speeds).
     * @param {Boolean} [synched]   Whether the 
     */
    function setSpriteCycle(thing, settings, timing, synched) {
        var callback;
        
        // If required, make a copy of settings so if multiple objects are made
        // with the same settings, object, they don't override each other's
        // attributes: particularly settings.loc.
        if (copyCycleSettings) {
            settings = makeSettingsCopy(settings);
        }

        // Start off before the beginning of the cycle
        settings.loc = settings.oldclass = -1;

        // Let the object know to start the cycle when needed
        callback = synched ? self.addEventIntervalSynched : self.addEventInterval;
        thing[keyOnSpriteCycleStart] = function () {
            callback(cycleClass, timing || timingDefault, Infinity, thing, settings);
        };

        // If it should already start, do that
        if (thing[keyDoSpriteCycleStart]) {
            thing[keyOnSpriteCycleStart]();
        }

        return settings;
    }

    /**
     * Moves an object from its current class in the sprite cycle to the next.
     * If the next object is === false, or the repeat function returns false, 
     * stop by returning true.
     * 
     * @param {Mixed} thing   The object whose class is to be cycled.
     * @param {Mixed} settings   A container for repetition settings. This
     *                           appears to only require a .length Number
     *                           attribute, so Arrays are optimal. Generally,
     *                           this should be an Array containing the ordered
     *                           sprite names to cycle through on the thing.
     * @return {Boolean} Whether the class cycle should stop (normally false).
     */
    function cycleClass(thing, settings) {
        var current, name;
        
        // If anything has been invalidated, return true to stop
        if (
            !thing || !settings || !settings.length
            || (keyCycleCheckValidity && !thing[keyCycleCheckValidity])
        ) {
            return true;
        }

        // Get rid of the previous class, from settings (-1 by default)
        if (settings.oldclass !== -1 && settings.oldclass !== "") {
            removeClass(thing, settings.oldclass);
        }

        // Move to the next location in settings, as a circular list
        settings.loc = (settings.loc += 1) % settings.length;

        // Current is the sprite, bool, or function currently added and/or run
        current = settings[settings.loc];
        
        // If it isn't falsy, (run if needed and) set it as the next name
        if (current) {
            name = current instanceof Function ? current(thing, settings) : current;

            // If the next name is a string, set that as the old class, and add it
            if (typeof name === "string") {
                settings.oldclass = name;
                addClass(thing, name);
                return false;
            }
            // For non-strings, return stop if the name evaluated to be false
            else {
                return (name === false);
            }
        }
        // Since current was falsy, stop if it's explicitly === false 
        else {
            return (current === false);
        }
    }
    

    /* Utility functions
    */

    // Quick handler to add an event at a particular time
    // An array must exist so multiple events can be at the same time
    
    /**
     * Quick handler to add an event to events at a particular time. 
     * 
     * @param {Event} event
     * @param {Number} time
     */
    function insertEvent(event, time) {
        if (!events[time]) {
            events[time] = [event];
        } else {
            events[time].push(event);
        }
        return events[time];
    }

    /**
     * Creates a copy of an Object/Array. This is useful for passing settings
     * Objects by value instead of reference.
     * 
     * @param {Mixed} original
     */
    function makeSettingsCopy(original) {
        var output = new original.constructor(),
            i;
        
        for (i in original) {
            if (original.hasOwnProperty(i)) {
                output[i] = original[i];
            }
        }
        
        return output;
    }

    /**
     * Default addClass Function, made to work on HTML elements.
     * 
     * @param {Mixed} element   The element whose class is being modified.
     * @param {String} string   The string to be added to the element's class.
     */
    function addClassGeneric(element, string) {
        element[keyClassName] += ' ' + string;
    }

    /**
     * Default removeClass Function, made to work on HTML elements.
     * 
     * @param {Mixed} element   The element whose class is being modified.
     * @param {String} string   The string to be removed from the element's 
     *                          class.
     */
    function removeClassGeneric(element, string) {
        element[keyClassName] = element[keyClassName].replace(string, '');
    }

    
    self.reset(settings || {});
}
/**
 * 
 */
function UserWrappr(settings) {
    if (!this || this === window) {
    "use strict";
        return new UserWrappr(settings);
    }
    var self = this,
        
        GameStartrConstructor,
        
        StatsHolder,
        
        GameStarter,
        
        helpSettings,
        
        globalName,
        
        globalNameAlias,
        
        generators,
        
        allPossibleKeys,
        
        size,
        
        sizes,
        
        currentSize,
        
        isFullScreen,
        
        documentElement = document.documentElement,
        
        requestFullScreen = (
            documentElement.requestFullScreen
            || documentElement.webkitRequestFullScreen
            || documentElement.mozRequestFullScreen
            || documentElement.msRequestFullscreen
            || function () {}
        ).bind(documentElement),
        
        cancelFullScreen = (
            document.cancelFullScreen
            || document.webkitCancelFullScreen
            || document.mozCancelFullScreen
            || document.msCancelFullscreen
            || function () {}
        ).bind(document);
    
    /**
     * 
     */
    self.reset = function (settings) {
        var customs = settings.customs || {};
        GameStartrConstructor = (
            settings.GameStartrConstructor || GameStartrConstructor
        );
        
        helpSettings = settings.helpSettings;
        globalName = settings.globalName;
        globalNameAlias = helpSettings.globalNameAlias;
        
        isFullScreen = false;
        sizes = settings.sizes;
        currentSize = settings.currentSize || settings.sizeDefault;
        
        GameStartrConstructor.prototype.proliferate(
            customs,
            settings.sizes[customs.size || currentSize],
            true
        );
        
        generators = {
            "generatorOptionsButtons": generatorOptionsButtons,
            "generatorOptionsTable": generatorOptionsTable,
            "generatorLevelEditor": generatorLevelEditor,
            "generatorMapsGrid": generatorMapsGrid
        };
        
        allPossibleKeys = settings.allPossibleKeys ||  [
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
            'up', 'right', 'bottom', 'left', 'space', 'shift', 'ctrl'
        ];
        
        self.resetGameStarter(customs);
    };
    
    /**
     * 
     */
    self.resetGameStarter = function (customs) {
        loadGameStarter(fixCustoms(customs || {}));
        loadControls(settings);
        
        window[settings.globalName || "GameStarter"] = GameStarter;
        GameStarter.UserWrapper = self;
    }
    
    
    /* Simple gets
    */
    
    /**
     * 
     */
    self.getGameStarter = function () {
        return GameStarter;
    };
    
    /**
     * 
     */
    self.getStatsHolder = function () {
        return StatsHolder;
    };
    
    
    /* Help dialog
    */
    
    /**
     * 
     */
    self.displayHelpMenu = function () {
        helpSettings.openings.forEach(logHelpString);
    };
    
    /**
     * 
     */
    self.displayHelpOptions = function () {
        logHelpString(
            "To focus on a group, enter '" 
            + globalName 
            + ".UserWrapper.displayHelpOption(<group-name>);"
        );
        
        Object.keys(helpSettings.options).forEach(self.displayHelpGroupSummary);
        
        logHelpString(
            "\nTo focus on a group, enter '" 
            + globalName 
            + ".UserWrapper.displayHelpOption(<group-name>);"
        );
    };
    
    /**
     * 
     */
    self.displayHelpGroupSummary = function (optionName) {
        var actions = helpSettings.options[optionName],
            strings = [],
            maxTitleLength = 0,
            action, i;
        
        console.log("\n" + optionName);
        
        for (i = 0; i < actions.length; i += 1) {
            maxTitleLength = Math.max(
                maxTitleLength, 
                filterHelpString(actions[i].title).length
            );
        }
        
        for (i = 0; i < actions.length; i += 1) {
            action = actions[i];
            console.log(
                padStringRight(filterHelpString(action.title), maxTitleLength)
                + " ... " + action.description
            );
        }
    };
    
    /**
     * 
     */
    self.displayHelpOption = function (optionName) {
        var actions = helpSettings.options[optionName],
            action, maxExampleLength, example, i, j;

        for (i = 0; i < actions.length; i += 1) {
            action = actions[i];
            maxExampleLength = 0;
            logHelpString(action.title);
            
            for (j = 0; j < action.examples.length; j += 1) {
                example = action.examples[j];
                maxExampleLength = Math.max(
                    maxExampleLength,
                    filterHelpString("    " + example.code).length
                );
            }
            
            for (j = 0; j < action.examples.length; j += 1) {
                example = action.examples[j];
                logHelpString(
                    padStringRight(
                        filterHelpString("    " + example.code), 
                        maxExampleLength
                    )
                    + "  // " + example.comment
                );
            }
            
            console.log("\n");
        }
    };
    
    /**
     * 
     */
    function logHelpString(string) {
        console.log(filterHelpString(string));
    }
    
    /**
     * 
     */
    function filterHelpString(string) {
        return string.replace(new RegExp(globalNameAlias, "g"), globalName);
    }
    
    /**
     * 
     */
    function padStringRight(string, length) {
        var diff = 1 + length - string.length;
        
        if (diff <= 0) {
            return string;
        }
        
        return string + Array.call(Array, diff).join(' ');
    }
    
    
    /* Control section loaders
    */
    
    /**
     * 
     */
    var loadGameStarter = function (customs) {
        var section = document.getElementById("game");
        
        GameStarter = new GameStartrConstructor(customs);
        
        section.textContent = "";
        section.appendChild(GameStarter.container);
        
        GameStarter.proliferate(document.body, {
            "onkeydown": GameStarter.InputWriter.makePipe("onkeydown", "keyCode"),
            "onkeyup": GameStarter.InputWriter.makePipe("onkeyup", "keyCode")
        });
        
        GameStarter.proliferate(section, {
            "onmousedown": GameStarter.InputWriter.makePipe("onmousedown", "which"),
            "oncontextmenu": GameStarter.InputWriter.makePipe("oncontextmenu", null, true)
        });

        GameStarter.gameStart();
    };
    
    /**
     * 
     */
    var loadControls = function (settings) {
        var section = document.getElementById("controls"),
            schemas = settings.schemas,
            length = schemas.length,
            i;
        
        StatsHolder = new StatsHoldr({
            "prefix": globalName + "::UserWrapper::StatsHolder",
            "proliferate": GameStarter.proliferate,
            "createElement": GameStarter.createElement
        });
        
        section.textContent = "";
        section.className = "length-" + length;
        
        for (i = 0; i < length; i += 1) {
            section.appendChild(loadControlDiv(schemas[i]));
        }
    };
    
    /** 
     * 
     */
    var loadControlDiv = function (schema) {
        var control = document.createElement("div"),
            heading = document.createElement("h4"),
            inner = document.createElement("div");
        
        control.className = "control";
        control.id = "control-" + schema.title;
        
        heading.textContent = schema.title;
        
        inner.className = "control-inner";
        inner.appendChild(generators["generator" + schema.generator](schema));
        
        control.appendChild(heading);
        control.appendChild(inner);
        
        // Touch events often propogate to children before the control div has
        // been fully extended. Setting the "active" attribute fixes that.
        control.onmouseover = setTimeout.bind(undefined, function () {
            control.setAttribute("active", "on");
        }, 35);
        
        control.onmouseout = function () {
            control.setAttribute("active", "off");
        };
        
        return control;
    };
    
    
    /* Generator functions
    */
    
    /**
     * 
     */
    var generatorOptionsButtons = function (schema) {
        var output = document.createElement("div"),
            options = schema.options instanceof Function 
                ? schema.options.call(self, GameStarter)
                : schema.options,
            optionKeys = Object.keys(options),
            keyActive = schema.keyActive || "active",
            classNameStart = "select-option options-button-option",
            option, element, i;
    
        function getParentControlDiv(element) {
            if (element.className === "control") {
                return element;
            } else if (!element.parentNode) {
                return undefined;
            } 
            return getParentControlDiv(element.parentNode);
        }
        
        output.className = "select-options select-options-buttons";
        
        for (i = 0; i < optionKeys.length; i += 1) {
            option = options[optionKeys[i]];
            
            element = document.createElement("div");
            element.className = classNameStart;
            element.textContent = optionKeys[i];
            
            element.onclick = function (schema, element) {
                if (getParentControlDiv(element).getAttribute("active") !== "on") {
                    return;
                }
                schema.callback.call(self, GameStarter, schema, element);
                
                if (element.getAttribute("option-enabled") == "true") {
                    element.setAttribute("option-enabled", false);
                    element.className = classNameStart + " option-disabled";
                } else {
                    element.setAttribute("option-enabled", true);
                    element.className = classNameStart + " option-enabled";
               }
            }.bind(undefined, schema, element);
            
            if (option[keyActive]) {
                element.className += " option-enabled";
                element.setAttribute("option-enabled", true);
            } else if (schema.assumeInactive) {
                element.className += " option-disabled";
                element.setAttribute("option-enabled", false);
            } else {
                element.setAttribute("option-enabled", true);
            }
            
            output.appendChild(element);
        }
        
        return output;
    }
    
    /**
     * 
     */
    var generatorOptionsTable = (function () {
        function setBooleanInput(input, details, schema) {
            var status = details.source.call(self, GameStarter) ? "on" : "off",
                statusString = status === "on" ? "enabled" : "disabled";
            
            input.className = "select-option options-button-option option-" + statusString;
            input.textContent = status;
            
            input.onclick = function () {
                input.setValue(newStatus = input.textContent === "off");
            };
            
            input.setValue = function (newStatus) {
                if (newStatus.constructor === String) {
                    if (newStatus === "false" || newStatus === "off") {
                        newStatus = false;
                    } else if(newStatus === "true" || newStatus === "on") {
                        newStatus = true;
                    }
                }
                
                if (newStatus) {
                    details.enable.call(self, GameStarter);
                    input.textContent = "on";
                    input.className = input.className.replace("disabled", "enabled");
                } else {
                    details.disable.call(self, GameStarter);
                    input.textContent = "off";
                    input.className = input.className.replace("enabled", "disabled");
                }
                
                if (details.storeLocally) {
                    storeLocalStorageValue(input, newStatus.toString());
                }
            };
            
            return input;
        }
        
        function setKeyInput(input, details, schema) {
            var values = details.source.call(self, GameStarter),
                children = [],
                child, i, j;
            
            for (i = 0; i < values.length; i += 1) {
                child = document.createElement("select");
                child.className = "options-key-option";
                
                for (j = 0; j < allPossibleKeys.length; j += 1) {
                    child.appendChild(new Option(allPossibleKeys[j]));
                }
                child.value = child.valueOld = values[i].toLowerCase();
                
                child.onchange = (function (child) {
                    details.callback.call(
                        self, GameStarter, child.valueOld, child.value
                    );
                    if (details.storeLocally) {
                        storeLocalStorageValue(child, child.value);
                    }
                }).bind(undefined, child);
                
                children.push(child);
                input.appendChild(child);
            }
            
            return children;
        }
        
        function setNumberInput(input, details, schema) {
            var child = document.createElement("input");
            
            child.type = "number";
            child.value = Number(details.source.call(self, GameStarter));
            child.min = details.minimum || 0;
            child.max = details.maximum || Math.max(details.minimum + 10, 10);
            
            child.onchange = child.oninput = function () {
                if (child.checkValidity()) {
                    details.update.call(self, GameStarter, child.value);
                }
                if (details.storeLocally) {
                    storeLocalStorageValue(child, child.value);
                }
            };
            
            input.appendChild(child);
            
            return child;
        }
        
        function setSelectInput(input, details, schema) {
            var child = document.createElement("select"),
                options = details.options(),
                i;
            
            for (i = 0; i < options.length; i += 1) {
                child.appendChild(new Option(options[i]));
            }
            
            child.value = details.source.call(self, GameStarter);
            
            child.onchange = function () {
                details.update.call(self, GameStarter, child.value);
                child.blur();
                
                if (details.storeLocally) {
                    storeLocalStorageValue(child, child.value);
                }
            };
            
            input.appendChild(child);
            
            return child;
        }
        
        var setScreenSizeInput = (function () {
            var detailsOptions = function () {
                    return Object.keys(sizes)
                },
                detailsSource = function () {
                    return currentSize;
                },
                detailsUpdate = function (GameStarter, value) {
                    if (value === currentSize) {
                        return;
                    }
                    
                    var sizing = sizes[value],
                        customs = fixCustoms(sizing);
                    
                    currentSize = value;
                    
                    if (sizing.full) {
                        requestFullScreen();
                        isFullScreen = true;
                    } else if(isFullScreen) {
                        cancelFullScreen();
                        isFullScreen = false;
                    }
                    
                    GameStarter.container.parentNode.removeChild(GameStarter.container);
                    self.resetGameStarter(customs);
                };
            
            return function (input, details, schema) {
                var child;
                
                details.options = detailsOptions;
                details.source = detailsSource;
                details.update = detailsUpdate;
                child = setSelectInput(input, details, schema);
                
                return child;
            };
        })();
        
        var optionTypes = {
            "Boolean": setBooleanInput,
            "Keys": setKeyInput,
            "Number": setNumberInput,
            "Select": setSelectInput,
            "ScreenSize": setScreenSizeInput
        };

        return function (schema) {
            var output = document.createElement("div"),
                table = document.createElement("table"),
                details, row, label, input, child,
                i;
            
            output.className = "select-options select-options-table";
            
            if (schema.options) {
                for (i = 0; i < schema.options.length; i += 1) {
                    row = document.createElement("tr");
                    label = document.createElement("td");
                    input = document.createElement("td");
                    
                    details = schema.options[i],
                    
                    label.className = "options-label-" + details.type;
                    label.textContent = details.title;
                    
                    input.className = "options-cell-" + details.type;
                    
                    row.appendChild(label);
                    row.appendChild(input);
                    
                    child = optionTypes[schema.options[i].type](input, details, schema);
                    if (details.storeLocally) {
                        ensureLocalStorageValue(child, details, schema);
                    }
                    
                    table.appendChild(row);
                }
            }
            
            output.appendChild(table);
            
            if (schema.actions) {
                for (i = 0; i < schema.actions.length; i += 1) {
                    row = document.createElement("div");
                    
                    details = schema.actions[i];
                    
                    row.className = "select-option options-button-option";
                    row.textContent = details.title;
                    row.onclick = details.action.bind(self, GameStarter);
                    
                    output.appendChild(row);
                }
            }
            
            return output;
        };
    })();
    
    /**
     * 
     */
    var generatorLevelEditor = (function () {
        function createUploaderDiv() {
            var uploader = document.createElement("div"),
                input = document.createElement("input");
            
            uploader.className = "select-option select-option-large options-button-option";
            uploader.textContent = "Click to upload and continue your editor files!";
            uploader.setAttribute("textOld", uploader.textContent);
            
            input.type = "file";
            input.className = "select-upload-input";
            input.onchange = handleFileDrop.bind(undefined, input, uploader);
            
            uploader.ondragenter = handleFileDragEnter.bind(undefined, uploader);
            uploader.ondragover = handleFileDragOver.bind(undefined, uploader);
            uploader.ondragleave = input.ondragend = handleFileDragLeave.bind(undefined, uploader);
            uploader.ondrop = handleFileDrop.bind(undefined, input, uploader);
            uploader.onclick = input.click.bind(input);
            
            uploader.appendChild(input);
            
            return uploader;
        };
        
        function handleFileDragEnter(uploader, event) {
            if (event.dataTransfer) {
                event.dataTransfer.dropEFfect = "copy";
            }
            uploader.className += " hovering";
        }
        
        function handleFileDragOver(uploader, event) {
            event.preventDefault();
            return false;
        }
        
        function handleFileDragLeave(uploader, event) {
            if (event.dataTransfer) {
                event.dataTransfer.dropEffect = "none"
            }
            uploader.className = uploader.className.replace(" hovering", "");
        }
        
        function handleFileDrop(input, uploader, event) {
            var files = input.files || event.dataTransfer.files,
                file = files[0],
                reader = new FileReader();
            
            handleFileDragLeave(input, event);
            event.preventDefault();
            event.stopPropagation();
            
            reader.onprogress = handleFileUploadProgress.bind(undefined, file, uploader);
            reader.onloadend = handleFileUploadCompletion.bind(undefined, file, uploader);
            
            reader.readAsText(file);
        }
        
        function handleFileUploadProgress(file, uploader, event) {
            var percent;
            
            if (!event.lengthComputable) {
                return;
            }
            
            percent = Math.round((event.loaded / event.total) * 100);
            
            if (percent > 100) {
                percent = 100;
            }
            
            uploader.innerText = "Uploading '" + file.name + "' (" + percent + "%)...";
        }
        
        function handleFileUploadCompletion(file, uploader, event) {
            GameStarter.LevelEditor.handleUploadCompletion(event);
            uploader.innerText = uploader.getAttribute("textOld");
        }
        
        return function (schema) {
            var output = document.createElement("div"),
                title = document.createElement("div"),
                button = document.createElement("div"),
                between = document.createElement("div"),
                uploader = createUploaderDiv();
            
            output.className = "select-options select-options-level-editor";
            
            title.className = "select-option-title";
            title.textContent = "Create your own custom levels:";
            
            button.className = "select-option select-option-large options-button-option";
            button.innerHTML = "Start the <br /> Level Editor!";
            button.onclick = function () {
                GameStarter.LevelEditor.enable();
            };
            
            between.className = "select-option-title";
            between.innerHTML = "<em>- or -</em><br />";
            
            output.appendChild(title);
            output.appendChild(button);
            output.appendChild(between);
            output.appendChild(uploader);
            
            return output;
        }
    })();
    
    /**
     * 
     */
    var generatorMapsGrid = function (schema) {
        var output = document.createElement("div"),
            rangeX = schema.rangeX,
            rangeY = schema.rangeY,
            element,
            i, j;
        
        output.className = "select-options select-options-maps-grid";
        
        if (rangeX && rangeY) {
            var table = document.createElement("table"),
                row;
                
            function getParentControlDiv(element) {
                if (element.className === "control") {
                    return element;
                } else if (!element.parentNode) {
                    return undefined;
                } 
                return getParentControlDiv(element.parentNode);
            }    
            
            for (i = rangeY[0]; i <= rangeY[1]; i += 1) {
                row = document.createElement("tr");
                row.className = "maps-grid-row";
                
                for (j = rangeX[0]; j <= rangeX[1]; j += 1) {
                    element = document.createElement("td");
                    element.className = "select-option maps-grid-option maps-grid-option-range";
                    element.textContent = i + "-" + j;
                    element.onclick = (function (callback) {
                        if (getParentControlDiv(element).getAttribute("active") !== "on") {
                            return;
                        }
                        callback();
                    }).bind(undefined, schema.callback.bind(self, GameStarter, schema, element));
                    row.appendChild(element);
                }
                
                table.appendChild(row);
            }
            
            output.appendChild(table);
        }
        
        if (schema.extras) {
            var extra;
            for (i in schema.extras) {
                extra = schema.extras[i];
                element = document.createElement("div");
                
                element.className = "select-option maps-grid-option maps-grid-option-extra";
                element.textContent = extra.title;
                element.setAttribute("value", extra.title);
                element.onclick = extra.callback.bind(self, GameStarter, schema, element);
                output.appendChild(element);
                
                if (extra.extraElements) {
                    for (j = 0; j < extra.extraElements.length; j += 1) {
                        output.appendChild(GameStarter.createElement.apply(
                            GameStarter,
                            extra.extraElements[j]
                        ));
                    }
                }
            }
        }
        
        return output;
    };
    
    
    /* Utilities
    */
    
    /**
     * 
     */
    function ensureLocalStorageValue(child, details, schema) {
        if (child.constructor === Array) {
            ensureLocalStorageValues(child, details, schema);
            return;
        }
        
        var key = schema.title + "::" + details.title,
            valueDefault = details.source.call(self, GameStarter).toString(),
            value;
        
        child.setAttribute("localStorageKey", key);
        StatsHolder.addStatistic(key, {
            "storeLocally": true,
            "valueDefault": valueDefault
        });
        
        value = StatsHolder.get(key);
        if (value !== "" && value !== child.value) {
            child.value = value;
                
            if (child.setValue) {
                child.setValue(value);
            } else if (child.onchange) {
                child.onchange();
            } else if (child.onclick) {
                child.onclick();
            }
        }
    }
    
    /**
     * 
     */
    function ensureLocalStorageValues(children, details, schema) {
        var keyGeneral = schema.title + "::" + details.title,
            values = details.source.call(self, GameStarter),
            settings = {
                "storeLocally": true
            },
            key, child, value, i;
        
        for (i = 0; i < children.length; i += 1) {
            key = keyGeneral + "::" + i;
            child = children[i];
            child.setAttribute("localStorageKey", key);
            
            StatsHolder.addStatistic(key, {
                "storeLocally": true,
                "valueDefault": values[i]
            });
            
            value = StatsHolder.get(key);
            if (value !== "" && value !== child.value) {
                child.value = value;
                
                if (child.onchange) {
                    child.onchange();
                } else if (child.onclick) {
                    child.onclick();
                }
            }
        }
    }
    
    /**
     * 
     */
    function storeLocalStorageValue(child, value) {
        var key = child.getAttribute("localStorageKey");
        if (key) {
            StatsHolder.set(key, value);
        }
    }
    
    
    /**
     * 
     */
    function fixCustoms(customsRaw) {
        var customs = GameStartrConstructor.prototype.proliferate({}, customsRaw);
        
        if (!isFinite(customs.width)) {
            customs.width = document.body.clientWidth;
        }
        if (!isFinite(customs.height)) {
            if (customs.full) {
                customs.height = screen.height;
            } else if(isFullScreen) {
                // Guess for browser window...
                customs.height = window.innerHeight - 140;
            } else {
                customs.height = window.innerHeight;
            }
            // 49px from header, 35px from menus
            customs.height -= 84;
        }
        
        return customs;
    }
    
    
    self.reset(settings || {});
}
function WorldSeedr(settings) {
    "use strict";
    if (!this || this === window) {
        return new WorldSeedr(settings);
    }
    var self = this,
        
        // A very large hashtable of possibilities, by title
        all_possibilities,
        
        // Function used to generate a random number, by default Math.random
        random,
        
        // Function called in self.generateFull to place a child
        onPlacement,
        
        // A constant listing of direction opposites, like top-bottom
        directionOpposites = {
            "top": "bottom",
            "right": "left",
            "bottom": "top",
            "left": "right"
        },
        
        directionSizing = {
            "top": "height",
            "right": "width",
            "bottom": "height",
            "left": "width"
        },
        
        // A constant Array of direction names
        directionNames = Object.keys(directionOpposites),
        
        // A constant Array of the dimension descriptors
        sizingNames = ["width", "height"],
        
        // Scratch Array of prethings to be added to during generation
        generatedCommands;
    
    /**
     * 
     */
    self.reset = function (settings) {
        all_possibilities = settings.possibilities;
        random = settings.random || Math.random.bind(Math);
        onPlacement = settings.onPlacement || console.log.bind(console, "Placing");
        
        self.clearGeneratedCommands();
    };
    
    /**
     * 
     */
    self.getPossibilities = function () {
        return all_possibilities;
    };
    
    /**
     * 
     */
    self.setPossibilities = function (all_possibilitiesNew) {
        all_possibilities = all_possibilitiesNew;
    };
    
    /**
     * 
     */
    self.getOnPlacement = function () {
        return onPlacement;
    };
    
    /**
     * 
     */
    self.setOnPlacement = function (onPlacementNew) {
        onPlacement = onPlacementNew;
    };
    
    /**
     * 
     */
    self.clearGeneratedCommands = function () {
        generatedCommands = [];
    };
    
    /**
     * 
     */
    self.runGeneratedCommands = function () {
        onPlacement(generatedCommands);
    };
    
    
    /* Hardcore generation functions
    */
    
    /**
     * Generates a large collection of randomly chosen possibilities based on a
     * given schema mapping. These will fit within the given position.
     * 
     * @param {Object} schema   A simple Object with basic information on the
     *                          chosen possibility.
     * @param {String} name   The name of the possibility schema to start from.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @return {Object}   An Object containing a position within the given 
     *                    position and some number of children.
     */
    self.generate = function (name, position) {
        var schema = all_possibilities[name];
        
        if (!schema) {
            throw new Error("No possibility exists under '" + name + "'");
        }
        
        if (!schema.contents) {
            throw new Error("The schema for '" + name + "' has no possibile outcomes");
        }
        
        return generateContentChildren(schema, positionCopy(position));
    };
    
    /**
     * 
     */
    self.generateFull = function (schema) {
        var generated = self.generate(schema.title, schema),
            child, contents, i;
        
        for (i in generated.children) {
            child = generated.children[i];
                    
            switch (child.type) {
                case "Known":
                    generatedCommands.push(child);
                    break;
                case "Random":
                    self.generateFull(child);
                    break;
            }
        }
    };
    
    /**
     * Generates the children for a given schema, position, and direction. This
     * is the real hardcore function called by self.generate, which calls the
     * differnt subroutines based on whether the contents are in "Certain" or
     * "Random" mode.
     * 
     * @param {Object} schema   A simple Object with basic information on the
     *                          chosen possibility.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} [direction]   A string direction to check the position 
     *                               by ("top", "right", "bottom", or "left")
     *                               as a default if contents.direction isn't
     *                               provided.
     * @return {Object}   An Object containing a position within the given 
     *                    position and some number of children.
     */
    function generateContentChildren(schema, position, direction) {
        var contents = schema.contents,
            spacing = contents.spacing || 0,
            positionMerged = positionMerge(schema, position),
            children, 
            child;
        
        direction = contents.direction || direction;
        
        switch (contents.mode) {
            case "Random":
                children = generateContentChildrenRandom(contents, positionMerged, direction, spacing);
                break;
            case "Certain":
                children = generateContentChildrenCertain(contents, positionMerged, direction, spacing);
                break;
            case "Repeat":
                children = generateContentChildrenRepeat(contents, positionMerged, direction, spacing);
                break;
            case "Multiple":
                children = generateContentChildrenMultiple(contents, positionMerged, direction, spacing);
                break;
        }
        
        return getPositionExtremes(children);
    }
    
    /**
     * Generates a schema's children that are known to follow a set listing of
     * sub-schemas.
     * 
     * @param {Object} contents   The Array of known possibilities, in order.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} direction   A string direction to check the position by:
     *                             "top", "right", "bottom", or "left".
     * @param {Number} spacing   How much space there should be between each
     *                           child.
     * @return {Object}   An Object containing a position within the given 
     *                    position and some number of children.
     */
    function generateContentChildrenCertain(contents, position, direction, spacing) {
        var child;
        
        return contents.children.map(function (choice) {
            if (choice.type === "Final") {
                return parseChoiceFinal(contents, choice, position, direction);
            }
            
            child = parseChoice(choice, position, direction);
            if (child) {
                if (child.type !== "Known") {
                    child.contents = self.generate(child.title, position);
                }
                shrinkPositionByChild(position, child, direction, spacing);
            }
            return child;
        }).filter(function (child) {
            return child;
        });
    }
    
    
    /**
     * Generates a schema's children that are known to follow a set listing of
     * sub-schemas, repeated until there is no space left.
     * 
     * @param {Object} contents   The Array of known possibilities, in order.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} direction   A string direction to check the position by:
     *                             "top", "right", "bottom", or "left".
     * @param {Number} spacing   How much space there should be between each
     *                           child.
     * @return {Object}   An Object containing a position within the given 
     *                    position and some number of children.
     */
    function generateContentChildrenRepeat(contents, position, direction, spacing) {
        var choices = contents.children,
            positionOld = positionCopy(position),
            children = [],
            choice, child, 
            i = 0;
        
        while(positionIsNotEmpty(position, direction)) {
            choice = choices[i];
            
            if (choice.type === "Final") {
                child = parseChoiceFinal(contents, choice, position, direction);
            } else {
                child = parseChoice(choice, position, direction);
                
                if (child) {
                    if (child.type !== "Known") {
                        child.contents = self.generate(child.title, position);
                    }
                }
            }
            
            if (child && doesChoiceFitPosition(child, position)) {
                shrinkPositionByChild(position, child, direction, spacing);
                children.push(child);
            } else {
                break;
            }
            
            i += 1;
            if (i >= choices.length) {
                i = 0;
            }
        }
        
        return children;
    }
    
    /**
     * Generates a schema's children that are known to be randomly chosen from a
     * list of possibilities until there is no more room.
     * 
     * @param {Object} contents   The Array of known possibilities, with 
     *                            probability percentages.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} direction   A string direction to check the position by:
     *                             "top", "right", "bottom", or "left".
     * @param {Number} spacing   How much space there should be between each 
     *                           child.
     * @return {Object}   An Object containing a position within the given 
     *                    position and some number of children.
     */
    function generateContentChildrenRandom(contents, position, direction, spacing) {
        var children = [],
            child;
        
        while(positionIsNotEmpty(position, direction)) {
            child = generateChild(contents, position, direction);
            if (!child) {
                break;
            }
            
            shrinkPositionByChild(position, child, direction, spacing);
            children.push(child);
            
            if (contents.limit && children.length > contents.limit) {
                return;
            }
        }
        
        return children;
    }
    
    /**
     * Generates a schema's children that are all to be placed within the same
     * position. If a direction is provided, each subsequent one is shifted in
     * that direction by spacing.
     * 
     * @param {Object} contents   The Array of known possibilities, with 
     *                            probability percentages.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} [direction]   A string direction to check the position by:
     *                               "top", "right", "bottom", or "left".
     * @param {Number} [spacing]   How much space there should be between each 
     *                             child.
     * @return {Object}   An Object containing a position within the given 
     *                    position and some number of children.
     */
    function generateContentChildrenMultiple(contents, position, direction, spacing) {
        return contents.children.map(function (choice) {
            var output = parseChoice(choice, positionCopy(position), direction);
            
            if (direction) {
                movePositionByChild(position, direction, spacing);
            }
            
            return output;
        });
    }
    
    
    /* Choice parsing
    */
    
    /**
     * Shortcut function to choose a choice from an allowed set of choices, and
     * parse it for positioning and sub-choices.
     * 
     * @param {Object} contents   An Array of choice Objects, each of which must
     *                            have a .percentage.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} direction   A string direction to check the position by:
     *                             "top", "right", "bottom", or "left".
     * @return {Object}   An Object containing the bounding box position of a
     *                    parsed child, with the basic schema (.title) info 
     *                    added as well as any optional .arguments.
     */
    function generateChild(contents, position, direction) {
        var choice = chooseAmongPosition(contents.children, position);
        
        if (!choice) {
            return undefined;
        }
        
        return parseChoice(choice, position, direction);
    }
    
    /**
     * Creates a parsed version of a choice given the position and direction.
     * This is the function that parses and manipulates the positioning of the
     * new choice.
     * 
     * @param {Object} choice   The simple definition of the object chosen from
     *                          a choices array. It should have at least .title,
     *                          and optionally .sizing or .arguments.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} direction   A string direction to shrink the position by:
     *                             "top", "right", "bottom", or "left".
     * @return {Object}   An Object containing the bounding box position of a
     *                    parsed child, with the basic schema (.title) info 
     *                    added as well as any optional .arguments.
     */
    function parseChoice(choice, position, direction) {
        var title = choice.title,
            schema = all_possibilities[title],
            sizing = choice["sizing"],
            stretch = choice["stretch"],
            output = {
                "title": title,
                "type": choice.type,
                "arguments": choice["arguments"] instanceof Array
                    ? chooseAmong(choice["arguments"]).values
                    : choice["arguments"],
            },
            name, i;
        
        for (i in sizingNames) {
            name = sizingNames[i];
            
            output[name] = (sizing && typeof sizing[name] !== "undefined")
                ? sizing[name]
                : schema[name];
        }
        
        for (i in directionNames) {
            name = directionNames[i];
            output[name] = position[name];
        }
        output[direction] = output[directionOpposites[direction]]
            + output[directionSizing[direction]];
        
        switch (schema.contents.snap) {
            case "top":
                output["bottom"] = output["top"] - output["height"];
                break;
            case "right":
                output["left"] = output["right"] - output["width"];
                break;
            case "bottom":
                output["top"] = output["bottom"] + output["height"];
                break;
            case "left":
                output["right"] = output["left"] + output["width"];
                break;
        }
        
        if (stretch) {
            if (stretch.width) {
                output.left = position.left;
                output.right = position.right;
                output.width = output.right - output.left;
                if (!output.arguments) {
                    output.arguments = {
                        "width": output.width
                    };
                } else {
                    output.arguments.width = output.width;
                }
            }
            if (stretch.height) {
                output.top = position.top;
                output.bottom = position.bottom;
                output.height = output.top - output.bottom;
                if (!output.arguments) {
                    output.arguments = {
                        "height": output.height
                    };
                } else {
                    output.arguments.height = output.height;
                }
            }
        }
        
        copySchemaArguments(schema, choice, output);
        
        return output;
    }
    
    /**
     * should conform to parent (contents) via cannonsmall.snap=bottom
     */
    function parseChoiceFinal(parent, choice, position, direction) {
        var schema = all_possibilities[choice.source],
            output = {
                "type": "Known",
                "title": choice.title,
                "arguments": choice.arguments,
                "width": schema.width,
                "height": schema.height,
                "top": position.top,
                "right": position.right,
                "bottom": position.bottom,
                "left": position.left
            };
        
        copySchemaArguments(schema, choice, output);
        
        return output;
    }
    
    
    /* Randomization utilities
    */
    
    /**
     * From an Array of potential choice objects, returns one chosen at random.
     * 
     * @param {Array} choice   An Array of objects with .width and .height.
     * @return {Boolean}
     */
    function chooseAmong(choices) {
        if (!choices.length) {
            return undefined;
        }
        if (choices.length === 1) {
            return choices[0];
        }
        
        var choice = randomPercentage(),
            sum = 0,
            i;
        
        for (i = 0; i < choices.length; i += 1) {
            sum += choices[i].percent;
            if (sum >= choice) {
                return choices[i];
            }
        }
    }
    
    /**
     * From an Array of potential choice objects, filtered to only include those
     * within a certain size, returns one chosen at random.
     *
     * @param {Array} choice   An Array of objects with .width and .height.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @return {Boolean}
     * @remarks Functions that use this will have to react to nothing being 
     *          chosen. For example, if only 50 percentage is accumulated 
     *          among fitting ones but 75 is randomly chosen, something should
     *          still be returned.
     */
    function chooseAmongPosition(choices, position) {
        var width = position.right - position.left,
            height = position.top - position.bottom;
        
        return chooseAmong(choices.filter(function (choice) {
            return doesChoiceFit(all_possibilities[choice.title], width, height);
        }));
    }
    
    /**
     * Checks whether a choice can fit within a width and height.
     * 
     * @param {Object} choice   An Object that contains .width and .height.
     * @param {Number} width
     * @param {Number} height
     * @return {Boolean} The boolean equivalent of the choice fits
     *                   within the position.
     */
    function doesChoiceFit(choice, width, height) {
        return choice.width <= width && choice.height <= height;
    }
    
    /**
     * Checks whether a choice can fit within a position.
     * 
     * @param {Object} choice   An Object that contains .width and .height.
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @return {Boolean} The boolean equivalent of the choice fits
     *                   within the position.
     * @remarks When calling multiple times on a position (such as in 
     *          chooseAmongPosition), it's more efficient to store the width
     *          and height separately and just use doesChoiceFit.                
     *        
     */
     function doesChoiceFitPosition(choice, position) {
        return doesChoiceFit(
            choice,
            position.right - position.left, 
            position.top - position.bottom
        );
     }
    
    /**
     * Chooses a number in [1, 100] at random.
     * 
     * @return Number
     */
    function randomPercentage() {
        return Math.floor(random() * 100) + 1;
    }
    
    /**
     * Chooses an integer in [min, max] at random.
     * 
     * @return Number
     */
    function randomBetween(min, max) {
        return Math.floor(random() * (1 + max - min)) + min;
    }
    
    
    /* Position manipulation utilities
    */
    
    /**
     * Creates and returns a copy of a position (really just a shallow copy).
     * 
     * @param {Object} position
     * @return {Object}
     */
    function positionCopy(position) {
        var output = {},
            i;
        
        for (i in position) {
            if (position.hasOwnProperty(i)) {
                output[i] = position[i];
            }
        }
        
        return output;
    }
    
    /**
     * Creates a new position with all required attributes taking from the 
     * primary source or secondary source, in that order.
     * 
     * @param {Object} primary
     * @param {Object} secondary
     * @return {Object}
     */
    function positionMerge(primary, secondary) {
        var output = positionCopy(primary),
            i;
        
        for (i in secondary) {
            if (!output.hasOwnProperty(i)) {
                output[i] = secondary[i];
            }
        }
        
        return output;
    }
    
    /**
     * Checks and returns whether a position has open room in a particular
     * direction (horizontally for left/right and vertically for top/bottom).
     * 
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {String} direction   A string direction to check the position in:
     *                             "top", "right", "bottom", or "left".
     */
    function positionIsNotEmpty(position, direction) {
        if (direction === "right" || direction === "left") {
            return position.left < position.right;
        } else {
            return position.top > position.bottom;
        }
    }
    
    /**
     * Shrinks a position by the size of a child, in a particular direction.
     * 
     * @param {Object} position   An Object that contains .left, .right, .top, 
     *                            and .bottom.
     * @param {Object} child   An Object that contains .left, .right, .top, and
     *                         .bottom.
     * @param {String} direction   A string direction to shrink the position by:
     *                             "top", "right", "bottom", or "left".
     * @param {Mixed} [spacing]   How much space there should be between each
     *                            child (defaults to 0).
     */
    function shrinkPositionByChild(position, child, direction, spacing) {
        switch (direction) {
            case "top":
                position.bottom = child.top + parseSpacing(spacing);
                return;
            case "right":
                position.left = child.right + parseSpacing(spacing);
                return;
            case "bottom":
                position.top = child.bottom - parseSpacing(spacing);
                return;
            case "left":
                position.right = child.left - parseSpacing(spacing);
                return;
        }
    }
    
    /**
     * 
     */
    function movePositionByChild(position, direction, spacing) {
        var space = parseSpacing(spacing);
        
        switch (direction) {
            case "top":
                position.top += space;
                position.bottom += space;
                return;
            case "right":
                position.left += space;
                position.right += space;
                return;
            case "bottom":
                position.top -= space;
                position.bottom -= space;
                return;
            case "left":
                position.left -= space;
                position.right -= space;
                return;
        }
    }
    
    /**
     * 
     */
    function parseSpacing(spacing) {
        if (!spacing) {
            return 0;
        }
        
        switch (spacing.constructor) {
            case Array:
                if (spacing[0].constructor === Number) {
                    return parseSpacingObject(
                        randomBetween(spacing[0], spacing[1])
                    );
                } else {
                    return parseSpacingObject(
                        chooseAmong(spacing).value
                    );
                }
            case Object:
                return parseSpacingObject(spacing);
            default:
                return spacing;
        }
    }
    
    /**
     * 
     */
    function parseSpacingObject(spacing) {
        if (spacing.constructor === Number) {
            return spacing;
        }
        
        var min = spacing.min,
            max = spacing.max,
            units = spacing.units || 0;
        
        return randomBetween(min / units, max / units) * units;
    }
    
    /**
     * Generates the bounding box position Object (think rectangle) for a set of
     * children. The top, right, etc. member variables become the most extreme
     * out of all the possibilities.
     * 
     * @param {Object} children   An Array of objects with .top, .right,
     *                            .bottom, and .left.
     * @return {Object}   An Object with .top, .right, .bottom, and .left.
     */
    function getPositionExtremes(children) {
        var position, child, i;
        
        if (!children || !children.length) {
            return {};
        }
        
        child = children[0];
        position = {
            "top": child.top,
            "right": child.right,
            "bottom": child.bottom,
            "left": child.left,
            "children": children
        };
        
        if (children.length === 1) {
            return position;
        }
        
        for (i = 1; i < children.length; i += 1) {
            child = children[i];
            
            if (!Object.keys(child).length) {
                return position;
            }
            
            position["top"] = Math.max(position["top"], child["top"]);
            position["right"] = Math.max(position["right"], child["right"]);
            position["bottom"] = Math.min(position["bottom"], child["bottom"]);
            position["left"] = Math.min(position["left"], child["left"]);
        }
        
        return position;
    }
    
    /**
     * 
     */
    function copySchemaArguments(schema, choice, output) {
        var map = schema.contents.argumentMap,
            i;
        
        if (!map) {
            return;
        }
        
        if (!output.arguments) {
            output.arguments = {};
        }
        
        for (i in map) {
            output.arguments[map[i]] = choice[i];
        }
    }
    
    self.reset(settings || {});
}
/**
 * This is not the final FullScreenMario.js file! See dist/FullScreenMario.js.
 */
var FullScreenMario = (function(GameStartr) {
    "use strict";
    
    // Use an GameStartr as the class parent, with GameStartr's constructor
    var GameStartrProto = new GameStartr(),
        
        // Used for combining arrays from the prototype to this
        proliferate = GameStartrProto.proliferate,
        proliferateHard = GameStartrProto.proliferateHard;
        
    // Subsequent settings will be stored in FullScreenMario.prototype.settings
    GameStartrProto.settings = {};
    
    /**
     * Constructor for a new FullScreenMario game object.
     * Static game settings are stored in the appropriate settings/*.js object
     * as members of the FullScreenMario.prototype object.
     * Dynamic game settings may be given as members of the "customs" argument.
     * On typical machines, game startup time is approximately 500-700ms.
     * 
     * @param {Number} width   Width of the game viewport: at least 480.
     * @param {Number} height   Height of the game viewport: at least 464.
     * @param {Boolean} resetTimes   Whether the amount of time in milliseconds
     *                               of each reset function should be stored as
     *                               a member .resetTimes.
     * @param {Object} [style]   Additional CSS styles to be given to the
     *                           game's container <div> element.
     * @param {} 
     * @return {FullScreenMario}
     * 
     * @example Creating a 15 x 14.5 blocks sized FullScreenMario object.
     * var FSM = new FullScreenMario({
     *     "width": 480, 
     *     "height": 464
     * });
     * 
     * @example Creating a 15 x 14.5 blocks sized FullScreenMario object and
     *          logging the amount of time each reset function took.
     * var FSM = new FullScreenMario({
     *     "width": 480, 
     *     "height": 464,
     *     "resetTimed": true
     * });
     * console.log(FSM.resetTimes);
     * 
     * @example Creating a full-screen FullScreenMario object with a few mods.
     * var FSM = new FullScreenMario({
     *    "width": window.innerWidth,
     *    "height": window.innerHeight,
     *    "mods": {
     *         "Luigi": true,
     *         "parallaxHorizClouds": true,
     *         "High Speed": true,
     *         "Super Fireballs": true
     *     }
     * });
     * 
     * @example Binding the FullScreenMario object controls to the body's mouse
     *          and key events, and starting the game.
     * window.FSM = new FullScreenMario({
     *    "width": window.innerWidth, 
     *    "height": window.innerHeight
     * });
     * 
     * document.body.appendChild(FSM.container);
     * 
     * FSM.proliferate(document.body, {
     *     "onkeydown": FSM.InputWriter.makePipe("onkeydown", "keyCode"),
     *     "onkeyup": FSM.InputWriter.makePipe("onkeyup", "keyCode"),
     *     "onmousedown": FSM.InputWriter.makePipe("onmousedown", "which"),
     * });
     * 
     * FSM.gameStart();
     */
    function FullScreenMario(customs) {        // Call the parent GameStartr constructor to set the base settings and        // verify the prototype requirements
        GameStartr.call(this, {
            "customs": customs,
            "constructor": FullScreenMario,            "requirements": {
                "settings": {
                    "audio": "settings/audio.js",
                    "collisions": "settings/collisions.js",
                    "editor": "settings/editor.js",
                    "events": "settings/events.js",
                    "generator": "settings/generator.js",
                    "input": "settings/inpug.js",
                    "maps": "settings/maps.js",
                    "mods": "settings/mods.js",
                    "numbers": "settings/number.js",
                    "objects": "settings/objetcs.js",
                    "quadrants": "settings/quadrants.js",
                    "renderer": "settings/renderer.js",
                    "runner": "settings/runner.js",
                    "sprites": "settings/sprites.js",
                    "statistics": "settings/statistics.js",
                    "ui": "settings/ui.js",
                }            },
            "constants": [
                "unitsize",
                "scale",
                "gravity",
                "pointLevels",
                "customTextMappings"
            ]        });
        
        if (customs.resetTimed) {
            this.resetTimes = this.resetTimed(this, customs);
        } else {
            this.reset(this, customs);
        }
    }
    FullScreenMario.prototype = GameStartrProto;
    
    // For the sake of reset functions, store constants as members of the actual
    // FullScreenMario function itself - this allows prototype setters to use 
    // them regardless of whether the prototype has been instantiated yet.
    FullScreenMario.unitsize = 4;
    FullScreenMario.scale = FullScreenMario.unitsize / 2;
    
    // Gravity is always a function of unitsize
    FullScreenMario.gravity = Math.round(12 * FullScreenMario.unitsize) / 100; // .48
    
    // Levels of points to award for hopping on / shelling enemies
    FullScreenMario.pointLevels = [
        100, 200, 400, 500, 800, 1000, 2000, 4000, 5000, 8000
    ];
    
    // Useful for custom text, where "text!" cannot be a Function name
    FullScreenMario.customTextMappings = {
        " ": "Space",
        ".": "Period",
        "!": "ExclamationMark",
        ":": "Colon",
        "/": "Slash",
        "©": "Copyright"
    };            /* Resets    */
    
    /**
     * Resets self.StatsHolder via the parent GameStartr resetStatsHolder.
     * 
     * If the screen isn't wide enough to fit the 'lives' display, it's hidden.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     */
    function resetStatsHolder(EightBitter, customs) {
        GameStartr.prototype.resetStatsHolder(EightBitter, customs);
        
        if (customs.width < 560) {
            EightBitter.StatsHolder.getContainer().children[0].cells[4].style.display = "none";
        }
    }
    
    /**
     * Sets self.container via the parent GameStartr resetContaienr.
     * 
     * The container is given the "Press Start" font, the PixelRender is told
     * to draw the scenery, solid, character, and text groups, and the container
     * width is set to the custom's width.
     * 
     * @param {EightBittr} EightBitter
     * @param {Object} [customs]
     */
    function resetContainer(self, customs) {
        GameStartr.prototype.resetContainer(self, customs);
        
        self.container.style.fontFamily = "Press Start";
        
        self.PixelDrawer.setThingArrays([
            self.GroupHolder.getSceneryGroup(),
            self.GroupHolder.getSolidGroup(),
            self.GroupHolder.getCharacterGroup(),
            self.GroupHolder.getTextGroup()
        ]);
        
        self.StatsHolder.getContainer().style.width = customs.width + "px";
    }
    
    
    /* Global manipulations
    */
    
    /**
     * Completely restarts the game. Lives are reset to 3, the map goes back
     * to default, and the onGameStart mod trigger is fired.
     * 
     * @this {EightBittr}
     */
    function gameStart() {
        var EightBitter = EightBittr.ensureCorrectCaller(this);
        
        EightBitter.StatsHolder.set("lives", 3);
        EightBitter.setMap(EightBitter.settings.maps.mapDefault);
        
        EightBitter.ModAttacher.fireEvent("onGameStart");
    }
    
    /**
     * 
     */
    function gameOver() {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            text = EightBitter.ObjectMaker.make("CustomText", {
                "texts": [{
                    "text": "GAME OVER"
                }]
            }),
            texts, textWidth, dx, i;
        
        EightBitter.killNPCs();
        
        EightBitter.AudioPlayer.pauseTheme();
        EightBitter.AudioPlayer.play("Game Over");
        
        EightBitter.GroupHolder.clearArrays();
        EightBitter.StatsHolder.hideContainer();
        EightBitter.PixelDrawer.setBackground("black");
        
        EightBitter.addThing(
            text,
            EightBitter.MapScreener.width / 2,
            EightBitter.MapScreener.height / 2
        );
        
        texts = text.children;
        textWidth = -(texts[texts.length - 1].right - texts[0].left) / 2;
        for (i = 0; i < texts.length; i += 1) {
            EightBitter.shiftHoriz(texts[i], textWidth);
        }
        
        EightBitter.TimeHandler.addEvent(function () {
            EightBitter.gameStart();
            EightBitter.StatsHolder.displayContainer();
        }, 420);
        
        EightBitter.ModAttacher.fireEvent("onGameOver");
    }
    
    /**
     * 
     */
    function addPreThing(prething) {
        var thing = prething.thing,
            position = prething.position || thing.position;
        
        thing.EightBitter.addThing(
            thing, 
            prething.left * thing.EightBitter.unitsize - thing.EightBitter.MapScreener.left,
            (thing.EightBitter.MapScreener.floor - prething.top) * thing.EightBitter.unitsize
        );
        
        // Either the prething or thing, in that order, may request to be in the
        // front or back of the container
        if (position) {
            thing.EightBitter.TimeHandler.addEvent(function () {
                switch (prething.position || thing.position) {
                    case "beginning":
                        thing.EightBitter.arrayToBeginning(thing, thing.EightBitter.GroupHolder.getGroup(thing.grouptype));
                        break;
                    case "end":
                        thing.EightBitter.arrayToEnd(thing, thing.EightBitter.GroupHolder.getGroup(thing.grouptype));
                        break;
                }
            });
        }
        
        thing.EightBitter.ModAttacher.fireEvent("onAddPreThing", prething);
    }
    
    /**
     * 
     * 
     * 
     * @todo Create a generic version of this in GameStartr
     * @todo Make players as an array of players (native multiplayer!)
     */
    function addPlayer(left, bottom) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            player;
        
        player = EightBitter.player = EightBitter.ObjectMaker.make("Player", {
            "power": EightBitter.StatsHolder.get("power"),
            "keys": EightBitter.ObjectMaker.getProperties().Player.getKeys()
        });
        
        EightBitter.InputWriter.setEventInformation(player);
        
        if (EightBitter.MapScreener.underwater) {
            player.swimming = true;
            EightBitter.TimeHandler.addClassCycle(player, [
                "swim1", "swim2"
            ], "swimming", 5);
            EightBitter.TimeHandler.addEventInterval(
                player.EightBitter.animatePlayerBubbling,
                96, Infinity,
                player
            );
        }
        
        EightBitter.setPlayerSizeSmall(player);
        
        if (player.power >= 2) {
            EightBitter.playerGetsBig(player, true);
            if (player.power === 3) {
                EightBitter.playerGetsFire(player, true);
            }
        }
        
        EightBitter.addThing(
            player,
            typeof(left) === "undefined" ? EightBitter.unitsize * 16 : left, 
            bottom - player.height * EightBitter.unitsize
        );
        
        EightBitter.ModAttacher.fireEvent("onAddPlayer", player);
        
        return player;
    }
    
    /**
     * 
     */
    function scrollPlayer(dx, dy) {
        var EightBitter = EightBittr.ensureCorrectCaller(this);
        
        EightBitter.scrollThing(EightBitter.player, dx, dy);
        
        EightBitter.ModAttacher.fireEvent("onScrollPlayer", dx, dy);
    }
    
    /**
     * 
     */
    function onGamePause(EightBitter) {
        EightBitter.AudioPlayer.pauseAll();
        EightBitter.AudioPlayer.play("Pause");
        EightBitter.ModAttacher.fireEvent("onGamePause");
    }
    
    /**
     * 
     */
    function onGamePlay(EightBitter) {
        EightBitter.AudioPlayer.resumeAll();
        EightBitter.ModAttacher.fireEvent("onGamePlay");
    }
    
    
    /* Input
    */
    
    /**
     * 
     */
    function keyDownLeft(player) {
        player.keys.run = -1;
        player.keys.leftDown = true; // independent of changes to keys.run
        player.EightBitter.ModAttacher.fireEvent("onKeyDownLeft");
    }
    
    /**
     * 
     */
    function keyDownRight(player) {
        player.keys.run = 1;
        player.keys.rightDown = true; // independent of changes to keys.run
        player.EightBitter.ModAttacher.fireEvent("onKeyDownRight");
    }
    
    /**
     * 
     */
    function keyDownUp(player) {
        player.keys.up = true;
        
        if (player.canjump && (
            player.resting || player.EightBitter.MapScreener.underwater)
        ) {
            player.keys.jump = 1;
            player.canjump = player.keys.jumplev = 0;
            
            if (player.power > 1) {
                player.EightBitter.AudioPlayer.play("Jump Super");
            } else {
                player.EightBitter.AudioPlayer.play("Jump Small");
            }
            
            if (player.EightBitter.MapScreener.underwater) {
                player.EightBitter.TimeHandler.addEvent(function () {
                    player.jumping = player.keys.jump = false;
                }, 14);
            }
        }
        
        player.EightBitter.ModAttacher.fireEvent("onKeyDownUp");
    }
    
    /**
     * 
     */
    function keyDownDown(player) {
        player.keys.crouch = true;
        player.EightBitter.ModAttacher.fireEvent("onKeyDownDown");
    }
    
    /**
     * 
     */
    function keyDownSprint(player) {
        if (player.power === 3 && player.keys.sprint === 0 && !player.crouch) {
            player.fire(player);
        }
        player.keys.sprint = 1;
        player.EightBitter.ModAttacher.fireEvent("onKeyDownSprint");
    }
    
    /**
     * 
     */
    function keyDownPause(player) {
        var FSM = player.EightBitter;
        if (!FSM.GamesRunner.getPaused()) {
            FSM.TimeHandler.addEvent(FSM.GamesRunner.pause, 7, true);
        }
        player.EightBitter.ModAttacher.fireEvent("onKeyDownPause");
    }
    
    /**
     * 
     */
    function keyDownMute(player) {
        player.EightBitter.AudioPlayer.toggleMuted();
        player.EightBitter.ModAttacher.fireEvent("onKeyDownMute");
    }
    
    /**
     * 
     */
    function keyUpLeft(player) {
        player.keys.run = player.keys.leftDown = 0;
        player.EightBitter.ModAttacher.fireEvent("onKeyUpLeft");
    }
    
    /**
     * 
     */
    function keyUpRight(player) {
        player.keys.run = player.keys.rightDown = 0;
        player.EightBitter.ModAttacher.fireEvent("onKeyUpRight");
    }
    
    /**
     * 
     */
    function keyUpUp(player) {
        if (!player.EightBitter.MapScreener.underwater) {
            player.keys.jump = player.keys.up = 0;
        }
        player.canjump = true;
        player.EightBitter.ModAttacher.fireEvent("onKeyUpUp");
    }
    
    /**
     * 
     */
    function keyUpDown(player) {
        player.keys.crouch = 0;
        if (!player.piping) {
            player.EightBitter.animatePlayerRemoveCrouch(player);
        }
        player.EightBitter.ModAttacher.fireEvent("onKeyUpDown");
    }
    
    /**
     * 
     */
    function keyUpSprint(player) {
        player.keys.sprint = 0;
        player.EightBitter.ModAttacher.fireEvent("onKeyUpSprint");
    }
    
    /**
     * 
     */
    function keyUpPause(player) {
        if (player.EightBitter.GamesRunner.getPaused()) {
            player.EightBitter.GamesRunner.play();
        }
        player.EightBitter.ModAttacher.fireEvent("onKeyUpPause");
    }
    
    /**
     * 
     */
    function mouseDownRight(player) {
        player.EightBitter.GamesRunner.togglePause();
        player.EightBitter.ModAttacher.fireEvent("onMouseDownRight");
    }
    
    /**
     * 
     */
    var deviceMotion = (function () {
        var motionDown = false,
            motionLeft = false,
            motionRight = false,
            x, y,
            dy;
        
        return function deviceMotion(player, event) {
            player.EightBitter.ModAttacher.fireEvent("onDeviceMotion", event);
            
            var acceleration = event.accelerationIncludingGravity;
            
            if (y !== undefined) {
                dy = acceleration.y - y;
                if (dy > 0.21) {
                    player.EightBitter.keyDownUp(player);
                } else if (dy < -0.14) {
                    player.EightBitter.keyUpUp(player);
                }
            }
            
            x = acceleration.x;
            y = acceleration.y;
            
            if (x > 2.1) {
                if (!motionLeft) {
                    player.EightBitter.keyDownLeft(player);
                    motionLeft = true;
                }
            } else if (x < -2.1) {
                if (!motionRight) {
                    player.EightBitter.keyDownRight(player);
                    motionRight = true;
                }
            } else {
                if (motionLeft) {
                    player.EightBitter.keyUpLeft(player);
                    motionLeft = false;
                }
                if (motionRight) {
                    player.EightBitter.keyUpRight(player);
                    motionRight = false;
                }
            }
        };
    })();
    
    /**
     * 
     */
    function canInputsTrigger(EightBitter) {
        return !EightBitter.MapScreener.nokeys;
    }
    
    
    /* Upkeep maintenence
    */
    
    /**
     * 
     * 
     * @param {FullScreenMario} EightBitter
     */
    function maintainSolids(EightBitter, solids) {
        var delx = EightBitter.QuadsKeeper.left,
            solid, i;
        
        EightBitter.QuadsKeeper.determineAllQuadrants("Solid", solids);
        
        for (i = 0; i < solids.length; ++i) {
            solid = solids[i];
            
            if (solid.alive && solid.right > delx) {
                if (solid.movement) {
                    solid.movement(solid);
                }
            } else {
                EightBitter.arrayDeleteThing(solid, solids, i);
                i -= 1;
            }
        }
    }

    /**
     * 
     * 
     * @param {FullScreenMario} EightBitter
     */
    function maintainCharacters(EightBitter, characters) {
        var delx = EightBitter.QuadsKeeper.right,
            character, i;
        
        for (i = 0; i < characters.length; ++i) {
            character = characters[i];
            
            // Gravity
            if (character.resting) {
                character.yvel = 0;
            } else {
                if (!character.nofall) {
                    character.yvel += character.gravity || EightBitter.MapScreener.gravity;
                }
                character.yvel = Math.min(character.yvel, EightBitter.MapScreener.maxyvel);
            }

            // Position updating and collision detection
            character.under = character.undermid = false;
            EightBitter.updatePosition(character);
            EightBitter.QuadsKeeper.determineThingQuadrants(character);
            EightBitter.ThingHitter.checkHitsOf[character.title](character);

            // Resting tests
            if (character.resting) {
                if (!EightBitter.isCharacterOnResting(character, character.resting)) {
                    if (character.onRestingOff) {
                        character.onRestingOff(character, character.resting);
                    } else {
                        // Necessary for moving platforms
                        character.resting = undefined; 
                    }
                } else {
                    character.yvel = 0;
                    EightBitter.setBottom(character, character.resting.top);
                }
            }

            // Movement or deletion
            // To do: rethink this...
            if (character.alive) {
                if (!character.player &&
                    (character.numquads === 0 || character.left > delx) &&
                    (!character.outerok || (
                        character.right < EightBitter.MapScreener.width - delx
                    ))) {
                    EightBitter.arrayDeleteThing(character, characters, i);
                } else {
                    if (!character.nomove && character.movement) {
                        character.movement(character);
                    }
                }
            } else {
                EightBitter.arrayDeleteThing(character, characters, i);
                i -= 1;
            }
        }
    }

    /**
     * 
     * 
     * @param {FullScreenMario} EightBitter
     */
    function maintainPlayer(EightBitter) {
        var player = EightBitter.player;
        if (!player.alive) {
            return;
        }

        // Player is falling
        if (player.yvel > 0) {
            if (!EightBitter.MapScreener.underwater) {
                player.keys.jump = 0;
            }
            // Jumping?
            if (!player.jumping && !player.crouching) {
                // Paddling? (from falling off a solid)
                if (EightBitter.MapScreener.underwater) {
                    if (!player.paddling) {
                        EightBitter.switchClass(player, "paddling", "paddling");
                        player.paddling = true;
                    }
                } else {
                    EightBitter.addClass(player, "jumping");
                    player.jumping = true;
                }
            }
            // Player has fallen too far
            if (!player.dying && player.top > EightBitter.MapScreener.bottom) {
                // If the map has an exit loc (cloud world), transport there
                if (EightBitter.MapsHandler.getArea().exit) {
                    EightBitter.setLocation(EightBitter.MapsHandler.getArea().exit);
                }
                // Otherwise, since Player is below the screen, kill him dead
                else {
                    EightBitter.killPlayer(player, 2);
                }
                
                return;
            }
        }

        // Player is moving to the right
        if (player.xvel > 0) {
            if (player.right > EightBitter.MapScreener.middlex) {
                // If Player is to the right of the screen's middle, move the screen
                if (player.right > EightBitter.MapScreener.right - EightBitter.MapScreener.left) {
                    player.xvel = Math.min(0, player.xvel);
                }
            }
        }
        // Player is moving to the left
        else if (player.left < 0) {
            // Stop Player from going to the left.
            player.xvel = Math.max(0, player.xvel);
        }

        // Player is hitting something (stop jumping)
        if (player.under) {
            player.jumpcount = 0;
        }

        // Scrolloffset is how far over the middle player's right is
        if (EightBitter.MapScreener.canscroll) {
            var scrolloffset = player.right - EightBitter.MapScreener.middlex;
            if (scrolloffset > 0) {
                EightBitter.scrollWindow(
                    Math.round(Math.min(player.scrollspeed, scrolloffset))
                );
            }
        }
    }
    
    
    /* Collision detectors
    */

    /**
     * Function generator for generic canThingCollide checker.
     * 
     * @return {Function}
     */
    function generateCanThingCollide() {
        /**
         * Generic checker for canCollide, used for both Solids and Characters
         * 
         * @param {Thing} thing
         * @return {Boolean}
         */
        return function canThingCollide(thing) {
            return thing.alive && !thing.nocollide;
        };
    }

    /**
     * Generic base function to check if one thing is touching another
     * This will be called by the more specific thing touching functions
     * 
     * @param {Thing} thing
     * @param {Thing} other
     * @return {Boolean}
     * @remarks Only the horizontal checks use unitsize
     */
    function isThingTouchingThing(thing, other) {
        return (
            !thing.nocollide && !other.nocollide
            && thing.right - thing.EightBitter.unitsize > other.left
            && thing.left + thing.EightBitter.unitsize < other.right
            && thing.bottom >= other.top
            && thing.top <= other.bottom
        );
    }
    
    /**
     * Is thing on top of other?
     * 
     * 
     * @remarks This is a more specific form of isThingTouchingThing
     */
    function isThingOnThing(thing, other) {
        // If thing is a solid and other is falling, thing can't be above other
        if (thing.grouptype === "Solid" && other.yvel > 0) {
            return false;
        }
        
        // If other is falling faster than thing, and isn't a solid,
        // thing can't be on top (if anything, the opposite is true)
        if (thing.yvel < other.yvel && other.grouptype !== "Solid") {
            return false;
        }
        
        // If thing is the player, and it's on top of an enemy, that's true
        if (thing.player && thing.bottom < other.bottom 
                && other.type === "enemy") {
            return true;
        }
        
        // If thing is too far to the right, it can't be touching other
        if (thing.left + thing.EightBitter.unitsize >= other.right) {
            return false;
        }
        
        // If thing is too far to the left, it can't be touching other
        if (thing.right - thing.EightBitter.unitsize <= other.left) {
            return false;
        }
        
        // If thing's bottom is below other's top, factoring tolerance and
        // other's vertical velocity, they're touching
        if (thing.bottom <= other.top + other.toly + other.yvel) {
            return true;
        }
        
        // Same as before, but with velocity as the absolute difference between
        // their two velocities
        if (
            thing.bottom <= other.top + other.toly
            + Math.abs(thing.yvel - other.yvel)
        ) {
            return true;
        }
        
        // None of the above checks passed for true, so this is false (thing's
        // bottom is above other's top
        return false;
    }
    
    /**
     * 
     * 
     * @remarks Similar to isThingOnThing, but more specifically used for
     *          isCharacterOnSolid and isCharacterOnResting
     */
    function isThingOnSolid(thing, other) {
        // If thing is too far to the right, they're not touching
        if (thing.left + thing.EightBitter.unitsize >= other.right) {
            return false;
        }
        
        // If thing is too far to the left, they're not touching
        if (thing.right - thing.EightBitter.unitsize <= other.left) {
            return false;
        }
        
        // If thing's bottom is below other's top, factoring thing's velocity
        // and other's tolerance, they're touching
        if (thing.bottom - thing.yvel <= other.top + other.toly + thing.yvel) {
            return true;
        }
        
        // Same as before, but with velocity as the absolute difference between
        // their two velocities
        if (thing.bottom <= other.top + other.toly
                + Math.abs(thing.yvel - other.yvel)) {
            return true;
        }
        
        // None of the above checks passed for true, so this is false (thing's
        // bottom is above other's top
        return false;
    }
    
    /**
     * 
     */
    function isCharacterOnSolid(thing, other) {
        // If character is resting on solid, this is automatically true
        if (thing.resting === other) {
            return true;
        }                // If the character is jumping upwards, it's not on a solid        // (removing this check would cause Mario to have "sticky" behavior when        // jumping at the corners of solids)        if (thing.yvel < 0) {            return false;        }
        
        // The character and solid must be touching appropriately
        if (!thing.EightBitter.isThingOnSolid(thing, other)) {
            return false;
        }
        
        // Corner case: when character is exactly falling off the right (false)
        if (thing.left + thing.xvel + thing.EightBitter.unitsize === other.right) {
            return false;
        }
        
        // Corner case: when character is exactly falling off the left (false)
        if (thing.right - thing.xvel - thing.EightBitter.unitsize === other.left) {
            return false;
        }
        
        // None of the above checks caught a falsity, so this must be true
        return true;
    }
    
    /**
     * 
     */
    function isCharacterOnResting(thing, other) {
        if (!thing.EightBitter.isThingOnSolid(thing, other)) {
            return false;
        }
        
        // Corner case: when character is exactly falling off the right (false)
        if (thing.left + thing.xvel + thing.EightBitter.unitsize === other.right) {
            return false;
        }
        
        // Corner case: when character is exactly falling off the left (false)
        if (thing.right - thing.xvel - thing.EightBitter.unitsize === other.left) {
            return false;
        }
        
        // None of the above checks caught a falsity, so this must be true
        return true;
    }
    
    /**
     * 
     */
    function generateIsCharacterTouchingCharacter() {
        /**
         * 
         */
        return function isCharacterTouchingCharacter(thing, other) {
            if (thing.nocollidechar && (!other.player || thing.nocollideplayer)) {
                return false;
            }
            
            if (other.nocollidechar && (!thing.player || other.nocollideplayer)) {
                return false;
            }
            
            return thing.EightBitter.isThingTouchingThing(thing, other);
        };
    }
    
    function generateIsCharacterTouchingSolid() {
        /**
         * 
         * @param {Thing} thing
         * @param {Thing} other
         */
        return function isCharacterTouchingSolid(thing, other) {            // Hidden solids can only be touched by the player bottom-bumping them,
            // or by specifying collideHidden
            if (other.hidden && !other.collideHidden) {
                if (!thing.player || !thing.EightBitter.isSolidOnCharacter(other, thing)) {                    return false;                }
            }
            
            if (thing.nocollidesolid && !(thing.allowUpSolids && other.up)) {
                return false;
            }
            
            return thing.EightBitter.isThingTouchingThing(thing, other);
        };
    }
    
    /**
     * 
     */
    function isCharacterAboveEnemy(thing, other) {
        return thing.bottom < other.top + other.toly;
    }
    
    /**
     * 
     */
    function isCharacterBumpingSolid(thing, other) {
        return thing.top + thing.toly + Math.abs(thing.yvel) > other.bottom;
    }
    
    /**
     * 
     * 
     * @remarks Similar to isThingOnThing, but more specifically used for
     *          characterTouchedSolid
     * @remarks This sets the character's .midx property
     */    function isSolidOnCharacter(thing, other) {
        // This can never be true if other is falling
        if (other.yvel >= 0) {
            return false;
        }
        
        // Horizontally, all that's required is for the other's midpoint to
        // be within the thing's left and right
        other.midx = thing.EightBitter.getMidX(other);
        if (other.midx <= thing.left || other.midx >= thing.right) {
            return false;
        }
        
        // If the thing's bottom is below the other's top, factoring
        // tolerance and velocity, that's false (this function assumes they're
        // already touching)
        if (thing.bottom - thing.yvel > other.top + other.toly - other.yvel) {
            return false;
        }
        
        // The above checks never caught falsities, so this must be true
        return true;
    }
    
    /**
     * 
     */
    function isCharacterAlive(thing) {
        return thing && thing.alive && !thing.dead;
    }
    
    
    /* Collision reactions
    */
    
    /**
     * 
     */
    function gainLife(amount, nosound) {
        var EightBitter = EightBittr.ensureCorrectCaller(this);
        
        amount = Number(amount) || 1;
        
        EightBitter.StatsHolder.increase("lives", amount);
        
        if (!nosound) {
            this.AudioPlayer.play("Gain Life");
        }
        
        EightBitter.ModAttacher.fireEvent("onGainLife", amount);
    }
    
    /**
     * Basic function for Mario causing an item to jump slightly into the air, 
     * such as from hitting a solid below it. 
     * 
     * @param {Thing} thing
     * @remarks This simply moves the thing up slightly and decreases its
     *          y-velocity, without considering x-direction.
     */
    function itemJump(thing) {
        thing.yvel -= FullScreenMario.unitsize * 1.4;
        this.shiftVert(thing, -FullScreenMario.unitsize);
    }
    
    /**
     * 
     */
    function jumpEnemy(thing, other) {
        if (thing.keys.up) {
            thing.yvel = thing.EightBitter.unitsize * -1.4;
        } else {
            thing.yvel = thing.EightBitter.unitsize * -0.7;
        }
        
        thing.xvel *= 0.91;
        thing.EightBitter.AudioPlayer.play("Kick");
        
        if (other.group !== "item" || other.shell) {
            thing.jumpcount += 1;
            thing.EightBitter.scoreOn(
                thing.EightBitter.findScore(thing.jumpcount + thing.jumpers),
                other
            );
        }
        
        thing.jumpers += 1;
        thing.EightBitter.TimeHandler.addEvent(function (thing) {
            thing.jumpers -= 1;
        }, 1, thing);
    }
    
    /**
     * 
     */
    function playerShroom(thing, other) {
        if (thing.shrooming) {
            return;
        }
        
        thing.EightBitter.AudioPlayer.play("Powerup");
        thing.EightBitter.scoreOn(1000, thing.EightBitter.player);
        
        if (thing.power < 3) {
            thing.EightBitter.StatsHolder.increase("power");
            
            if (thing.power < 3) {
                thing.shrooming = true;
                thing.power += 1;
                
                if (thing.power === 3) {
                    thing.EightBitter.playerGetsFire(thing.EightBitter.player);
                } else {
                    thing.EightBitter.playerGetsBig(thing.EightBitter.player);
                }
            }
        }
            
        thing.EightBitter.ModAttacher.fireEvent("onPlayerShroom", thing, other);
    }
    
    /**
     * 
     */
    function playerShroom1Up(thing, other) {
        if (thing.player) {
            thing.EightBitter.gainLife(1);
        }
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerShroom1Up", thing, other);
    }
    
    /**
     * 
     */
    function playerStarUp(thing, timeout) {
        thing.star += 1;
        
        thing.EightBitter.switchClass(thing, "normal", "star");
        
        thing.EightBitter.AudioPlayer.play("Powerup");
        thing.EightBitter.AudioPlayer.playTheme("Star", true);
        
        thing.EightBitter.TimeHandler.addClassCycle(thing, [
            "star1", "star2", "star3", "star4"
        ], "star", 2);
        
        thing.EightBitter.TimeHandler.addEvent(
            thing.EightBitter.playerStarDown, 
            timeout || 560, 
            thing
        );
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerStarUp", thing);
    }
    
    /**
     * 
     */
    function playerStarDown(thing) {
        if (!thing.player) {
            return;
        }
        
        thing.EightBitter.TimeHandler.cancelClassCycle(thing, "star");
        thing.EightBitter.TimeHandler.addClassCycle(thing, [
            "star1", "star2", "star3", "star4"
        ], "star", 5);
        
        thing.EightBitter.TimeHandler.addEvent(
            thing.EightBitter.playerStarOffCycle,
            140,
            thing
        );
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerStarDown", thing);
    }
    
    /**
     * 
     */
    function playerStarOffCycle(thing) {
        if (!thing.player) {
            return;
        }
        
        if (thing.star > 1) {
            thing.star -= 1;
            return;
        }
        
        thing.EightBitter.AudioPlayer.playTheme();
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerStarOffCycle", thing);
        
        thing.EightBitter.TimeHandler.addEvent(
            thing.EightBitter.playerStarOffFinal,
            70,
            thing
        );
    }
    
    /**
     * 
     */
    function playerStarOffFinal(thing) {
        if (!thing.player) {
            return;
        }
        
        thing.star -= 1;
        thing.EightBitter.TimeHandler.cancelClassCycle(thing, "star");
        thing.EightBitter.removeClasses(thing, "star star1 star2 star3 star4");
        thing.EightBitter.addClass(thing, "normal");
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerStarOffFinal", thing);
    }
    
    /**
     * 
     */
    function playerGetsBig(thing, noAnimation) {
        thing.keys.down = 0;
        thing.EightBitter.setPlayerSizeLarge(thing);
        thing.EightBitter.removeClasses(thing, "crouching small");
        thing.EightBitter.updateBottom(thing, 0);
        thing.EightBitter.updateSize(thing);
        
        if (noAnimation) {
            thing.EightBitter.addClass(thing, "large");
        } else {
            thing.EightBitter.playerGetsBigAnimation(thing);
        }
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerGetsBig", thing);
    }
    
    /**
     * 
     */
    function playerGetsBigAnimation(thing) {
        var stages = [
                'shrooming1', 'shrooming2', 'shrooming1', 'shrooming2',
                'shrooming3', 'shrooming2', 'shrooming3'
            ],
            i;
        
        thing.EightBitter.addClass(thing, "shrooming");
        thing.EightBitter.thingPauseVelocity(thing);
        
        // The last stage in the events clears it, resets movement, and stops
        stages.push(function (thing, stages) {
            thing.shrooming = stages.length = 0;
            
            thing.EightBitter.addClass(thing, "large");
            thing.EightBitter.removeClasses(thing, "shrooming shrooming3");
            thing.EightBitter.thingResumeVelocity(thing);
            
            return true;
        });
        
        thing.EightBitter.TimeHandler.addClassCycle(thing, stages, "shrooming", 6);
    }
    
    /**
     * 
     */
    function playerGetsSmall(thing) {
        var bottom = thing.bottom;
        thing.keys.down = 0;
        thing.EightBitter.thingPauseVelocity(thing);
        
        // Step one
        thing.nocollidechar = true;
        thing.EightBitter.animateFlicker(thing);
        thing.EightBitter.removeClasses(thing, "running skidding jumping fiery");
        thing.EightBitter.addClasses(thing, "paddling small");
        
        // Step two (t+21)
        thing.EightBitter.TimeHandler.addEvent(function (thing) {
            thing.EightBitter.removeClass(thing, "large");
            thing.EightBitter.setPlayerSizeSmall(thing);
            thing.EightBitter.setBottom(thing, bottom - FullScreenMario.unitsize);
        }, 21, thing);
        
        // Step three (t+42)
        thing.EightBitter.TimeHandler.addEvent(function (thing) {
            thing.EightBitter.thingResumeVelocity(thing, false);
            thing.EightBitter.removeClass(thing, "paddling");
            if (thing.running || thing.xvel) {
                thing.EightBitter.addClass(thing, "running");
            }
            thing.EightBitter.PixelDrawer.setThingSprite(thing);
        }, 42, thing);
        
        // Step four (t+70)
        thing.EightBitter.TimeHandler.addEvent(function (thing) {
            thing.nocollidechar = false;
        }, 70, thing);
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerGetsSmall");
    }
    
    /**
     * 
     */
    function playerGetsFire(thing) {
        thing.shrooming = false;
        thing.EightBitter.removeClass(thing, "intofiery");
        thing.EightBitter.addClass(thing, "fiery");
        thing.EightBitter.ModAttacher.fireEvent("onPlayerGetsFire");
    }
    
    /**
     * 
     */
    function setPlayerSizeSmall(thing) {
        thing.EightBitter.setSize(thing, 8, 8, true);
        thing.EightBitter.updateSize(thing);
    }
    
    /**
     * 
     */
    function setPlayerSizeLarge(thing) {
        thing.EightBitter.setSize(thing, 8, 16, true);
        thing.EightBitter.updateSize(thing);
    }
    
    /**
     * 
     */
    function animatePlayerRemoveCrouch(thing) {
        thing.crouching = false;
        thing.toly = thing.tolyOld || 0;
        
        if (thing.power !== 1) {
            thing.EightBitter.setHeight(thing, 16, true, true);
            thing.EightBitter.removeClasses(thing, "crouching");
            thing.EightBitter.updateBottom(thing, 0);
            thing.EightBitter.updateSize(thing);
        }
        
        thing.EightBitter.animatePlayerRunningCycle(thing);
    }
    
    /**
     * 
     * 
     * @param {Thing} thing   A character attached to other
     * @param {Other} other   A solid the thing is attached to
     */
    function unattachPlayer(thing, other) {
        thing.nofall = false;
        thing.nocollide = false;
        thing.skipoverlaps = false;
        thing.attachedSolid = undefined;
        thing.xvel = thing.keys.run;
        thing.movement = thing.EightBitter.movePlayer;
        
        thing.EightBitter.addClass(thing, "jumping");
        thing.EightBitter.removeClasses(thing, "climbing", "animated");
        
        other.attachedCharacter = undefined;
    }
    
    /**
     * 
     */
    function playerAddRestingStone(thing) {
        var stone = thing.EightBitter.addThing(
            "RestingStone", 
            thing.left,
            thing.top + thing.EightBitter.unitsize * 48
        );
        
        thing.nocollide = true;
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            if (thing.bottom >= stone.top) {
                thing.nocollide = false;
                thing.EightBitter.setBottom(thing, stone.top);
                return true;
            }
        }, 1, Infinity);
    }
    
    
    /* Spawn / activate functions
    */
    
    /**
     * 
     */
    function spawnHammerBro(thing) {
        thing.counter = 0;
        thing.gravity = thing.EightBitter.MapScreener.gravity / 2.1;
        thing.EightBitter.TimeHandler.addEvent(animateThrowingHammer, 35, thing, 7);
        thing.EightBitter.TimeHandler.addEventInterval(animateJump, 140, Infinity, thing);
    }
    
    /** 
     * 
     */
    function spawnBowser(thing) {
        thing.counter = 0;
        thing.deathcount = 0;
        thing.EightBitter.TimeHandler.addEventInterval(thing.EightBitter.animateBowserJump, 117, Infinity, thing);
        thing.EightBitter.TimeHandler.addEventInterval(thing.EightBitter.animateBowserFire, 280, Infinity, thing);
        thing.EightBitter.TimeHandler.addEventInterval(thing.EightBitter.animateBowserFire, 350, Infinity, thing);
        thing.EightBitter.TimeHandler.addEventInterval(thing.EightBitter.animateBowserFire, 490, Infinity, thing);
    }
    
    /**
     * 
     */
    function spawnPiranha(thing) {
        thing.counter = 0;
        thing.direction = thing.EightBitter.unitsize / -40;
        
        if (thing.onPipe) {
            thing.EightBitter.setHeight(thing, 6, true, true);
        }
    }
    
    /**
     * 
     */
    function spawnBlooper(thing) {
        thing.squeeze = 0;
        thing.counter = 0;
    }
    
    /**
     * 
     */
    function spawnPodoboo(thing) {
        thing.EightBitter.TimeHandler.addEventInterval(
            thing.EightBitter.animatePodobooJumpUp,
            thing.frequency,
            Infinity,
            thing
        );
    }
    
    /**
     * 
     */
    function spawnLakitu(thing) {
        if (
            thing.EightBitter.isCharacterAlive(
                thing.EightBitter.MapScreener.lakitu
            )
        ) {
            thing.EightBitter.killNormal(thing);
            return;
        }
        thing.EightBitter.MapScreener.lakitu = thing;
        
        thing.EightBitter.TimeHandler.addEventInterval(
            thing.EightBitter.animateLakituThrowingSpiny, 140, Infinity, thing
        );
    }
    
    /**
     * 
     */
    function spawnCannon(thing) {
        if (!thing.nofire) {
            thing.EightBitter.TimeHandler.addEventInterval(
                thing.EightBitter.animateCannonFiring,
                thing.frequency,
                thing.frequency,
                thing
            );
        }
    }
    
    /**
     * 
     */
    function spawnCastleBlock(thing) {
        if (!thing.fireballs) {
            return;
        }
        
        var balls = new Array(thing.fireballs),
            i;
        
        for (i = 0; i < thing.fireballs; i += 1) {
            balls[i] = thing.EightBitter.addThing("CastleFireball");
            thing.EightBitter.setMidObj(balls[i], thing);
        }
        
        if (thing.speed >= 0) {
            thing.dt = 0.07;
            thing.angle = 0.25;
        } else {
            thing.dt = -0.07;
            thing.angle = -0.25;
        }
        
        if (!thing.direction) {
            thing.direction = -1;
        }
        
        thing.EightBitter.TimeHandler.addEventInterval(
            thing.EightBitter.animateCastleBlock,
            Math.round(7 / Math.abs(thing.speed)),
            Infinity,
            thing,
            balls
        );
    }
    
    /**
     * 
     */
    function spawnMoveFloating(thing) {
        // Make sure thing.begin <= thing.end
        thing.EightBitter.setMovementEndpoints(thing);
        
        // Make thing.begin and thing.end relative to the area's floor
        thing.begin = thing.EightBitter.MapScreener.floor * thing.EightBitter.unitsize - thing.begin;
        thing.end = thing.EightBitter.MapScreener.floor * thing.EightBitter.unitsize - thing.end;
    }
    
    /**
     * 
     */
    function spawnMoveSliding(thing) {
        // Make sure thing.begin <= thing.end
        thing.EightBitter.setMovementEndpoints(thing);
    }
    
    /**
     * 
     */
    function spawnRandomCheep(EightBitter) {
        var spawn;
        
        if (!EightBitter.MapScreener.spawningCheeps) {
            return true;
        }
        
        spawn = EightBitter.ObjectMaker.make("CheepCheep", {
            "flying": true,
            "xvel": EightBitter.NumberMaker.random() 
                * EightBitter.unitsize * 1.4,
            "yvel": EightBitter.unitsize * -1.4
        });
        
        EightBitter.addThing(
            spawn,
            EightBitter.NumberMaker.random()
                * EightBitter.MapScreener.width,
            EightBitter.MapScreener.height
        );
        
        if (spawn.left < EightBitter.MapScreener.width / 2) {
            EightBitter.flipHoriz(spawn);
        } else {
            spawn.xvel *= -1;
        }
    }
    
    /**
     * 
     */
    function spawnRandomBulletBill(EightBitter) {
        var spawn;
        
        if (!EightBitter.MapScreener.spawningBulletBills) {
            return true;
        }
        
        spawn = EightBitter.ObjectMaker.make("BulletBill");
        spawn.direction = spawn.moveleft = true;
        spawn.xvel *= -1;
        EightBitter.flipHoriz(spawn);
        
        EightBitter.addThing(
            spawn,
            EightBitter.MapScreener.width,
            Math.floor(
                EightBitter.NumberMaker.randomIntWithin(
                    0,
                    EightBitter.MapScreener.floor
                ) / 8
            ) * 8 * EightBitter.unitsize
        );
    }
    
    /**
     * Spawns a custom text Thing by killing it and placing the contents of its
     * texts member variable. These are written with a determined amount of
     * spacing between them, as if by a typewriter.
     * 
     * @param {Thing} thing
     */
    function spawnCustomText(thing) {
        var top = thing.top,
            texts = thing.texts,
            attributes = thing.textAttributes,
            spacingHorizontal = thing.spacingHorizontal * thing.EightBitter.unitsize,
            spacingVertical = thing.spacingVertical * thing.EightBitter.unitsize,
            spacingVerticalBlank = thing.spacingVerticalBlank * thing.EightBitter.unitsize,
            children = thing.children = [],
            left, text, letter, textThing, i, j;
        
        for (i = 0; i < texts.length; i += 1) {
            if (!texts[i]) {
                top += spacingVerticalBlank;
                continue;
            }
            
            text = texts[i].text;
            
            if (texts[i].offset) {
                left = thing.left + texts[i].offset * thing.EightBitter.unitsize;
            } else {
                left = thing.left;
            }
            
            for (j = 0; j < text.length; j += 1) {
                letter = text[j];
                
                if (thing.EightBitter.customTextMappings.hasOwnProperty(letter)) {
                    letter = thing.EightBitter.customTextMappings[letter];
                }
                letter = "Text" + thing.size + letter;
                
                textThing = thing.EightBitter.ObjectMaker.make(letter, attributes);
                textThing.EightBitter.addThing(textThing, left, top);
                children.push(textThing);
                
                left += textThing.width * thing.EightBitter.unitsize;
                left += spacingHorizontal;
            }
            top += spacingVertical;
        }
        
        thing.EightBitter.killNormal(thing);
    }
    
    /**
     * 
     */
    function spawnDetector(thing) {
        thing.activate(thing);
        thing.EightBitter.killNormal(thing);
    }
    
    /** 
     * Used by Things in a collection to register themselves as a part of their
     * container collection Object. This is called by onThingMake, so they're 
     * immediately put in the collection and have it as a member variable.
     * 
     * @remarks This should be bound in prethings as ".bind(scope, collection)"
     */
    function spawnCollectionComponent(collection, thing) {
        thing.collection = collection;
        collection[thing.collectionName] = thing;
    }
    
    /** 
     * Used by Things in a collection to get direct references to other Things
     * ("partners") in that collection. This is called by onThingAdd, so it's
     * always after spawnCollectionComponent (which is by onThingMake).     
     * 
     * @remarks This should be bound in prethings as ".bind(scope, collection)"
     */
    function spawnCollectionPartner(collection, thing) {
        var partnerNames = thing.collectionPartnerNames,
            partners = thing.partners = {},
            collection = thing.collection,
            name;
        
        for (name in partnerNames) {
            if (partnerNames.hasOwnProperty(name)) {
                thing.partners[name] = collection[partnerNames[name]];
            }
        }
    }
    
    /**
     * 
     */
    function spawnRandomSpawner(thing) {
        var EightBitter = thing.EightBitter,
            left = (thing.left + EightBitter.MapScreener.left) / EightBitter.unitsize;
        
        EightBitter.WorldSeeder.clearGeneratedCommands();
        EightBitter.WorldSeeder.generateFull({
            "title": thing.randomization,
            "top": thing.randomTop,
            "right": left + thing.randomWidth,
            "bottom": thing.randomBottom,
            "left": left
        });
        EightBitter.WorldSeeder.runGeneratedCommands();
        
        EightBitter.MapsHandler.spawnMap(
            "xInc",
            EightBitter.QuadsKeeper.top / EightBitter.unitsize,
            EightBitter.QuadsKeeper.right / EightBitter.unitsize,
            EightBitter.QuadsKeeper.bottom / EightBitter.unitsize,
            EightBitter.QuadsKeeper.left / EightBitter.unitsize
        );
    }
    
    /**
     * 
     */
    function activateCheepsStart(thing) {
        thing.EightBitter.MapScreener.spawningCheeps = true;
        thing.EightBitter.TimeHandler.addEventInterval(
            spawnRandomCheep, 21, Infinity, thing.EightBitter
        );
    }
    
    /**
     * 
     */
    function activateCheepsStop(thing) {
        thing.EightBitter.MapScreener.spawningCheeps = false;
    }
    
    /**
     * 
     */
    function activateBulletBillsStart(thing) {
        thing.EightBitter.MapScreener.spawningBulletBills = true;
        thing.EightBitter.TimeHandler.addEventInterval(
            spawnRandomBulletBill, 210, Infinity, thing.EightBitter
        );
    }
    
    /**
     * 
     */
    function activateBulletBillsStop(thing) {
        thing.EightBitter.MapScreener.spawningBulletBills = false;
    }
    
    /**
     * 
     */
    function activateLakituStop(thing) {
        var lakitu = thing.EightBitter.MapScreener.lakitu;
        
        if (!lakitu) {
            return;
        }
        
        lakitu.fleeing = true;
        lakitu.movement = thing.EightBitter.moveLakituFleeing;
    }
    
    /**
     * 
     */
    function activateWarpWorld(thing, other) {
        var collection = other.collection,
            key = 0, 
            keyString, scenery, texts, j;
        
        texts = collection["Welcomer"].children;
        for (j = 0; j < texts.length; j += 1) {
            if (texts[j].title !== "TextSpace") {
                texts[j].hidden = false;
            }
        }
        
        while (true) {
            keyString = key + "-Text";
            if (!collection.hasOwnProperty(keyString)) {
                break;
            }
            
            texts = collection[keyString].children;
            for (j = 0; j < texts.length; j += 1) {
                if (texts[j].title !== "TextSpace") {
                    texts[j].hidden = false;
                }
            }
            
            thing.EightBitter.killNormal(collection[key + "-Piranha"]);
            
            key += 1;
        }
    }
    
    /**
     * 
     */
    function activateRestingStone(thing, other) {
        thing.opacity = 1;
        FSM.AudioPlayer.playTheme();
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            if (other.resting !== thing) {
                thing.EightBitter.killNormal(thing);
                return true;
            }
        }, 1, Infinity);
    }
    
    /**
     * 
     */
    function activateWindowDetector(thing) {
        if (thing.EightBitter.MapScreener.right - thing.EightBitter.MapScreener.left < thing.left) {
            return;
        }
        
        
        thing.activate(thing);
        thing.EightBitter.killNormal(thing);
    }
    
    /**
     * 
     */
    function activateScrollBlocker(thing) {
        var dx = thing.EightBitter.MapScreener.width - thing.left;
        
        thing.EightBitter.MapScreener.canscroll = false;
        if (dx < 0) {
            thing.EightBitter.scrollWindow(-dx);
        }
    }
    
    /**
     * 
     */
    function activateScrollEnabler(thing) {
        thing.EightBitter.MapScreener.canscroll = true;
    }
    
    /**
     * 
     */
    function activateSectionBefore(thing) {
        var EightBitter = thing.EightBitter,
            MapsCreator = EightBitter.MapsCreator,
            MapScreener = EightBitter.MapScreener,
            MapsHandler = EightBitter.MapsHandler,
            area = MapsHandler.getArea(),
            map = MapsHandler.getMap(),
            prethings = MapsHandler.getPreThings(),
            section = area.sections[thing.section || 0],
            left = (thing.left + MapScreener.left) / EightBitter.unitsize,
            before = section.before ? section.before.creation : undefined,
            command, i;
        
        // If there is a before, parse each command into the current prethings array
        if (before) {
            for (i = 0; i < before.length; i += 1) {
                // A copy of the command must be used, so the original isn't modified
                command = EightBitter.proliferate({}, before[i]);
                
                // The command's x-location must be shifted by the thing's placement
                if (!command.x) {
                    command.x = left;
                } else {
                    command.x += left;
                }
                
                // For Platforms that slide around, start and end are dynamic
                if (command.sliding) {
                    command.begin += left;
                    command.end += left;
                }
                
                MapsCreator.analyzePreSwitch(command, prethings, area, map);
            }
        }
            
        // Add a prething at the end of all this to trigger the stretch part
        command = {
            "thing": "DetectWindow", 
            "x": left + (before ? section.before.width : 0), "y": 0, 
            "activate": EightBitter.activateSectionStretch,
            "section": thing.section || 0
        };
        
        MapsCreator.analyzePreSwitch(command, prethings, area, map);
        
        // Spawn the map, so new Things that should be placed will be spawned if nearby
        MapsHandler.spawnMap(
            "xInc",
            MapScreener.top / EightBitter.unitsize,
            command.x,
            MapScreener.bottom / EightBitter.unitsize,
            left
        );
    }
    
    /**
     * 
     */
    function activateSectionStretch(thing) {
        var EightBitter = thing.EightBitter,
            MapsCreator = EightBitter.MapsCreator,
            MapScreener = EightBitter.MapScreener,
            MapsHandler = EightBitter.MapsHandler,
            area = MapsHandler.getArea(),
            map = MapsHandler.getMap(),
            prethings = MapsHandler.getPreThings(),
            section = area.sections[thing.section || 0],
            stretch = section.stretch ? section.stretch.creation : undefined,
            left = (thing.left + MapScreener.left) / EightBitter.unitsize,
            width = MapScreener.width / EightBitter.unitsize,
            command, i;
        
        // If there is a stretch, parse each command into the current prethings array
        if (stretch) {
            for (i = 0; i < stretch.length; i += 1) {
                // A copy of the command must be used, so the original isn't modified
                command = EightBitter.proliferate({}, stretch[i]);
                command.x = left;
                
                // "stretch" the command by making its width equal to the screen
                command.width = width;
                MapsCreator.analyzePreSwitch(command, prethings, area, map);
            }
            
            // Add a prething at the end of all this to trigger the after part
            command = {
                "thing": "DetectWindow", 
                "x": left + width, "y": 0, 
                "activate": EightBitter.activateSectionAfter,
                "section": thing.section || 0
            };
            MapsCreator.analyzePreSwitch(command, prethings, area, map);
        }
        
        // Spawn the map, so new Things that should be placed will be spawned if nearby
        MapsHandler.spawnMap(
            "xInc",
            MapScreener.top / EightBitter.unitsize,
            MapScreener.right / EightBitter.unitsize,
            MapScreener.bottom / EightBitter.unitsize,
            left
        );
    }
    
    /**
     * 
     */
    function activateSectionAfter(thing) {
        // Since the section was passed, do the rest of things normally
        var EightBitter = thing.EightBitter,
            MapsCreator = EightBitter.MapsCreator,
            MapScreener = EightBitter.MapScreener,
            MapsHandler = EightBitter.MapsHandler,
            area = MapsHandler.getArea(),
            map = MapsHandler.getMap(),
            prethings = MapsHandler.getPreThings(),
            section = area.sections[thing.section || 0],
            left = (thing.left + MapScreener.left) / EightBitter.unitsize,
            after = section.after ? section.after.creation : undefined,
            command, i;
        
        // If there is an after, parse each command into the current prethings array
        if (after) {
            for (i = 0; i < after.length; i += 1) {
                // A copy of the command must be used, so the original isn't modified
                command = EightBitter.proliferate({}, after[i]);
                
                // The command's x-location must be shifted by the thing's placement
                if (!command.x) {
                    command.x = left;
                } else {
                    command.x += left;
                }
                
                // For Platforms that slide around, start and end are dynamic
                if (command.sliding) {
                    command.begin += left;
                    command.end += left;
                }
                
                MapsCreator.analyzePreSwitch(command, prethings, area, map);
            }
        }
        
        // Spawn the map, so new Things that should be placed will be spawned if nearby
        MapsHandler.spawnMap(
            "xInc",
            MapScreener.top / EightBitter.unitsize,
            left + (MapScreener.right / EightBitter.unitsize),
            MapScreener.bottom / EightBitter.unitsize,
            left
        );
    }
    
    
    /* Collision functions
    */

    /**
     * 
     */
    function generateHitCharacterSolid() {
        /**
         * // thing = character
         * // other = solid
         * 
         * @param {Thing} thing
         * @param {Thing} other
         */
        return function hitCharacterSolid(thing, other) {
            // "Up" solids are special (they kill things that aren't their .up)
            if (other.up && thing !== other.up) {
                return thing.EightBitter.collideCharacterSolidUp(thing, other);
            }
            
            other.collide(thing, other);
            
            // If a character is bumping into the bottom, call that
            if (thing.undermid) {
                if (thing.undermid.bottomBump) {
                    thing.undermid.bottomBump(thing.undermid, thing);
                }
            }
            else if (thing.under && thing.under.bottomBump) {
                thing.under.bottomBump(thing.under, thing);
            }
        };
    }

    /**
     * 
     */
    function generateHitCharacterCharacter(thing, other) {
        /**
         *  
         * @param {Thing} thing
         * @param {Thing} other
         */
        return function hitCharacterCharacter(thing, other) {
            // The player calls the other's collide function, such as playerStar
            if (thing.player) {
                if (other.collide) {
                    return other.collide(thing, other);
                }
            }
            // Otherwise just use thing's collide function
            else if (thing.collide) {
                thing.collide(other, thing);
            }
        };
    }
    
    /**
     * 
     */
    function collideFriendly(thing, other) {
        if (thing.player) {
            if (other.action) {
                other.action(thing, other);
            }
            other.death(other);
        }
    }
    
    /**
     * 
     */
    function collideCharacterSolid(thing, other) {
        if (other.up === thing) {
            return;
        }
        
        // Character on top of solid
        if (thing.EightBitter.isCharacterOnSolid(thing, other)) {
            if (other.hidden && !other.collideHidden) {
                return;
            }
            
            if (thing.resting !== other) {
                thing.resting = other;
                if (thing.onResting) {
                    thing.onResting(thing, other);
                }
                if (other.onRestedUpon) {
                    other.onRestedUpon(other, thing);
                }
            }
        }
        // Solid on top of character
        else if (thing.EightBitter.isSolidOnCharacter(other, thing)) {
            var midx = thing.EightBitter.getMidX(thing);
            
            if (midx > other.left && midx < other.right) {
                thing.undermid = other;
            } else if (other.hidden && !other.collideHidden) {
                return;
            }
            
            if (!thing.under) {
                thing.under = [other];
            } else {
                thing.under.push(other);
            }
            
            if (thing.player) {
                thing.keys.jump = 0;
                thing.EightBitter.setTop(thing, other.bottom - thing.toly + other.yvel);
            }
            
            thing.yvel = other.yvel;
        }
        
        if (other.hidden && !other.collideHidden) {
            return;
        }
        
        // Character bumping into the side of the solid
        if (
            thing.resting !== other
            && !thing.EightBitter.isCharacterBumpingSolid(thing, other)
            && !thing.EightBitter.isThingOnThing(thing, other)
            && !thing.EightBitter.isThingOnThing(other, thing) 
            && !thing.under
        ) {
            // Character to the left of the solid
            if (thing.right <= other.right) {
                thing.xvel = Math.min(thing.xvel, 0);
                thing.EightBitter.shiftHoriz(
                    thing,
                    Math.max(
                        other.left + thing.EightBitter.unitsize - thing.right,
                        thing.EightBitter.unitsize / -2
                    )
                );
            }
            // Character to the right of the solid
            else {
                thing.xvel = Math.max(thing.xvel, 0);
                thing.EightBitter.shiftHoriz(
                    thing,
                    Math.min(
                        other.right - thing.EightBitter.unitsize - thing.left,
                        thing.EightBitter.unitsize / 2
                    )
                );
            }
            
            // Non-players flip horizontally
            if (!thing.player) {
                if (!thing.noflip) {
                    thing.moveleft = !thing.moveleft;
                }
                // Some items require fancy versions (e.g. Shell)
                if (thing.group === "item") {
                    thing.collide(other, thing);
                }
            }
            // Players trigger other actions (e.g. Pipe -> mapExitPipeHorizontal)
            else if (other.actionLeft) {
                thing.EightBitter.ModAttacher.fireEvent("onPlayerActionLeft", thing, other);
                other.actionLeft(thing, other, other.transport);
            }
        }
    }
    
    /**
     * 
     */
    function collideCharacterSolidUp(thing, other) {
        if (thing.onCollideUp) {
            thing.onCollideUp(thing, other);
        } else {
            thing.EightBitter.scoreOn(thing.scoreBelow, thing);
            thing.death(thing, 2);
        }
    }
    
    /**
     * 
     */
    function collideUpItem(thing, other) {
        thing.EightBitter.animateCharacterHop(thing);
        thing.moveleft = thing.EightBitter.objectToLeft(thing, other);
    }
    
    /**
     * 
     */
    function collideUpCoin(thing, other) {
        other = thing.blockparent;
        thing.animate(thing, other);
    }
    
    /**
     * 
     */
    function collideCoin(thing, other) {
        if (thing.player) {
            thing.EightBitter.AudioPlayer.play("Coin");
            thing.EightBitter.StatsHolder.increase("score", 200);
            thing.EightBitter.StatsHolder.increase("coins", 1);
            thing.EightBitter.killNormal(other);
        }
    }
    
    /**
     * 
     */
    function collideStar(thing, other) {
        if (!thing.player || thing.star) {
            return;
        }
        
        thing.EightBitter.playerStarUp(thing);
        thing.EightBitter.ModAttacher.fireEvent("onCollideStar", thing, other);
    }
    
    /**
     * 
     * 
     * @remarks thing is character, other is fireball
     */
    function collideFireball(thing, other) {
        if (
            !thing.EightBitter.isCharacterAlive(thing) 
            || thing.height < thing.EightBitter.unitsize
        ) {
            return;
        }
        
        if (thing.nofire) {
            if (thing.nofire > 1) {
                other.death(other);
            }
            return;
        }
        
        if (thing.nofiredeath) {
            thing.EightBitter.AudioPlayer.playLocal("Bump", thing.EightBitter.getMidX(other));
            thing.death(thing);
        } else {
            thing.EightBitter.AudioPlayer.playLocal("Kick", thing.EightBitter.getMidX(other));
            thing.death(thing, 2);
            thing.EightBitter.scoreOn(thing.scoreFire, thing);
        }
        
        other.death(other);
    }
    
    /**
     * 
     */
    function collideCastleFireball(thing, other) {
        thing.death(thing);
    }
    
    /**
     * 
     */
    function collideShell(thing, other) {
        // If only one is a shell, it should be other, not thing
        if (thing.shell) {
            if (other.shell) {
                return thing.EightBitter.collideShellShell(thing, other);
            }
            return thing.EightBitter.collideShell(thing, other);
        }
        
        // Hitting a solid (e.g. wall) 
        if (thing.grouptype === "Solid") {
            return thing.EightBitter.collideShellSolid(thing, other);
        }
        
        // Hitting the player
        if (thing.player) {
            return thing.EightBitter.collideShellPlayer(thing, other);
        }
        
        // Assume anything else to be an enemy, which only moving shells kill
        if (other.xvel) {
            thing.EightBitter.killFlip(thing);
            if (thing.shellspawn) {
                thing = thing.EightBitter.killSpawn(thing);
            }
            
            thing.EightBitter.AudioPlayer.play("Kick");
            thing.EightBitter.scoreOn(thing.EightBitter.findScore(other.enemyhitcount), thing);
            other.enemyhitcount += 1;
        } else {
            thing.moveleft = thing.EightBitter.objectToLeft(thing, other);
        }
    }
    
    /**
     * 
     */
    function collideShellSolid(thing, other) {
        if (other.right < thing.right) {
            thing.EightBitter.AudioPlayer.playLocal("Bump", thing.left);
            thing.EightBitter.setRight(other, thing.left);
            other.xvel = -other.speed;
            other.moveleft = true;
        } else {
            thing.EightBitter.AudioPlayer.playLocal("Bump", thing.right);
            thing.EightBitter.setLeft(other, thing.right);
            other.xvel = other.speed;
            other.moveleft = false;
        }
    }
    
    /**
     * 
     */
    function collideShellPlayer(thing, other) {
        var shelltoleft = thing.EightBitter.objectToLeft(other, thing),
            playerjump = thing.yvel > 0 && (
                thing.bottom <= other.top + thing.EightBitter.unitsize * 2
            );
        
        // Star players kill the shell no matter what
        if (thing.star) {
            thing.EightBitter.scorePlayerShell(thing, other);
            other.death(other, 2);
            return;
        }
        
        // If the shell is already being landed on by the player, see if it's
        // still being pushed to the side, or has reversed direction (is deadly)
        if (other.landing) {
            // Equal shelltoleft measurements: it's still being pushed
            if (other.shelltoleft === shelltoleft) {
                // Tepmorarily increase the landing count of the shell; if it is 
                // just being started, that counts as the score hit
                other.landing += 1;
                if (other.landing === 1) {
                    thing.EightBitter.scorePlayerShell(thing, other);
                }
                thing.EightBitter.TimeHandler.addEvent(function (other) {
                    other.landing -= 1;
                }, 2, other);
            }
            // Different shelltoleft measurements: it's deadly
            else {
                thing.death(thing);
            }
            return;
        }
        
        // If the shell is being kicked by the player, either by hitting a still
        // shell or jumping onto an already moving one
        if (other.xvel === 0 || playerjump) {
            // thing.EightBitter.scorePlayerShell(thing, other);
            
            // Reset any signs of peeking from the shell
            other.counting = 0;
            if (other.peeking) {
                other.peeking = false;
                thing.EightBitter.removeClass(other, "peeking");
                other.height -= thing.EightBitter.unitsize / 8;
                thing.EightBitter.updateSize(other);
            }
            
            // If the shell is standing still, make it move
            if (other.xvel === 0) {
                thing.EightBitter.scoreOn(100, other);
                if (shelltoleft) {
                    other.moveleft = true;
                    other.xvel = -other.speed;
                } else {
                    other.moveleft = false;
                    other.xvel = other.speed;
                }
                other.hitcount += 1;
                thing.EightBitter.TimeHandler.addEvent(function (other) {
                    other.hitcount -= 1;
                }, 2, other);
            }
            // Otherwise it was moving, but should now be still
            else {
                other.xvel = 0;
            }
            
            // If the player is landing on the shell (with movements and xvels
            // already set), the player should then jump up a bit
            if (playerjump) {
                thing.EightBitter.AudioPlayer.play("Kick");
                
                if (!other.xvel) {
                    thing.EightBitter.jumpEnemy(thing, other);
                    thing.yvel *= 2;
                    // thing.EightBitter.scorePlayerShell(thing, other);
                    thing.EightBitter.setBottom(thing, other.top - thing.EightBitter.unitsize, true);
                } else {
                    // thing.EightBitter.scorePlayerShell(thing, other);
                }
                
                other.landing += 1;
                other.shelltoleft = shelltoleft;
                thing.EightBitter.TimeHandler.addEvent(function (other) {
                    other.landing -= 1;
                }, 2, other);
            }
        } 
        // Since the player is touching the shell normally, that's a death if
        // the shell isn't moving away
        else {
            if (!other.hitcount && (
                (shelltoleft && other.xvel > 0) 
                || (!shelltoleft && other.xvel < 0)
            )) {
                thing.death(thing);
            }
        }
    }
    
    /**
     * 
     */
    function collideShellShell(thing, other) {
        if (thing.xvel !== 0) {
            if (other.xvel !== 0) {
                var temp = thing.xvel;
                thing.xvel = other.xvel;
                other.xvel = temp;
                
                thing.EightBitter.shiftHoriz(thing, thing.xvel);
                thing.EightBitter.shiftHoriz(other, other.xvel);
            } else {
                thing.EightBitter.StatsHolder.increase("score", 500);
                other.death(other);
            }
        } else {
            thing.EightBitter.StatsHolder.increase("score", 500);
            thing.death(thing);
        }
    }
    
    /**
     * 
     */
    function collideEnemy(thing, other) {
        // If either is a player, make it thing (not other)
        if (!thing.player && other.player) {
            return thing.EightBitter.collideEnemy(thing, other);
        }
        
        // Death: nothing happens
        if (!thing.EightBitter.isCharacterAlive(thing)
            || !thing.EightBitter.isCharacterAlive(other)) {
            return;
        }
        
        // Items
        if (thing.group === "item") {
            if (thing.collidePrimary) {
                return thing.collide(other, thing);
            }
            return;
        }
        
        // Player interacting with enemies
        if (thing.player) {
            // Player landing on top of an enemy
            if (
                (thing.star && !other.nostar)
                || (
                    !thing.EightBitter.MapScreener.underwater
                    && (!other.deadly && isThingOnThing(thing, other))
                )
            ) {
                
                // Enforces toly (not touching means stop)
                if (thing.EightBitter.isCharacterAboveEnemy(thing, other)) {
                    return;
                }
                
                // A star player just kills the enemy, no matter what
                if (thing.star) {
                    other.nocollide = true;
                    other.death(other, 2);
                    thing.EightBitter.scoreOn(other.scoreStar, other);
                    thing.EightBitter.AudioPlayer.play("Kick");
                }
                // A non-star player kills the enemy with spawn, and hops
                else {
                    thing.EightBitter.setBottom(thing, 
                                Math.min(thing.bottom, 
                                        other.top + thing.EightBitter.unitsize));
                    thing.EightBitter.TimeHandler.addEvent(jumpEnemy, 0, thing, other);
                    
                    // thing.EightBitter.scoreOn(other.scoreStomp, other);
                    other.death(other, thing.star ? 2 : 0);
                    
                    thing.EightBitter.addClass(thing, "hopping");
                    thing.EightBitter.removeClasses(thing, "running skidding jumping one two three");
                    thing.hopping = true;
                    
                    if (thing.power === 1) {
                        thing.EightBitter.setPlayerSizeSmall(thing); 
                    }
                }
            }
            // Player being landed on by an enemy
            else if (!thing.EightBitter.isCharacterAboveEnemy(thing, other)) {
                thing.death(thing);
            }
        }
        // For non-players, it's just to characters colliding: they bounce
        else {
            thing.moveleft = thing.EightBitter.objectToLeft(thing, other);
            other.moveleft = !thing.moveleft;
        }
        
    }
    
    
    /**
     * 
     * @remarks thing is solid, other is character
     */
    function collideBottomBrick(thing, other) {
        if (other.solid && !thing.solid) {
            return thing.EightBitter.collideBottomBrick(other, thing);
        }
        
        if (thing.up || !other.player) {
            return;
        }
        
        thing.EightBitter.AudioPlayer.play("Bump");
        
        if (thing.used) {
            return;
        }
        
        thing.up = other;
        if (other.power > 1 && thing.breakable && !thing.contents) {
            thing.EightBitter.TimeHandler.addEvent(
                thing.EightBitter.killBrick, 2, thing, other
            );
            return;
        }
        
        thing.EightBitter.animateSolidBump(thing);
        
        if (thing.contents) {
            thing.EightBitter.TimeHandler.addEvent(function () {
                var output = thing.EightBitter.animateSolidContents(thing, other);
                
                if (thing.contents !== "Coin") {
                    thing.EightBitter.animateBlockBecomesUsed(thing);
                } else {
                    if (thing.lastcoin) {
                        thing.EightBitter.animateBlockBecomesUsed(thing);
                    } else {
                        thing.EightBitter.TimeHandler.addEvent(function () {
                            thing.lastcoin = true;
                        }, 245);
                    }
                }
            }, 7);
        }
    }
    
    /**
     * 
     */
    function collideBottomBlock(thing, other) {
        if (other.solid && !thing.solid) {
            return thing.EightBitter.collideBottomBlock(other, thing);
        }
        
        if (thing.up || !other.player) {
            return;
        }
        
        if (thing.used) {
            thing.EightBitter.AudioPlayer.play("Bump");
            return;
        }
        
        thing.used = true;
        thing.hidden = false;
        thing.up = other;
        
        thing.EightBitter.animateSolidBump(thing);
        thing.EightBitter.removeClass(thing, "hidden");
        thing.EightBitter.switchClass(thing, "unused", "used");
        thing.EightBitter.TimeHandler.addEvent(thing.EightBitter.animateSolidContents, 7, thing, other);
    }
    
    /**
     * 
     */
    function collideVine(thing, other) {
        if (!thing.player || thing.attachedSolid || thing.climbing) {
            return;
        }
        
        if (thing.bottom > other.bottom + thing.EightBitter.unitsize * 2) {
            return;
        }
        
        other.attachedCharacter = thing;
        thing.attachedSolid = other;
        
        thing.nofall = true;
        thing.skipoverlaps = true;
        thing.resting = undefined;
        
        // To the left of the vine
        if (thing.right < other.right) {
            thing.lookleft = false;
            thing.moveleft = false;
            thing.attachedDirection = -1;
            thing.EightBitter.unflipHoriz(thing);
        }
        // To the right of the vine
        else {
            thing.lookleft = true;
            thing.moveleft = true;
            thing.attachedDirection = 1;
            thing.EightBitter.flipHoriz(thing);
        }
        
        thing.EightBitter.addClass(thing, "climbing");
        thing.EightBitter.removeClasses(thing, "running", "jumping", "skidding");
        thing.EightBitter.thingPauseVelocity(thing);
        thing.EightBitter.TimeHandler.cancelClassCycle(thing, "running");
        thing.EightBitter.TimeHandler.addClassCycle(thing, ["one", "two"], "climbing");
        
        thing.attachedLeft = !thing.EightBitter.objectToLeft(thing, other);
        thing.attachedOff = thing.attachedLeft ? 1 : -1;
        
        thing.movement = thing.EightBitter.movePlayerVine;
    }
    
    /**
     * 
     */
    function collideSpringboard(thing, other) {
        if (
            thing.player && thing.yvel >= 0 && !other.tension
            && thing.EightBitter.isCharacterOnSolid(thing, other)
        ) {
            other.tension = other.tensionSave = Math.max(
                thing.yvel * 0.77,
                thing.EightBitter.unitsize
            );
            thing.movement = thing.EightBitter.movePlayerSpringboardDown;
            thing.spring = other;
            thing.xvel /= 2.8;
        } else {
            thing.EightBitter.collideCharacterSolid(thing, other);
        }
    }
    
    /**
     * 
     */
    function collideWaterBlocker(thing, other) {
        thing.EightBitter.collideCharacterSolid(thing, other);
    }
    
    /**
     * 
     * 
     * @notes thing is Player; other is the flag detector
     */
    function collideFlagpole(thing, other) {
        thing.star = true;
        thing.nocollidechar = true;
        thing.EightBitter.MapScreener.nokeys = true;
        thing.EightBitter.MapScreener.notime = true;
        thing.EightBitter.MapScreener.canscroll = false;
        
        thing.EightBitter.killNPCs();
        thing.EightBitter.thingPauseVelocity(thing);
        thing.EightBitter.setRight(thing, other.left + thing.EightBitter.unitsize * 3);
        
        thing.EightBitter.removeClasses(thing, "running jumping skidding");
        thing.EightBitter.addClass(thing, "climbing animated");
        thing.EightBitter.TimeHandler.addClassCycle(thing, ["one", "two"], "climbing");
        
        thing.EightBitter.AudioPlayer.pauseAll();
        thing.EightBitter.AudioPlayer.play("Flagpole");
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.EightBitter.shiftVert(thing, thing.EightBitter.unitsize);
            
            if (thing.bottom > other.bottom) {
                thing.movement = false;
                thing.EightBitter.setBottom(thing, other.bottom);
                thing.EightBitter.TimeHandler.cancelClassCycle(thing, "climbing");
                thing.EightBitter.TimeHandler.addEvent(function () {
                    thing.EightBitter.collideFlagBottom(thing, other);
                }, 21);
                return true;
            }
        }, 1, Infinity);
    }
    
    /**
     * 
     */
    function collideFlagBottom(thing, other) {
        thing.keys.run = 1;
        thing.maxspeed = thing.walkspeed;
        
        thing.EightBitter.flipHoriz(thing);
        thing.EightBitter.shiftHoriz(thing, (thing.width + 1) * thing.EightBitter.unitsize);
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.EightBitter.AudioPlayer.play("Stage Clear");
            thing.EightBitter.animatePlayerOffPole(thing, true);
        }, 14);
    }
    
    /**
     * 
     * 
     * @param {Thing} thing   player
     * @param {Thing} other   axe
     */
    function collideCastleAxe(thing, other) {
        if (!thing.EightBitter.isCharacterAlive(thing)) {
            return;
        }
        
        if (
            thing.right < other.left + other.EightBitter.unitsize
            || thing.bottom > other.bottom - other.EightBitter.unitsize
        ) {
            return;
        }
        
        thing.EightBitter.thingPauseVelocity(thing);
        thing.EightBitter.killNormal(other);
        thing.EightBitter.killNPCs();
        
        thing.EightBitter.MapScreener.nokeys = true;
        thing.EightBitter.MapScreener.notime = true;
        
        thing.EightBitter.AudioPlayer.playTheme("World Clear");
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.yvel = 0;
            thing.keys.run = 1;
            thing.maxspeed = thing.walkspeed;
            thing.EightBitter.thingResumeVelocity(thing);
            thing.EightBitter.MapScreener.canscroll = true;
        }, 140);
    }
    
    /**
     * 
     */
    function collideCastleDoor(thing, other) {
        var time = String(thing.EightBitter.StatsHolder.get("time")),
            numFireworks = Number(time[time.length - 1]);
        
        thing.EightBitter.killNormal(thing);
        if (!thing.player) {
            return;
        }
        
        if (!(numFireworks === 1 || numFireworks === 3 || numFireworks === 6)) {
            numFireworks = 0;
        }
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.EightBitter.StatsHolder.decrease("time");
            thing.EightBitter.StatsHolder.increase("score", 50);
            thing.EightBitter.AudioPlayer.play("Coin");
            
            if (thing.EightBitter.StatsHolder.get("time") <= 0) {
                thing.EightBitter.TimeHandler.addEvent(function () {
                    thing.EightBitter.animateEndLevelFireworks(thing, other, numFireworks);
                }, 35);
                return true;
            }
        }, 1, Infinity);
    }
    
    /** 
     * 
     */
    function collideCastleNPC(thing, other) {
        var keys = other.collection.npc.collectionKeys,
            interval = 140,
            i = 0,
            letters, j;
        
        thing.keys.run = 0;
        thing.EightBitter.killNormal(other);
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            letters = other.collection[keys[i]].children;
            
            for (j = 0; j < letters.length; j += 1) {
                if (letters[j].title !== "TextSpace") {
                    letters[j].hidden = false;
                }
            }
            
            i += 1;
        }, interval, keys.length);
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.EightBitter.collideLevelTransport(thing, other);
        }, (interval * keys.length) + 280);
    }
    
    /**
     * 
     */
    function collideTransport(thing, other) {
        thing.EightBitter.collideCharacterSolid(thing, other);
        if (thing.resting !== other) {
            return;
        }

        other.xvel = thing.EightBitter.unitsize / 2;
        other.movement = thing.EightBitter.movePlatform;
        other.collide = thing.EightBitter.collideCharacterSolid;
    }
    
    /**
     * 
     * 
     * thing is character; other is detector
     */
    function collideDetector(thing, other) {
        if (!thing.player) {
            if (other.activateFail) {
                other.activateFail(thing);
            }
            return;
        }
        other.activate(thing, other);
        thing.EightBitter.killNormal(other);
    }
    
    /**
     * 
     */
    function collideLevelTransport(thing, other) {
        var transport = other.transport;
        
        if (typeof transport === "undefined") {
            throw new Error("No transport given to collideLevelTransport");
        }
        
        if (transport.constructor === String) {
            thing.EightBitter.setLocation(transport);
        } else if (typeof transport.map !== "undefined") {
            thing.EightBitter.setMap(transport.map);
        } else if (typeof transport.location !== "undefined") {
            thing.EightBitter.setLocation(transport.location);
        } else {        
            throw new Error("Unknown transport type:" + transport);
        }
    }   
    
    
    /* Movement functions
    */
    
    /**
     * Base, generic movement function for simple characters. The Thing moves
     * at a constant rate in either the x or y direction, and switches direction
     * only if directed by the engine (e.g. when it hits a Solid)
     * 
     * @param {Thing} thing
     * @remarks thing.speed is the only required member attribute; .direction
     *          and .moveleft should be set by the game engine.
     */
    function moveSimple(thing) {
        // If the thing is looking away from the intended direction, flip it
        if (thing.direction != thing.moveleft) {
            // thing.moveleft is truthy: it should now be looking to the right
            if (thing.moveleft) {
                thing.xvel = -thing.speed;
                if (!thing.noflip) {
                    thing.EightBitter.unflipHoriz(thing);
                }
            }
            // thing.moveleft is falsy: it should now be looking to the left
            else {
                thing.xvel = thing.speed;
                if (!thing.noflip) {
                    thing.EightBitter.flipHoriz(thing);
                }
            }
            thing.direction = thing.moveleft;
        }
    }
    
    /**
     * Extension of the moveSimple movement function for Things that shouldn't
     * fall off the edge of their resting blocks
     * @param {Thing} thing
     */
    function moveSmart(thing) {
        // Start off by calling moveSimple for normal movement
        thing.EightBitter.moveSimple(thing);
        
        // If this isn't resting, it's the same as moveSimple
        if (thing.yvel !== 0) {
            return;
        }

        if (!thing.resting || !thing.EightBitter.isCharacterOnResting(thing, thing.resting)) {
            if (thing.moveleft) {
                thing.EightBitter.shiftHoriz(thing, thing.EightBitter.unitsize, true);
            } else {
                thing.EightBitter.shiftHoriz(thing, -thing.EightBitter.unitsize, true);
            }
            thing.moveleft = !thing.moveleft;
        }

        
        // // Check for being over the edge in the direction of movement
        // if (thing.moveleft) {
            // if (thing.left + thing.EightBitter.unitsize <= thing.resting.left) {
                // thing.EightBitter.shiftHoriz(thing, thing.EightBitter.unitsize);
                // thing.moveleft = false;
            // }
        // } else {
            // if (thing.right - thing.EightBitter.unitsize >= thing.resting.right) {
                // thing.EightBitter.shiftHoriz(thing, -thing.EightBitter.unitsize);
                // thing.moveleft = true;
            // }
        // }
    }
    
    /**
     * Extension of the moveSimple movement function for Things that should
     * jump whenever they hit a resting block.
     * @param {Thing} thing
     * @remarks thing.jumpheight is required to know how high to jump
     */
    function moveJumping(thing) {
        // Start off by calling moveSimple for normal movement
        thing.EightBitter.moveSimple(thing);
        
        // If .resting, jump!
        if (thing.resting) {
            thing.yvel = -Math.abs(thing.jumpheight);
            thing.resting = undefined;
        }
    }
    
    /**
     * 
     * 
     * @remarks thing.counter must be a number set elsewhere
     */
    function movePacing(thing) {
        thing.counter += .007;
        thing.xvel = Math.sin(Math.PI * thing.counter) / 2.1;
    }
    
    /**
     * 
     */
    function moveHammerBro(thing) {
        thing.EightBitter.movePacing(thing);
        thing.EightBitter.lookTowardsPlayer(thing);
        thing.nocollidesolid = thing.yvel < 0 || thing.falling;
    }
    
    /**
     * 
     */
    function moveBowser(thing) {
        // Facing to the right
        if (thing.flipHoriz) {
            // To the left of the player: walk to the right
            if (thing.EightBitter.objectToLeft(thing, thing.EightBitter.player)) {
                thing.EightBitter.moveSimple(thing);
            }
            // To the right of the player: look to the left and movePacing as normal
            else {
                thing.lookleft = thing.moveleft = true;
                thing.EightBitter.unflipHoriz(thing);
                thing.EightBitter.movePacing(thing);
            }
        } 
        // Facing to the left
        else {
            // To the left of the player: look and walk to the right
            if (thing.EightBitter.objectToLeft(thing, thing.EightBitter.player)) {
                thing.lookleft = thing.moveleft = false;
                thing.EightBitter.flipHoriz(thing);
                thing.EightBitter.moveSimple(thing);
            }
            // To the right of the player: movePacing as normal
            // todo: tell fire and jump to skip if !flipHoriz
            else {
                thing.EightBitter.movePacing(thing);
            }
        }
        
        // if (thing.flipHoriz) {
            // if (thing.EightBitter.objectToLeft(thing, thing.EightBitter.player)) {
                // thing.EightBitter.flipHoriz(thing);
            // } else {
                // thing.EightBitter.moveSimple(thing);
            // }
        // } else {
            // if (thing.EightBitter.objectToLeft(thing.EightBitter.player, thing)) {
                // thing.EightBitter.unflipHoriz(thing);
                // thing.EightBitter.moveSimple(thing);
            // }   
        // }
        
    }
    
    /**
     * 
     */
    function moveBowserFire(thing) {
        if (Math.round(thing.bottom) === Math.round(thing.ylev)) {
            thing.movement = undefined;
            return;
        }
        thing.EightBitter.shiftVert(
            thing,
            Math.min(Math.max(0, thing.ylev - thing.bottom), thing.EightBitter.unitsize)
        );
    }
    
    /**
     * Movement function for Things that float up and down (vertically).
     * If the Thing has reached thing.begin or thing.end, it gradually switches
     * thing.yvel
     * 
     * @param {Thing} thing
     * @remarks thing.maxvel is used as the maximum absolute speed vertically
     * @remarks thing.begin and thing.end are used as the vertical endpoints;
     *          .begin is the bottom and .end is the top (since begin <= end)
     */
    function moveFloating(thing) {
        // If above the endpoint:
        if (thing.top <= thing.end) {
            thing.yvel = Math.min(thing.yvel + thing.EightBitter.unitsize / 64, thing.maxvel);
        }
        // If below the endpoint:
        else if (thing.bottom >= thing.begin) {
            thing.yvel = Math.max(thing.yvel - thing.EightBitter.unitsize / 64, -thing.maxvel);
        }
        
        // Deal with velocities and whether the player is resting on this
        thing.EightBitter.movePlatform(thing);
    }
    
    /**
     * Actual movement function for Things that float sideways (horizontally).
     * If the Thing has reached thing.begin or thing.end, it gradually switches
     * thing.xvel
     * 
     * @param {Thing} thing
     * @remarks thing.maxvel is used as the maximum absolute speed horizontally
     * @remarks thing.begin and thing.end are used as the horizontal endpoints;
     *          .begin is the left and .end is the right (since begin <= end)
     */
    function moveSliding(thing) {
        // If to the left of the endpoint:
        if (thing.EightBitter.MapScreener.left + thing.left <= thing.begin) {
            thing.xvel = Math.min(thing.xvel + thing.EightBitter.unitsize / 64, thing.maxvel);
        }
        // If to the right of the endpoint:
        else if (thing.EightBitter.MapScreener.left + thing.right > thing.end) {
            thing.xvel = Math.max(thing.xvel - thing.EightBitter.unitsize / 64, -thing.maxvel);
        }
        
        // Deal with velocities and whether the player is resting on this
        thing.EightBitter.movePlatform(thing);
    }
    
    /**
     * Ensures thing.begin <= thing.end (so there won't be glitches pertaining
     * to them in functions like moveFloating and moveSliding
     * 
     * @param {Thing} thing
     */
    function setMovementEndpoints(thing) {
        if (thing.begin > thing.end) {
            var temp = thing.begin;
            thing.begin = thing.end;
            thing.end = temp;
        }
        
        thing.begin *= thing.EightBitter.unitsize;
        thing.end *= thing.EightBitter.unitsize;
    }
    
    /**
     * Moves a platform by its velocities, and checks for whether the player
     * is resting on it (if so, the player must be moved accordingly)
     * 
     * @param {Thing} thing
     */
    function movePlatform(thing) {
        thing.EightBitter.shiftHoriz(thing, thing.xvel);
        thing.EightBitter.shiftVert(thing, thing.yvel);
        
        // If the player is resting on this and this is alive, move the player
        if (thing === thing.EightBitter.player.resting && thing.EightBitter.player.alive) {
            thing.EightBitter.setBottom(thing.EightBitter.player, thing.top);
            thing.EightBitter.shiftHoriz(thing.EightBitter.player, thing.xvel);
            
            // If the player is too far to the right or left, stop that overlap
            if (thing.EightBitter.player.right > thing.EightBitter.MapScreener.innerWidth) {
                thing.EightBitter.setRight(
                    thing.EightBitter.player, 
                    thing.EightBitter.MapScreener.innerWidth
                );
            } else if (thing.EightBitter.player.left < 0) {
                thing.EightBitter.setLeft(thing.EightBitter.player, 0);
            }
        }
    }
    
    /**
     * 
     */
    function movePlatformSpawn(thing) {
        if (thing.bottom < 0) {
            thing.EightBitter.setTop(thing, thing.EightBitter.MapScreener.bottomPlatformMax);
        } else if (thing.top > thing.EightBitter.MapScreener.bottomPlatformMax) {
            thing.EightBitter.setBottom(thing, 0);
        } else {
            thing.EightBitter.movePlatform(thing);
            return;
        }
        
        if (thing.EightBitter.player && thing.EightBitter.player.resting === thing) {
            thing.EightBitter.player.resting = undefined;
        }
    }
    
    /**
     * 
     */
    function movePlatformScale(thing) {
        // If the Player is resting on this, fall hard
        if (thing.EightBitter.player.resting === thing) {
            thing.yvel += thing.EightBitter.unitsize / 16;
        }
        // If this still has velocity from a player, fall less
        else if (this.yvel > 0) {
            thing.yvel -= thing.EightBitter.unitsize / 16;
        }
        // Not being rested upon or having a yvel means nothing happens
        else {
            return;
        }
        
        thing.tension += thing.yvel;
        thing.partners.platformOther.tension -= thing.yvel;
        
        // If the partner has fallen off, everybody falls!
        if (thing.partners.platformOther.tension <= 0) {
            thing.partners.platformOther.yvel = thing.EightBitter.unitsize / 2;
            thing.collide = thing.partners.platformOther.collide = thing.EightBitter.collideCharacterSolid;
            thing.movement = thing.partners.platformOther.movement = thing.EightBitter.moveFreeFalling;
        }
        
        thing.EightBitter.shiftVert(thing, thing.yvel);
        thing.EightBitter.shiftVert(thing.partners.platformOther, -thing.yvel);
        
        thing.EightBitter.setHeight(thing.partners.stringHere, thing.partners.stringHere.height + thing.yvel / thing.EightBitter.unitsize);
        thing.EightBitter.setHeight(thing.partners.stringOther, Math.max(thing.partners.stringOther.height - thing.yvel / thing.EightBitter.unitsize, 0));
    }
    
    /**
     * 
     */
    function moveVine(thing) {
        thing.EightBitter.increaseHeight(thing, thing.speed);
        
        if (thing.attachedSolid) {
            thing.EightBitter.setBottom(thing, thing.attachedSolid.top);
        }
        
        if (thing.attachedCharacter) {
            thing.EightBitter.shiftVert(thing.attachedCharacter, -thing.speed); 
        }
    }
    
    /**
     * 
     */
    function moveSpringboardUp(thing) {
        var player = thing.EightBitter.player;
        
        thing.EightBitter.reduceHeight(thing, -thing.tension, true);
        thing.tension *= 2;
            
        // If the spring height is past the normal, it's done moving
        if (thing.height > thing.heightNormal) {
            thing.EightBitter.reduceHeight(
                thing, 
                (thing.height - thing.heightNormal) * thing.EightBitter.unitsize
            );
            if (thing === player.spring) {
                player.yvel = Math.max(
                    thing.EightBitter.unitsize * -2,
                    thing.tensionSave * -.98
                );
                player.resting = player.spring = undefined;
                player.movement = FullScreenMario.prototype.movePlayer;
            }
            thing.tension = 0;
            thing.movement = undefined;
        } else {
            thing.EightBitter.setBottom(player, thing.top);
        }
        
        if (thing === player.spring) {
            if (!thing.EightBitter.isThingTouchingThing(player, thing)) {
                player.spring = undefined;
                player.movement = FullScreenMario.prototype.movePlayer;
            }
        }
    }        /**     *      */    function moveFalling(thing) {        // If the player isn't resting on this thing (any more?), ignore it        if (thing.EightBitter.player.resting !== thing) {            // Since the player might have been on this thing but isn't anymore,             // set the yvel to 0 just in case            thing.yvel = 0;            return;        }                // Since the player is on this thing, start falling more        thing.EightBitter.shiftVert(thing, thing.yvel += thing.EightBitter.unitsize / 8);        thing.EightBitter.setBottom(thing.EightBitter.player, thing.top);                // After a velocity threshold, start always falling        if (thing.yvel >= (thing.fallThresholdStart || thing.EightBitter.unitsize * 2.8)) {            thing.freefall = true;            thing.movement = thing.EightBitter.moveFreeFalling;        }    }        /**     *      */    function moveFreeFalling(thing) {        // Accelerate downwards, increasing the thing's y-velocity        thing.yvel += thing.acceleration || thing.EightBitter.unitsize / 16;        thing.EightBitter.shiftVert(thing, thing.yvel);
                // After a velocity threshold, stop accelerating        if (thing.yvel >= (thing.fallThresholdEnd || thing.EightBitter.unitsize * 2)) {
            thing.movement = movePlatform;        }    }
    
    /**
     * 
     */
    function moveShell(thing) {
        if (thing.xvel !== 0) {
            return;
        }
        thing.counting += 1;
        
        if (thing.counting === 350) {
            thing.peeking = true;
            thing.height += thing.EightBitter.unitsize / 8;
            thing.EightBitter.addClass(thing, "peeking");
            thing.EightBitter.updateSize(thing);
        } else if (thing.counting === 490) {
            thing.spawnsettings = {
                "smart": thing.smart
            };
            thing.EightBitter.killSpawn(thing);
        }
    }
    
    /**
     * 
     */
    function movePiranha(thing) {
        var bottom = thing.bottom,
            height = thing.height + thing.direction,
            atEnd = false;
        
        if (thing.resting && !FSM.isCharacterAlive(thing.resting)) {
            bottom = thing.top + thing.constructor.prototype.height * thing.EightBitter.unitsize;
            height = Infinity;
            thing.resting = undefined;
        }
        
        if (height <= 0) {
            height = thing.height = 0;
            atEnd = true;
        } else if (height >= thing.constructor.prototype.height) {
            height = thing.height = thing.constructor.prototype.height;
            atEnd = true;
        }
        
        thing.EightBitter.setHeight(thing, height, true, true);
        thing.EightBitter.setBottom(thing, bottom);
        
        if (atEnd) {
            thing.counter = 0;
            thing.movement = movePiranhaLatent;
        }
    }
    
    /**
     * 
     */
    function moveBubble(thing) {
        if (thing.top < thing.EightBitter.MapScreener.top + thing.EightBitter.unitsize * 16) {
            thing.EightBitter.killNormal(thing);
        }
    }
    
    /**
     * 
     */
    function moveCheepCheep(thing) {
        if (thing.top < thing.EightBitter.unitsize * 24) {
            thing.EightBitter.setTop(thing, thing.EightBitter.unitsize * 24);
        }
    }
    
    /**
     * 
     */
    function moveCheepCheepFlying(thing) {
        if (thing.top < thing.EightBitter.unitsize * 28) {
            thing.movement = undefined;
            thing.nofall = false;
        }
    }
    
    /**
     * 
     */
    function movePiranhaLatent(thing) {
        var playerx = thing.EightBitter.getMidX(thing.EightBitter.player);

        if (thing.counter >= thing.countermax
                && (thing.height > 0
                    || playerx < thing.left - thing.EightBitter.unitsize * 8
                    || playerx > thing.right + thing.EightBitter.unitsize * 8)) {
            thing.movement = undefined;
            thing.direction *= -1;
            
            thing.EightBitter.TimeHandler.addEvent(function () {
                thing.movement = thing.EightBitter.movePiranha;
            }, 7);
        } else {
            thing.counter += 1;
        }
    }
    
    /**
     * 
     */
    function moveBlooper(thing) {
        switch (thing.counter) {
            case 56: 
                thing.squeeze = true; 
                thing.counter += 1;
                break;
            case 63:
                thing.EightBitter.moveBlooperSqueezing(thing); 
                break;
            default: 
                thing.counter += 1;
                if (thing.top < thing.EightBitter.unitsize * 18) {
                    thing.EightBitter.moveBlooperSqueezing(thing);
                }
                break;
        }

        if (thing.squeeze) {
            thing.yvel = Math.max(thing.yvel + .021, .7); // going down
        } else {
            thing.yvel = Math.min(thing.yvel - .035, -.7); // going up
        }
        
        if (thing.top > thing.EightBitter.unitsize * 24) {
            thing.EightBitter.shiftVert(thing, thing.yvel, true);
        }

        if (!thing.squeeze) {
            if (thing.EightBitter.player.left > thing.right + thing.EightBitter.unitsize * 8) {
                // Go to the right
                thing.xvel = Math.min(thing.speed, thing.xvel + thing.EightBitter.unitsize / 32);
            }
            else if (thing.EightBitter.player.right < thing.left - thing.EightBitter.unitsize * 8) {
                // Go to the left
                thing.xvel = Math.max(-thing.speed, thing.xvel - thing.EightBitter.unitsize / 32);
            }
        }
    }
    
    /**
     * 
     */
    function moveBlooperSqueezing(thing) {
        if (thing.squeeze != 2) {
            thing.squeeze = 2;
            thing.EightBitter.addClass(thing, "squeeze");
            thing.EightBitter.setHeight(thing, 10, true, true);
        }
        
        if (thing.squeeze < 7) {
            thing.xvel /= 1.4;
        } else if (thing.squeeze === 7) {
            thing.xvel = 0;
        }
        
        thing.squeeze += 1;
        
        if (thing.top > thing.EightBitter.player.bottom || thing.bottom > 360) {
            thing.EightBitter.animateBlooperUnsqueezing(thing);
        }
    }
    
    /**
     * 
     */
    function movePodobooFalling(thing) {
        if (thing.top >= thing.starty) {
            thing.yvel = 0;
            thing.movement = undefined;
            thing.EightBitter.unflipVert(thing);
            thing.EightBitter.setTop(thing, thing.starty);
            return;
        }
        
        if (thing.yvel >= thing.speed) {
            thing.yvel = thing.speed;
            return;
        }
        
        if (!thing.flipVert && thing.yvel > 0) {
            thing.EightBitter.flipVert(thing);
        }
        
        thing.yvel += thing.acceleration;
    }
    
    /**
     * 
     */
    function moveLakitu(thing) {
        var player = thing.EightBitter.player;
        // If the player is moving quickly to the right, move in front and stay there
        if (
            player.xvel > thing.EightBitter.unitsize / 8
            && player.left > thing.EightBitter.MapScreener.width / 2
        ) {
            if (thing.left < player.right + thing.EightBitter.unitsize * 16) {
                // slide to xloc
                thing.EightBitter.slideToX(
                    thing,
                    player.right + player.xvel + thing.EightBitter.unitsize * 32,
                    player.maxspeed * 1.4
                );
                thing.counter = 0;
            }
        } else {
            thing.counter += .007;
            thing.EightBitter.slideToX(
                thing,
                player.left + player.xvel + Math.sin(Math.PI * thing.counter) * 117,
                player.maxspeed * .7
            );
        }
    }
    
    /**
     * 
     */
    function moveLakituInitial(thing) {
        if (thing.right < thing.EightBitter.player.left) {
            thing.counter = 0;
            thing.movement = thing.EightBitter.moveLakitu;
            thing.movement(thing);
            return;
        }
        
        thing.EightBitter.shiftHoriz(thing, -thing.EightBitter.unitsize);
    }
    
    /**
     * 
     */
    function moveLakituFleeing(thing) {
        thing.EightBitter.shiftHoriz(thing, -thing.EightBitter.unitsize);
    }
    
    /**
     * 
     */
    function moveCoinEmerge(thing, parent) {
        thing.EightBitter.shiftVert(thing, thing.yvel);
        if (parent && thing.bottom >= thing.blockparent.bottom) {
            thing.EightBitter.killNormal(thing);
        }
    }
    
    /**
     * 
     * 
     * This is one of the worst written functions in the engine. Kill me please.
     */
    function movePlayer(thing) {
        // Not jumping
        if (!thing.keys.up) {
            thing.keys.jump = 0;
        }
        // Jumping
        else if (
            thing.keys.jump > 0 
            && (thing.yvel <= 0 || thing.EightBitter.MapScreener.underwater)
        ) {
            if (thing.EightBitter.MapScreener.underwater) {
                thing.EightBitter.animatePlayerPaddling(thing);
                thing.EightBitter.removeClass(thing, "running");
            }
            
            if (thing.resting) {
                if (thing.resting.xvel) {
                    thing.xvel += thing.resting.xvel;
                }
                thing.resting = undefined;
            }
            // Jumping, not resting
            else {
                if (!thing.jumping && !thing.EightBitter.MapScreener.underwater) {
                    thing.EightBitter.switchClass(thing, "running skidding", "jumping");
                }
                thing.jumping = true;
                
                if (thing.power > 1 && thing.crouching) {
                    thing.EightBitter.removeClass(thing, "jumping");
                }
            }
            if (!thing.EightBitter.MapScreener.underwater) {
                thing.keys.jumplev += 1;
                var dy = FullScreenMario.unitsize 
                    / (Math.pow(thing.keys.jumplev, thing.EightBitter.MapScreener.jumpmod - .0014 * thing.xvel));
                thing.yvel = Math.max(thing.yvel - dy, thing.EightBitter.MapScreener.maxyvelinv);
            }
        }
      
        // Crouching
        if (thing.keys.crouch && !thing.crouching && thing.resting) {
            if (thing.power > 1) {
                thing.crouching = true;
                thing.EightBitter.removeClass(thing, "running");
                thing.EightBitter.addClass(thing, "crouching");
                thing.EightBitter.setHeight(thing, 11, true, true);
                thing.height = 11;
                thing.tolyOld = thing.toly;
                thing.toly = thing.EightBitter.unitsize * 4;
                thing.EightBitter.updateBottom(thing, 0);
                thing.EightBitter.updateSize(thing);
            }
            // Pipe movement
            if (thing.resting.actionTop) {
                thing.EightBitter.ModAttacher.fireEvent("onPlayerActionTop", thing, thing.resting);
                thing.resting.actionTop(thing, thing.resting);
            }
        }
      
        // Running
        var decel = 0 ; // (how much extra to decrease)
        // If a button is pressed, hold/increase speed
        if (thing.keys.run != 0 && !thing.crouching) {
            var dir = thing.keys.run,
                // No sprinting underwater
                sprinting = (thing.keys.sprint && !thing.EightBitter.MapScreener.underwater) || 0,
                adder = dir * (.098 * (sprinting + 1));
            
            // Reduce the speed, both by subtracting and dividing a little
            thing.xvel += adder || 0;
            thing.xvel *= .98;
            decel = .0007;
            
            // If you're accelerating in the opposite direction from your current velocity, that's a skid
            if ((thing.keys.run > 0) == thing.moveleft) {
                if (!thing.skidding) {
                    thing.EightBitter.addClass(thing, "skidding");
                    thing.skidding = true;
                }
            }
            // Not accelerating: make sure you're not skidding
            else if (thing.skidding) {
                thing.EightBitter.removeClass(thing, "skidding");
                thing.skidding = false;
            }
        }
        // Otherwise slow down a bit
        else {
            thing.xvel *= .98;
            decel = .035;
        }

        if (thing.xvel > decel) {
            thing.xvel -= decel;
        } else if (thing.xvel < -decel) {
            thing.xvel += decel;
        } else if (thing.xvel != 0) {
            thing.xvel = 0;
            if (!thing.EightBitter.MapScreener.nokeys && thing.keys.run == 0) {
                if (thing.keys.leftDown) {
                    thing.keys.run = -1;
                } else if (thing.keys.rightDown) {
                    thing.keys.run = 1;
                }
            }  
        }
      
        // Movement mods
        // Slowing down
        if (Math.abs(thing.xvel) < .14) {
            if (thing.running) {
                thing.running = false;
                if (thing.power == 1) {
                    thing.EightBitter.setPlayerSizeSmall(thing);
                }
                thing.EightBitter.removeClasses(thing, "running skidding one two three");
                thing.EightBitter.addClass(thing, "still");
                thing.EightBitter.TimeHandler.cancelClassCycle(thing, "running");
            }
        }
        // Not moving slowly
        else if (!thing.running) {
            thing.running = true;
            thing.EightBitter.animatePlayerRunningCycle(thing);
            if (thing.power == 1) {
                thing.EightBitter.setPlayerSizeSmall(thing);
            }
        }
        if (thing.xvel > 0) {
            thing.xvel = Math.min(thing.xvel, thing.maxspeed);
            if (thing.moveleft && (thing.resting || thing.EightBitter.MapScreener.underwater)) {
                thing.EightBitter.unflipHoriz(thing);
                thing.moveleft = false;
            }
        }
        else if (thing.xvel < 0) {
            thing.xvel = Math.max(thing.xvel, thing.maxspeed * -1);
            if (!thing.moveleft && (thing.resting || thing.EightBitter.MapScreener.underwater)) {
                thing.moveleft = true;
                thing.EightBitter.flipHoriz(thing);
            }
        }
      
        // Resting stops a bunch of other stuff
        if (thing.resting) {
            // Hopping
            if (thing.hopping) {
                thing.hopping = false;
                thing.EightBitter.removeClass(thing, "hopping");
                if (thing.xvel) {
                    thing.EightBitter.addClass(thing, "running");
                }
            }
            // Jumping
            thing.keys.jumplev = thing.yvel = thing.jumpcount = 0;
            if (thing.jumping) {
                thing.jumping = false;
                thing.EightBitter.removeClass(thing, "jumping");
                if (thing.power == 1) {
                    thing.EightBitter.setPlayerSizeSmall(thing);
                }
                thing.EightBitter.addClass(thing, Math.abs(thing.xvel) < .14 ? "still" : "running");
            }
            // Paddling
            if (thing.paddling) {
                thing.paddling = thing.swimming = false;
                thing.EightBitter.TimeHandler.cancelClassCycle(thing, "paddling");
                thing.EightBitter.removeClasses(thing, "paddling swim1 swim2");
                thing.EightBitter.addClass(thing, "running");
            }
        }
    }
    
    /**
     * 
     */
    function movePlayerVine(thing) {
        var attachedSolid = thing.attachedSolid,
            animatedClimbing;
        
        if (!attachedSolid) {
            thing.movement = thing.EightBitter.movePlayer;
            return;
        }
        
        if (thing.bottom < thing.attachedSolid.top) {
            thing.EightBitter.unattachPlayer(thing, thing.attachedSolid);
            return;
        }
        
        // Running away from the vine means dropping off
        if (thing.keys.run !== 0 && thing.keys.run === thing.attachedDirection) {
            // Leaving to the left
            if (thing.attachedDirection === -1) {
                thing.EightBitter.setRight(thing, attachedSolid.left - thing.EightBitter.unitsize);
            }
            // Leaving to the right
            else if (thing.attachedDirection === 1) {
                thing.EightBitter.setLeft(thing, attachedSolid.right + thing.EightBitter.unitsize);
            }
            
            thing.EightBitter.unattachPlayer(thing, attachedSolid);
            return;
        }
        
        // If the player is moving up, simply move up
        if (thing.keys.up) {
            animatedClimbing = true;
            thing.EightBitter.shiftVert(thing, thing.EightBitter.unitsize / -4);
        }
        // If the thing is moving down, move down and check for unattachment
        else if (thing.keys.crouch) {
            animatedClimbing = true;
            thing.EightBitter.shiftVert(thing, thing.EightBitter.unitsize / 2);
            if (thing.top > attachedSolid.bottom) {
                thing.EightBitter.unattachPlayer(thing, thing.attachedSolid);
            }
            return;
        } else {
            animatedClimbing = false;
        }
        
        if (animatedClimbing && !thing.animatedClimbing) {
            thing.EightBitter.addClass(thing, "animated");
        } else if (!animatedClimbing && thing.animatedClimbing) {
            thing.EightBitter.removeClass(thing, "animated");
        }
        
        thing.animatedClimbing = animatedClimbing;
        
        if (thing.bottom < thing.EightBitter.MapScreener.top - thing.EightBitter.unitsize * 4) {
            thing.EightBitter.setLocation(thing.attachedSolid.transport);
        }
    }
    
    /**
     * 
     */
    function movePlayerSpringboardDown(thing) {
        var other = thing.spring;
        
        // If the player has moved off the spring, get outta here
        if (!thing.EightBitter.isThingTouchingThing(thing, other)) {
            thing.movement = thing.EightBitter.movePlayer;
            other.movement = thing.EightBitter.moveSpringboardUp;
            thing.spring = false;
            return;
        }
        
        // If the spring is fully contracted, go back up
        if (
            other.height < thing.EightBitter.unitsize * 2.5
            || other.tension < thing.EightBitter.unitsize / 32
        ) {
            thing.movement = undefined;
            other.movement = thing.EightBitter.moveSpringboardUp;
            return;
        }
        
        // Make sure it's hard to slide off
        if (
            thing.left < other.left + thing.EightBitter.unitsize * 2
            || thing.right > other.right - thing.EightBitter.unitsize * 2
        ) {
            thing.xvel /= 1.4;
        }
        
        thing.EightBitter.reduceHeight(other, other.tension, true);
        other.tension /= 2;
        thing.EightBitter.setBottom(thing, other.top);
        thing.EightBitter.updateSize(other);
    }
    
    
    // Animations
    
    /**
     * 
     */
    function animateSolidBump(thing) {
        var direction = -3;
        
        thing.EightBitter.TimeHandler.addEventInterval(function (thing) {
            thing.EightBitter.shiftVert(thing, direction);
            direction += .5;
            if (direction === 3.5) {
                thing.up = false;
                return true;
            }
        }, 1, Infinity, thing);
    }
    
    /**
     * 
     */
    function animateBlockBecomesUsed(thing) {
        thing.used = true;
        thing.EightBitter.switchClass(thing, "unused", "used");
    }
    
    /**
     * 
     */
    function animateSolidContents(thing, other) {
        var output;

        if (other && other.player && other.power > 1 && thing.contents === "Mushroom") {
            thing.contents = "FireFlower";
        }
        
        var output = thing.EightBitter.addThing(thing.contents);
        thing.EightBitter.setMidXObj(output, thing);
        thing.EightBitter.setTop(output, thing.top);
        output.blockparent = thing;
        output.animate(output, thing);
        
        return output;
    }
    
    /**
     * 
     */
    function animateBrickShards(thing) {
        var unitsize = thing.EightBitter.unitsize,
            shard,
            left, top,
            i;
        
        for (i = 0; i < 4; i += 1) {
            left = thing.left + (i < 2) * thing.width * unitsize - unitsize * 2;
            top = thing.top + (i % 2) * thing.height * unitsize - unitsize * 2;
            
            shard = thing.EightBitter.addThing("BrickShard", left, top);
            shard.xvel = shard.speed = unitsize / 2 - unitsize * (i > 1);
            shard.yvel = unitsize * -1.4 + i % 2;
            
            thing.EightBitter.TimeHandler.addEvent(thing.EightBitter.killNormal, 70, shard);
        }
    }
    
    /**
     * 
     */
    function animateEmerge(thing, other) {
        thing.nomove = thing.nocollide = thing.nofall = thing.alive = true;
        
        thing.EightBitter.flipHoriz(thing);
        thing.EightBitter.AudioPlayer.play("Powerup Appears");
        thing.EightBitter.arraySwitch(thing, 
            thing.EightBitter.GroupHolder.getCharacterGroup(), 
            thing.EightBitter.GroupHolder.getSceneryGroup()
        );
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.EightBitter.shiftVert(thing, thing.EightBitter.unitsize / -8);
            
            // Only stop once the bottom has reached the solid's top
            if (thing.bottom > other.top) {
                return;
            }
            
            thing.EightBitter.setBottom(thing, other.top);
            thing.EightBitter.GroupHolder.switchObjectGroup(thing, "Scenery", "Character");
            thing.nomove = thing.nocollide = thing.nofall = thing.moveleft = false;
            
            if (thing.emergeOut) {
                thing.emergeOut(thing, other);
            }
            
            // Wait for movement until moveSimple moves this off the solid
            if (thing.movement) {
                thing.movementSave = thing.movement;
                thing.movement = thing.EightBitter.moveSimple;
                
                thing.EightBitter.TimeHandler.addEventInterval(function () {
                    if (thing.resting !== other) {
                        thing.EightBitter.TimeHandler.addEvent(function () {
                            thing.movement = thing.movementSave;
                        }, 1);
                        return true;
                    }
                }, 1, Infinity);
            }
            
            return true;
        }, 1, Infinity);
    }
    
    /**
     *
     */
    function animateEmergeCoin(thing, solid) {
        thing.nocollide = thing.alive = thing.nofall = true;
        thing.yvel -= thing.EightBitter.unitsize;
        
        thing.EightBitter.switchClass(thing, "still", "anim");
        thing.EightBitter.GroupHolder.switchObjectGroup(thing, "Character", "Scenery");
        
        thing.EightBitter.AudioPlayer.play("Coin");
        thing.EightBitter.StatsHolder.increase("coins", 1);
        thing.EightBitter.StatsHolder.increase("score", 200);
        
        thing.EightBitter.TimeHandler.cancelClassCycle(thing, 0);
        thing.EightBitter.TimeHandler.addClassCycle(thing, [
            "anim1", "anim2", "anim3", "anim4", "anim3", "anim2"
        ], 0, 5);
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.EightBitter.moveCoinEmerge(thing, solid);
            return !thing.EightBitter.isCharacterAlive(thing);
        }, 1, Infinity);
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.EightBitter.killNormal(thing);
        }, 49);
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.yvel *= -1;
        }, 25);
    }
    
    /**
     * 
     */
    function animateEmergeVine(thing, solid) {
        // This allows the thing's movement to keep it on the solid
        thing.attachedSolid = solid;
        
        thing.EightBitter.setHeight(thing, 0);
        thing.EightBitter.AudioPlayer.play("Vine Emerging");
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.nocollide = false;
        }, 14);
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.movement = undefined;
        }, 700);
    }
    
    /**
     * 
     */
    function animateFlicker(thing, cleartime, interval) {
        cleartime = Math.round(cleartime) || 49;
        interval = Math.round(interval) || 2;
        
        thing.flickering = true;
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.hidden = !thing.hidden;
            if (!thing.hidden) {
                thing.EightBitter.PixelDrawer.setThingSprite(thing);
            }
        }, interval, cleartime);
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.flickering = thing.hidden = false;
            thing.EightBitter.PixelDrawer.setThingSprite(thing);
        }, cleartime * interval + 1);
    }
    
    /**
     * 
     * 
     * @remarks This could probably be re-written.
     */
    function animateThrowingHammer(thing, count) {
        if ( 
            !thing.EightBitter.isCharacterAlive(thing)
            || thing.right < thing.EightBitter.unitsize * -32
        ) {
            return true;
        }
        
        if (count !== 3) {
            thing.EightBitter.switchClass(thing, "thrown", "throwing");
        }
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            if (!thing.EightBitter.isCharacterAlive(thing)) {
                return;
            }
            
            // Throw the hammer...
            if (count !== 3) {
                thing.EightBitter.switchClass(thing, "throwing", "thrown");
                thing.EightBitter.addThing(
                    ["Hammer", {
                        "xvel": thing.lookleft 
                            ? thing.EightBitter.unitsize / -1.4
                            : thing.EightBitter.unitsize / 1.4,
                        "yvel": thing.EightBitter.unitsize * -1.4,
                        "gravity": thing.EightBitter.MapScreener.gravity / 2.1
                    }],
                    thing.left - thing.EightBitter.unitsize * 2,
                    thing.top - thing.EightBitter.unitsize * 2
                );
            }
            
            // ...and go again
            if (count > 0) {
                thing.EightBitter.TimeHandler.addEvent(
                    thing.EightBitter.animateThrowingHammer,
                    7, thing, count - 1
                );
            } else {
                thing.EightBitter.TimeHandler.addEvent(
                    thing.EightBitter.animateThrowingHammer,
                    70, thing, 7
                );
                thing.EightBitter.removeClass(thing, "thrown");
            }
        }, 14);
    }
    
    /**
     * 
     */
    function animateBowserJump(thing) {
        if (!thing.lookleft || !thing.lookleft || !thing.EightBitter.player) {
            return;
        }
        
        if (
            !thing.EightBitter.isCharacterAlive(thing)
            || !thing.EightBitter.isCharacterAlive(thing.EightBitter.player)
        ) {
            return true;
        }
        
        thing.resting = undefined;
        thing.yvel = thing.EightBitter.unitsize * -1.4;
        
        // If there is a platform, don't bump into it
        thing.nocollidesolid = true;
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            if (thing.dead || thing.yvel > thing.EightBitter.unitsize) {
                thing.nocollidesolid = false;
                return true;
            }
        }, 3, Infinity);
    }
    
    /**
     * 
     */
    function animateBowserFire(thing) {
        if (!thing.lookleft || !thing.lookleft || !thing.EightBitter.player) {
            return;
        }
        
        if (
            !thing.EightBitter.isCharacterAlive(thing)
            || !thing.EightBitter.isCharacterAlive(thing.EightBitter.player)
        ) {
            return true;
        }
        
        // Close the mouth
        thing.EightBitter.addClass(thing, "firing");
        thing.EightBitter.AudioPlayer.playLocal("Bowser Fires", thing.left);
        
        // After a bit, re-open and fire
        thing.EightBitter.TimeHandler.addEvent(animateBowserFireOpen, 14, thing);
    }
    
    /**
     * 
     */
    function animateBowserFireOpen(thing) {
        var unitsize = thing.EightBitter.unitsize,
            ylev = Math.max(
                -thing.height * unitsize,
                Math.round(thing.EightBitter.player.bottom / (unitsize * 8)) 
                    * unitsize * 8
            );
        
        thing.EightBitter.removeClass(thing, "firing");
        thing.EightBitter.addThing(
            ["BowserFire", {
                "ylev": ylev
            }],
            thing.left - thing.EightBitter.unitsize * 8,
            thing.top + thing.EightBitter.unitsize * 4
        );
    }
    
    /**
     * 
     */
    function animateBowserFreeze(thing) {
        thing.nofall = true;
        thing.nothrow = true;
        thing.movement = false;
        thing.EightBitter.thingPauseVelocity(thing);
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.nofall = false;
        }, 70);
    }
    
    /**
     * 
     */
    function animateJump(thing) {
        // Finish
        if (!thing.EightBitter.isCharacterAlive(thing)) {
            return true;
        }
        
        // Skip
        if (!thing.resting) {
            return;
        }
        
        // Jump up?
        if (
            thing.EightBitter.MapScreener.floor - (thing.bottom / thing.EightBitter.unitsize) >= 30
            && thing.resting.title !== "Floor"
            && thing.EightBitter.NumberMaker.randomBoolean()
        ) {
            thing.falling = true;
            thing.yvel = thing.EightBitter.unitsize * -.7;
            thing.EightBitter.TimeHandler.addEvent(function () {
                thing.falling = false;
            }, 42);
        }
        // Jump down
        else {
            thing.nocollidesolid = true;
            thing.yvel = thing.EightBitter.unitsize * -2.1;
            thing.EightBitter.TimeHandler.addEvent(function () {
                thing.nocollidesolid = false;
            }, 42);
        }
        
        thing.resting = undefined;
    }
    
    /**
     * 
     */
    function animateBlooperUnsqueezing(thing) {
        thing.counter = 0;
        thing.squeeze = false;
        
        thing.EightBitter.removeClass(thing, "squeeze");
        thing.EightBitter.setHeight(thing, 12, true, true);
    }
    
    /**
     * 
     */
    function animatePodobooJumpUp(thing) {
        thing.starty = thing.top;
        thing.yvel = thing.speed * -1;
        
        thing.EightBitter.TimeHandler.addEvent(
            thing.EightBitter.animatePodobooJumpDown,
            thing.jumpHeight, 
            thing
        );
    }
    
    /**
     * 
     */
    function animatePodobooJumpDown(thing) {
        thing.movement = thing.EightBitter.movePodobooFalling;
    }
    
    /**
     * 
     */
    function animateLakituThrowingSpiny(thing) {
        if (thing.fleeing || !thing.EightBitter.isCharacterAlive(thing)) {
            return true;
        }
        
        thing.EightBitter.switchClass(thing, "out", "hiding");
        thing.EightBitter.TimeHandler.addEvent(function () {
            if (thing.dead) {
                return;
            }
            var spawn = thing.EightBitter.addThing("SpinyEgg", thing.left, thing.top);
            spawn.yvel = thing.EightBitter.unitsize * -2.1;
            thing.EightBitter.switchClass(thing, "hiding", "out");
        }, 21);
    }
    
    /**
     * 
     */
    function animateSpinyEggHatching(thing) {
        var spawn = thing.EightBitter.addThing("Spiny", thing.left, thing.top - thing.yvel);
        spawn.moveleft = thing.EightBitter.objectToLeft(thing.EightBitter.player, spawn);
        thing.EightBitter.killNormal(thing);
    }
    
    /**
     * 
     */
    function animateFireballEmerge(thing) {
        thing.EightBitter.AudioPlayer.play("Fireball");
    }
    
    /**
     * 
     */
    function animateFireballExplode(thing, level) {
        thing.nocollide = true;
        thing.EightBitter.killNormal(thing);
        if (level === 2) {
            return;
        }
        
        var output = thing.EightBitter.addThing("Firework");
        thing.EightBitter.setMidXObj(output, thing);
        thing.EightBitter.setMidYObj(output, thing);
        output.animate(output);
    }
    
    /**
     * 
     */
    function animateFirework(thing) {
        var name = thing.className + " n",
            i;
        
        for (i = 0; i < 3; i += 1) {
            thing.EightBitter.TimeHandler.addEvent(function (i) {
                thing.EightBitter.setClass(thing, name + String(i + 1));
            }, i * 7, i);
        }
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.EightBitter.killNormal(thing);
        }, i * 7);
    }
    
    /**
     * 
     * 
     * @param {Collider} other 
     * @remarks The left of other is the right of player, and is 4 units away 
     *          from the center of the door.
     */
    function animateEndLevelFireworks(thing, other, numFireworks) {
        var doorRight = other.left,
            doorLeft = doorRight - thing.EightBitter.unitsize * 8,
            doorBottom = other.bottom,
            doorTop = doorBottom - thing.EightBitter.unitsize * 16,
            flag = thing.EightBitter.ObjectMaker.make("CastleFlag", {
                "position": "beginning"
            }),
            flagMovements = 40,
            fireInterval = 42,
            fireworkPositions = [
                [0, -48],
                [-8, -40],
                [8, -40],
                [-8, -32],
                [0, -48],
                [-8, -40]
            ],
            i = 0,
            firework;
        
        thing.EightBitter.addThing(
            flag,
            doorLeft + thing.EightBitter.unitsize,
            doorTop - thing.EightBitter.unitsize * 24
        );
        thing.EightBitter.arrayToBeginning(
            flag, thing.EightBitter.GroupHolder.getGroup(flag.grouptype)
        );
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.EightBitter.shiftVert(flag, thing.EightBitter.unitsize * -.25);
        }, 1, flagMovements);
        
        if (numFireworks > 0 ) {
            thing.EightBitter.TimeHandler.addEventInterval(function () {
                firework = thing.EightBitter.addThing("Firework",
                    thing.left + fireworkPositions[i][0] * thing.EightBitter.unitsize,
                    thing.top + fireworkPositions[i][1] * thing.EightBitter.unitsize);
                firework.animate(firework);
                i += 1;
            }, fireInterval, numFireworks);
        }
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.EightBitter.AudioPlayer.addEventImmediate("Stage Clear", "ended", function () {
                thing.EightBitter.collideLevelTransport(thing, other);
            });
        }, i * fireInterval + 420);
    }
    
    /**
     * 
     */
    function animateCannonFiring(thing) {
        // Don't fire if Player is too close
        if (
            thing.EightBitter.player.right > thing.left - thing.EightBitter.unitsize * 8
            && thing.EightBitter.player.left < thing.right + thing.EightBitter.unitsize * 8
        ) {
            return;
        }
        
        var spawn = thing.EightBitter.ObjectMaker.make("BulletBill");
        if (thing.EightBitter.objectToLeft(thing.EightBitter.player, thing)) {
            spawn.direction = spawn.moveleft = true;
            spawn.xvel *= -1;
            thing.EightBitter.flipHoriz(spawn);
            thing.EightBitter.addThing(spawn, thing.left, thing.top);
        } else {
            thing.EightBitter.addThing(spawn, thing.left + thing.width, thing.top);
        }
        
        thing.EightBitter.AudioPlayer.playLocal("Bump", thing.right);
    }
    
    /**
     * 
     */
    function animatePlayerFire(thing) {
        if (thing.numballs >= 2) {
            return;
        }
        
        thing.numballs += 1;
        thing.EightBitter.addClass(thing, "firing");
        
        var ball = thing.EightBitter.ObjectMaker.make("Fireball", {
                "moveleft": thing.moveleft,
                "speed": thing.EightBitter.unitsize * 1.75,
                "jumpheight": thing.EightBitter.unitsize * 1.56,
                // "gravity": thing.EightBitter.MapScreener.gravity * 1.56, // not there!
                "gravity": thing.EightBitter.MapScreener.gravity * 1.56,
                "yvel": thing.EightBitter.unitsize,
                "movement": thing.EightBitter.moveJumping
            }),
            xloc = thing.moveleft
                ? (thing.left - thing.EightBitter.unitsize / 4)
                : (thing.right + thing.EightBitter.unitsize / 4);
        
        thing.EightBitter.addThing(ball, xloc, thing.top + thing.EightBitter.unitsize * 8);
        ball.animate(ball);
        ball.onDelete = function () {
            thing.numballs -= 1;
        };
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.EightBitter.removeClass(thing, "firing");
        }, 7);
    }
    
    /**
     * 
     */
    function animateCastleBlock(thing, balls) {
        var ax = Math.cos(thing.angle * Math.PI) * thing.EightBitter.unitsize * 4,
            ay = Math.sin(thing.angle * Math.PI) * thing.EightBitter.unitsize * 4,
            i;
        
        for (i = 0; i < balls.length; i += 1) {
            thing.EightBitter.setMidX(balls[i], thing.left + ax * i);
            thing.EightBitter.setMidY(balls[i], thing.top + ay * i);
        }
        
        thing.angle += thing.dt * thing.direction;
    }
    
    /**
     * 
     */
    function animateCastleBridgeOpen(thing) {
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.EightBitter.TimeHandler.addEventInterval(function () {
                thing.right -= thing.EightBitter.unitsize * 2;
                thing.EightBitter.setWidth(thing, thing.width - 2);
                
                if (thing.width <= 0) {
                    return true;
                }
            }, 1, Infinity);
        }, 7);
    }
    
    /**
     * 
     */
    function animateCastleChainOpen(thing) {
        thing.EightBitter.TimeHandler.addEvent(killNormal, 7, thing);
    }
    
    /**
     * 
     */
    function animatePlayerPaddling(thing) {
        if (!thing.paddlingCycle) {
            thing.EightBitter.removeClass(thing, "skidding paddle1 paddle2 paddle3 paddle4 paddle5");
            thing.EightBitter.addClass(thing, "paddling");
            thing.EightBitter.TimeHandler.cancelClassCycle(thing, "paddlingCycle");
            thing.EightBitter.TimeHandler.addClassCycle(
                thing, 
                [
                    "paddle1", "paddle2", "paddle3", "paddle2", "paddle1",
                    function () {
                        return thing.paddlingCycle = false;
                    },
                ],
                "paddlingCycle", 
                7
            );
        }
        thing.paddling = thing.paddlingCycle = thing.swimming = true;
        thing.yvel = thing.EightBitter.unitsize * -.84;
    }
    
    /**
     * 
     */
    function animatePlayerLanding(thing) {
        if (thing.crouching && thing.power > 1) {
            thing.EightBitter.setHeight(thing, 11, true, true);
        }
    
        if (thing.EightBitter.hasClass(thing, "hopping")) {
            thing.EightBitter.switchClass(thing, "hopping", "jumping");
        }
        
        if (thing.EightBitter.MapScreener.underwater) {
            thing.EightBitter.removeClass(thing, "paddling");
        }
        
        thing.EightBitter.ModAttacher.fireEvent("onPlayerLanding", thing, thing.resting);
    }
    
    /**
     * 
     */
    function animatePlayerRestingOff(thing) {
        if (thing.EightBitter.MapScreener.underwater) {
            thing.EightBitter.switchClass(thing, "running", "paddling");
        }
        thing.resting = undefined;
    }
    
    /**
     * 
     */
    function animatePlayerBubbling(thing) {
        thing.EightBitter.addThing("Bubble", thing.right, thing.top);
    }
    
    /**
     * 
     */
    function animatePlayerRunningCycle(thing) {
        thing.EightBitter.switchClass(thing, "still", "running");
        
        thing.running = thing.EightBitter.TimeHandler.addClassCycle(thing, [
            "one", "two", "three", "two"
        ], "running", function (event) {
            event.timeout = 5 + Math.ceil(thing.maxspeedsave - Math.abs(thing.xvel));
        });
    }
    
    /**
     * 
     */
    function animateCharacterHop(thing) {
        thing.resting = undefined;
        thing.yvel = thing.EightBitter.unitsize * -1.4;
    }
    
    /**
     * 
     */
    function animatePlayerPipingStart(thing) {
        thing.nocollide = thing.nofall = thing.piping = true;
        thing.xvel = thing.yvel = 0;
        thing.movementOld = thing.movement;
        thing.movement = undefined;
        
        if (thing.power > 1) {
            thing.EightBitter.setPlayerSizeLarge(thing);
        } else {
            thing.EightBitter.setPlayerSizeSmall(thing);
        }
        thing.EightBitter.removeClasses(thing, "jumping running crouching");
        
        thing.EightBitter.GroupHolder.switchObjectGroup(thing, "Character", "Scenery");
        thing.EightBitter.TimeHandler.cancelAllCycles(thing);
    }
    
    /**
     * 
     */
    function animatePlayerPipingEnd(thing) {
        thing.movement = thing.movementOld;
        
        thing.nocollide = thing.nofall = thing.piping = false;
        
        thing.EightBitter.GroupHolder.switchObjectGroup(thing, "Scenery", "Character");
    }
    
    /**
     * 
     */
    function animatePlayerOffPole(thing, doRun) {
        thing.EightBitter.removeClasses(thing, "climbing running");
        thing.EightBitter.addClass(thing, "jumping");
        
        thing.xvel = 1.4;
        thing.yvel = -.7;
        thing.nocollide = thing.nofall = false;
        thing.gravity = thing.EightBitter.MapScreener.gravity / 14;
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            thing.movement = thing.EightBitter.movePlayer;
            thing.gravity = thing.EightBitter.MapScreener.gravity;
            
            thing.EightBitter.unflipHoriz(thing);
            
            if (doRun) {
                thing.EightBitter.animatePlayerRunningCycle(thing);
            }
        }, 21);
    }
    
    /**
     * 
     */
    function animatePlayerOffVine(thing) {
        thing.EightBitter.flipHoriz(thing);
        thing.EightBitter.shiftHoriz(
            thing, 
            (thing.width - 1) * thing.EightBitter.unitsize
        );
        
        thing.EightBitter.TimeHandler.addEvent(
            thing.EightBitter.animatePlayerOffPole,
            14,
            thing
        );
    }
    
    
    /* Appearance utilities
    */
    
    /**
     * 
     */
    function lookTowardsThing(thing, other) {
        // Case: other is to the left
        if (other.right <= thing.left) {
            thing.lookleft = true;
            thing.moveleft = true;
            thing.EightBitter.unflipHoriz(thing);
        }
        // Case: other is to the right
        else if (other.left >= thing.right) {
            thing.lookleft = false;
            thing.moveleft = false;
            thing.EightBitter.flipHoriz(thing);
        }
    }
    
    /**
     * 
     */
    function lookTowardsPlayer(thing, big) {
        // Case: Player is to the left
        if (thing.EightBitter.player.right <= thing.left) {
            if (!thing.lookleft || big) {
                thing.lookleft = true;
                thing.moveleft = false;
                thing.EightBitter.unflipHoriz(thing);
            }
        }
        // Case: Player is to the right
        else if (thing.EightBitter.player.left >= thing.right) {
            if (thing.lookleft || big) {
                thing.lookleft = false;
                thing.moveleft = true;
                thing.EightBitter.flipHoriz(thing);
            }
        }
    }
    
    
    /* Death functions
    */
    
    /**
     * 
     */
    function killNormal(thing) {
        if (!thing) {
            return;
        }
        
        thing.hidden = thing.dead = true;
        thing.alive = false;
        thing.numquads = 0;
        thing.resting = thing.movement = undefined;
        
        if (thing.EightBitter) {
            thing.EightBitter.TimeHandler.cancelAllCycles(thing);
        }
        
        thing.EightBitter.ModAttacher.fireEvent("onKillNormal", thing);
    }
    
    /**
     * 
     */
    function killFlip(thing, extra) {
        thing.EightBitter.flipVert(thing);
        
        if (!extra) {
            extra = 0;
        }
        
        if (thing.bottomBump) {
            thing.bottomBump = undefined;
        }
        
        thing.nocollide = thing.dead = true;
        thing.speed = thing.xvel = thing.nofall = false;
        thing.resting = thing.movement = undefined;
        thing.yvel = -thing.EightBitter.unitsize;
        thing.EightBitter.TimeHandler.addEvent(thing.EightBitter.killNormal, 70 + extra, thing);
    }
    
    /**
     * 
     */
    function killSpawn(thing, big) {
        if (big) {
            thing.EightBitter.killNormal(thing);
            return;
        }
        
        if (thing.spawntype) {
            var spawn = thing.EightBitter.ObjectMaker.make(
                thing.spawntype,
                thing.spawnsettings || {}
            );
            thing.EightBitter.addThing(spawn);
            thing.EightBitter.setBottom(spawn, thing.bottom);
            thing.EightBitter.setMidXObj(spawn, thing);
        } else {
            console.warn("Thing " + thing.title + " has no .spawntype.");
        }
        
        thing.EightBitter.killNormal(thing);
        
        return spawn;
    }
    
    /**
     * 
     */
    function killReplace(thing, type, attributes, attributesCopied) {
        var spawn, i;
        
        if (typeof attributes === "undefined") {
            attributes = {};
        }
        
        if (typeof attributesCopied !== "undefined") {
            for (i = 0; i < attributesCopied.length; i += 1) {
                attributes[attributesCopied[i]] = thing[attributesCopied[i]];
            }
        }
        
        spawn = thing.EightBitter.ObjectMaker.make(type, attributes);
        
        if (thing.flipHoriz) {
            thing.EightBitter.flipHoriz(spawn);
        }
        
        if (thing.flipVert) {
            thing.EightBitter.flipVert(spawn);
        }
        
        thing.EightBitter.addThing(spawn, thing.left, thing.top);
        thing.EightBitter.killNormal(thing);
        
        return spawn;
    }
    
    /**
     * 
     */
    function killGoomba(thing, big) {
        if (big) {
            thing.EightBitter.killFlip(thing);
            return;
        }
        
        thing.EightBitter.killSpawn(thing);
    }
    
    /**
     * 
     * 
     * @remarks This isn't called when a shell hits a Koopa.
     */
    function killKoopa(thing, big) {
        var spawn;
        
        if (thing.jumping || thing.floating) {
            spawn = thing.EightBitter.killReplace(
                thing, "Koopa", undefined, ["smart", "direction", "moveleft"]
            );
            spawn.xvel = spawn.moveleft ? -spawn.speed : spawn.speed;
        } else {
            spawn = thing.EightBitter.killToShell(thing, big);
        }
        
        return spawn;
    }
    
    /**
     * 
     */
    function killBowser(thing, big) {
        if (big) {
            thing.nofall = false;
            thing.movement = undefined;
            thing.EightBitter.killFlip(thing);
            return;
        }
        
        thing.deathcount += 1;
        if (thing.deathcount === 5) {
            thing.yvel = 0;
            thing.speed = 0;
            thing.movement = 0;
            thing.EightBitter.killFlip(thing, 350);
            thing.EightBitter.scoreOn(5000, thing);
        }
    }
    
    /**
     * 
     */
    function killToShell(thing, big) {
        var spawn, nocollidecharold, nocollideplayerold;
        
        thing.spawnsettings = {
            "smart": thing.smart
        };
            
        if (big && big !== 2) {
            thing.spawntype = thing.title;
        } else {
            thing.spawntype = thing.shelltype || "Shell";
        }
        
        thing.spawnsettings = {
            "smart": thing.smart
        };
        
        spawn = thing.EightBitter.killSpawn(thing);
        nocollidecharold = spawn.nocollidechar;
        nocollideplayerold = spawn.nocollideplayer;
        spawn.nocollidechar = true;
        spawn.nocollideplayer = true;
        
        thing.EightBitter.TimeHandler.addEvent(function () {
            spawn.nocollidechar = nocollidecharold;
            spawn.nocollideplayer = nocollideplayerold;
        }, 7);
        
        thing.EightBitter.killNormal(thing);
        
        if (big === 2) {
            thing.EightBitter.killFlip(spawn);
        }
    }
    
    /**
     * Wipes the screen of any characters or solids that should be gone during
     * an important cutscene, such as hitting an end-of-level flag.
     * For characters, they're deleted if .nokillonend isn't truthy. If they
     * have a .killonend function, that's called on them.
     * Solids are only deleted if their .killonend is true.
     * 
     * @remarks If thing.killonend is a function, it is called on the thing.
     * @todo   Rename .killonend to be more accurate
     */
    function killNPCs() {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            group, thing, i;
        
        // Characters: they must opt out of being killed with .nokillonend, and
        // may opt into having a function called instead (such as Lakitus).
        group = EightBitter.GroupHolder.getCharacterGroup();
        for (i = group.length - 1; i >= 0; --i) {
            thing = group[i];
            
            if (!thing.nokillend) {
                thing.EightBitter.killNormal(thing);
                thing.EightBitter.arrayDeleteThing(thing, group, i);
            } else if (thing.killonend) {
                thing.killonend(thing);
            }
        }
        
        // Solids: they may opt into being deleted
        group = EightBitter.GroupHolder.getSolidGroup();
        for (i = group.length - 1; i >= 0; --i) {
            thing = group[i];
            
            if (thing.killonend) {
                if (thing.killonend instanceof Function) {
                    thing.killonend(thing, group, i);
                } else {
                    thing.EightBitter.arrayDeleteThing(thing, group, i);
                }
            }
        }
    }
    
    /**
     * 
     */
    function killBrick(thing, other) {
        thing.EightBitter.AudioPlayer.play("Break Block");
        thing.EightBitter.TimeHandler.addEvent(thing.EightBitter.animateBrickShards, 1, thing);
        thing.EightBitter.killNormal(thing);
        
        if (other instanceof thing.EightBitter.ObjectMaker.getFunction("Thing")) {
            thing.up = other;
        } else {
            thing.up = undefined;
        }
    }
    
    /**
     * 
     */
    function killPlayer(thing, big) {
        if (!thing.alive || thing.flickering || thing.dying) {
            return;
        }
        
        var EightBitter = thing.EightBitter,
            area = thing.EightBitter.MapsHandler.getArea();
        
        // Large big: real, no-animation death
        if (big == 2) {
            thing.dead = thing.dying = true;
            EightBitter.MapScreener.notime = true;
        }
        // Regular big: regular (enemy, time, etc.) kill
        else {
            // If the player can survive this, just power down
            if (!big && thing.power > 1) {
                thing.power = 1;
                EightBitter.StatsHolder.set("power", 1);
                EightBitter.AudioPlayer.play("Power Down");
                EightBitter.playerGetsSmall(thing);
                return;
            }
            // The player can't survive this: animate a death
            else {
                thing.dying = true;
                
                EightBitter.setSize(thing, 7.5, 7, true);
                EightBitter.updateSize(thing);
                EightBitter.setClass(thing, "character player dead");
                EightBitter.thingPauseVelocity(thing);
                EightBitter.arrayToEnd(thing, EightBitter.GroupHolder.getGroup(thing.grouptype));
                
                EightBitter.MapScreener.notime = true;
                EightBitter.MapScreener.nokeys = true;
                
                EightBitter.TimeHandler.cancelAllCycles(thing);
                EightBitter.TimeHandler.addEvent(function () {
                    EightBitter.thingResumeVelocity(thing, true);
                    thing.nocollide = true;
                    thing.movement = thing.resting = undefined;
                    thing.gravity = EightBitter.MapScreener.gravity / 2.1;
                    thing.yvel = FullScreenMario.unitsize * -1.4;
                }, 7);
            }
        }
        
        thing.nocollide = thing.nomove = 1;
        EightBitter.MapScreener.nokeys = true;
        EightBitter.AudioPlayer.pauseAll();
        EightBitter.AudioPlayer.play("Player Dies");
        EightBitter.StatsHolder.decrease("lives");
        EightBitter.StatsHolder.set("power", 1);
        
        if (EightBitter.StatsHolder.get("lives") > 0) {
            EightBitter.TimeHandler.addEvent(
                area.onPlayerDeath.bind(
                    EightBitter
                ),
                area.onPlayerDeathTimeout,
                EightBitter
            );
        } else {
            EightBitter.TimeHandler.addEvent(
                area.onGameOver.bind(
                    EightBitter
                ),
                area.onGameOverTimeout,
                EightBitter
            );
        }
    }
    
    
    /* Scoring
    */
    
    /**
     * 
     */
    function findScore(level) {
        if (level < this.pointLevels.length) {
            return this.pointLevels[level];
        } else {
            this.gainLife(1);
        }
    }
    
    /**
     * Driver function to score some number of points for the player and show
     * the gains via an animation.
     * 
     * @param {Number} value   How many points the player is receiving.
     * @param {Boolean} continuation   Whether the game shouldn't increase the 
     *                                 score amount in the StatsHoldr (this will
     *                                 only be false on the first score() call).
     * @remarks   For point gains that should not have a visual animation, 
     *            directly call StatsHolder.increase("score", value).
     * @remarks   The calling chain will be: 
     *                score -> scoreOn -> scoreAnimateOn -> scoreAnimate          
     */
    function score(value, continuation) {
        var EightBitter = EightBittr.ensureCorrectCaller(this);
        
        if (!value) {
            return;
        }
        EightBitter.scoreOn(value, EightBitter.player, true);
        
        if (!continuation) {
            this.StatsHolder.increase("score", value);
        }
    }
    
    /**
     * Scores a given number of points for the player, and shows the gains via
     * an animation centered at the top of a thing.
     * 
     * @param {Number} value   How many points the player is receiving.
     * @param {Thing} thing   An in-game Thing to place the visual score text
     *                        on top of and centered.
     * @param {Boolean} continuation   Whether the game shouldn't increase the 
     *                                 score amount in the StatsHoldr (this will
     *                                 only be false on the first score() call).
     * @remarks   The calling chain will be: 
     *                scoreOn -> scoreAnimateOn -> scoreAnimate     
     */
    function scoreOn(value, thing, continuation) {
        if (!value) {
            return;
        }
        var text = thing.EightBitter.addThing("Text" + value);
        
        thing.EightBitter.scoreAnimateOn(text, thing);
        
        if (!continuation) {
            this.StatsHolder.increase("score", value);
        }
        
        thing.EightBitter.ModAttacher.fireEvent("onScoreOn", value, thing, continuation);
    }
    
    /**
     * Centers a text associated with some points gain on the top of a Thing,
     * and animates it updward, setting an event for it to die.
     * 
     * @param {Number} value   How many points the player is receiving.
     * @param {Thing} thing   An in-game Thing to place the visual score text
     *                        on top of and centered.
     * @param {Boolean} continuation   Whether the game shouldn't increase the 
     *                                 score amount in the StatsHoldr (this will
     *                                 only be false on the first score() call).
     * @remarks   The calling chain will be: 
     *                scoreAnimateOn -> scoreAnimate     
     */
    function scoreAnimateOn(text, thing) {
        thing.EightBitter.setMidXObj(text, thing);
        thing.EightBitter.setBottom(text, thing.top);
        thing.EightBitter.scoreAnimate(text);
    }
    
    /**
     * 
     * 
     * @param {Thing} thing   
     * @param {Number} [timeout]   How many game ticks to wait before killing
     *                             the text (defaults to 35).
     * @remarks   This is the last function in the score() calling chain:
     *                scoreAnimate <- scoreAnimateOn <- scoreOn <- score
     */
    function scoreAnimate(thing, timeout) {
        timeout = timeout || 28;
        thing.EightBitter.TimeHandler.addEventInterval(thing.EightBitter.shiftVert, 1, timeout, thing, -thing.EightBitter.unitsize / 6);
        thing.EightBitter.TimeHandler.addEvent(thing.EightBitter.killNormal, timeout, thing);
    }
    
    /**
     * 
     * 
     * @remarks See http://themushroomkingdom.net/smb_breakdown.shtml
     * (Assume thing is the player and other is the shell)
     */
    function scorePlayerShell(thing, other) {
        // Star player: 200 points
        if (thing.star) {
            thing.EightBitter.scoreOn(200, other);
            return;
        }
        
        // Shells in the air: 8000 points (see guide)
        if (!other.resting) {
            thing.EightBitter.scoreOn(8000, other);
            return;
        }
        
        // Peeking shells: 1000 points
        if (other.peeking) {
            thing.EightBitter.scoreOn(1000, other);
            return;
        }
        
        // All other cases: the shell's default
        thing.EightBitter.scoreOn(100, other);
    }
    
    /**
     * 
     * 
     * @remarks See http://themushroomkingdom.net/smb_breakdown.shtml
     */
    function scorePlayerFlag(player, difference) {
        var amount;
        
        if (difference < 28) {
            amount = difference < 8 ? 100 : 400;
        } else if (difference < 40) {
            amount = 800;
        } else {
            amount = difference < 62 ? 2000 : 5000;
        }
        
        player.EightBitter.scoreOn(amount, player);
    }
    
    
    /* Audio
    */
    
    /**
     * 
     */
    function getVolumeLocal(EightBitter) {
        return .49;
    }
    
    /**
     * 
     */
    function getAudioThemeDefault(EightBitter) {
        return EightBitter.MapsHandler.getArea().setting.split(' ')[0];
    }
    
    
    /* Map sets
    */
    
    /**
     * 
     * 
     * @param {Mixed} [name]
     * @param {Mixed} [location]
     */
    function setMap(name, location) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            map;
        
        if (typeof name === "undefined" || name instanceof EightBittr) {
            name = EightBitter.MapsHandler.getMapName();
        }
        
        map = EightBitter.MapsHandler.setMap(name);
        
        EightBitter.ModAttacher.fireEvent("onPreSetMap", map);
        
        EightBitter.NumberMaker.resetFromSeed(map.seed);
        EightBitter.StatsHolder.set("world", name);
        EightBitter.InputWriter.restartHistory();
        EightBitter.ModAttacher.fireEvent("onSetMap", map);
        
        EightBitter.setLocation(location || 0);
    }
    
    /**
     * 
     * 
     * 
     * @param {Mixed} [location]
     */
    function setLocation(name) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            location;
        
        EightBitter.MapScreener.nokeys = false;
        EightBitter.MapScreener.notime = false;
        EightBitter.MapScreener.canscroll = true;
        EightBitter.MapScreener.clearScreen();
        EightBitter.GroupHolder.clearArrays();
        EightBitter.TimeHandler.cancelAllEvents();
        
        EightBitter.MapsHandler.setLocation(name || 0);
        EightBitter.MapScreener.setVariables();
        location = EightBitter.MapsHandler.getLocation(name || 0);
        
        EightBitter.ModAttacher.fireEvent("onPreSetLocation", location)
        
        EightBitter.PixelDrawer.setBackground(
            EightBitter.MapsHandler.getArea().background
        );
        
        EightBitter.TimeHandler.addEventInterval(function () {
            if (!EightBitter.MapScreener.notime) {
                EightBitter.StatsHolder.decrease("time", 1);
            }
        }, 25, Infinity);
        
        EightBitter.StatsHolder.set("time", EightBitter.MapsHandler.getArea().time);
  
        EightBitter.AudioPlayer.clearAll();
        EightBitter.AudioPlayer.playTheme();
        
        EightBitter.QuadsKeeper.resetQuadrants();
        location.entry(EightBitter, location);
        
        EightBitter.ModAttacher.fireEvent("onSetLocation", location);
        
        EightBitter.GamesRunner.play();
    }
    
    /* Map entrances
    */
     
     /**
      * 
      */
     function mapEntranceNormal(EightBitter, location) {
        if (location && location.xloc) {
            EightBitter.scrollWindow(location.xloc * EightBitter.unitsize);
        }
        
        EightBitter.addPlayer(
            EightBitter.unitsize * 16,
            EightBitter.unitsize * 16
        );
     }
    
    /**
     * 
     */
     function mapEntrancePlain(EightBitter, location) {
        if (location && location.xloc) {
            EightBitter.scrollWindow(location.xloc * EightBitter.unitsize);
        }
        
        EightBitter.addPlayer(
            EightBitter.unitsize * 16,
            EightBitter.MapScreener.floor * EightBitter.unitsize
        );
        
     }
     
     /**
      * 
      */
     function mapEntranceWalking(EightBitter) {
        EightBitter.mapEntrancePlain(EightBitter);
        
        EightBitter.player.keys.run = 1;
        EightBitter.player.maxspeed = EightBitter.player.walkspeed;
        
        EightBitter.MapScreener.nokeys = true;
        EightBitter.MapScreener.notime = true;
    }
     
    /**
     * 
     */
    function mapEntranceCastle(EightBitter) {
        EightBitter.addPlayer(
            EightBitter.unitsize * 2,
            EightBitter.unitsize * 56
        );
    }
    
    /**
     * 
     */
    function mapEntranceVine(EightBitter) {
        var vine = EightBitter.addThing(
                "Vine", 
                EightBitter.unitsize * 32,
                EightBitter.MapScreener.bottom + EightBitter.unitsize * 8
            ),
            threshold = EightBitter.MapScreener.bottom - EightBitter.unitsize * 40;
        
        EightBitter.TimeHandler.addEventInterval(function () {
            if (vine.top < threshold) {
                vine.movement = undefined;
                EightBitter.mapEntranceVinePlayer(EightBitter, vine);
                return true;
            }
        }, 1, Infinity);
    }
    
    /**
     * 
     */
     function mapEntranceVinePlayer(EightBitter, vine) {
        var threshold = EightBitter.MapScreener.bottom - EightBitter.unitsize * 24,
            speed = EightBitter.unitsize / -4,
            player = EightBitter.addPlayer(
                EightBitter.unitsize * 29,
                EightBitter.MapScreener.bottom - EightBitter.unitsize * 4
            );
        
        EightBitter.shiftVert(player, player.height * EightBitter.unitsize);
        
        EightBitter.collideVine(player, vine);
        
        EightBitter.TimeHandler.addEventInterval(function () {
            EightBitter.shiftVert(player, speed);
            if (player.top < threshold) {
                EightBitter.TimeHandler.addEvent(
                    EightBitter.animatePlayerOffVine, 49, player
                );
                return true;
            }
        }, 1, Infinity);
    }
    
    
    /**
     * 
     */
    function mapEntrancePipeVertical(EightBitter, location) {
        if (location && location.xloc) {
            EightBitter.scrollWindow(location.xloc * EightBitter.unitsize);
        }
        
        EightBitter.addPlayer(
            location.entrance.left + EightBitter.player.width * EightBitter.unitsize / 2,
            location.entrance.top + EightBitter.player.height * EightBitter.unitsize
        );
        
        EightBitter.animatePlayerPipingStart(EightBitter.player);
        EightBitter.AudioPlayer.play("Pipe");
        
        EightBitter.TimeHandler.addEventInterval(function () {
            EightBitter.shiftVert(EightBitter.player, EightBitter.unitsize / -4);
            
            if (EightBitter.player.bottom <= location.entrance.top) {
                EightBitter.animatePlayerPipingEnd(EightBitter.player);
                return true;
            }
        }, 1, Infinity);
    }
    
    /**
     * 
     */
    function mapEntrancePipeHorizontal(EightBitter, location) {
        throw new Error("mapEntrancePipeHorizontal is not yet implemented.");
    }
    
    /**
     * 
     */
    function mapEntranceRespawn(EightBitter) {
        EightBitter.MapScreener.nokeys = false;
        EightBitter.MapScreener.notime = false;
        EightBitter.MapScreener.canscroll = true;
        
        EightBitter.addPlayer(EightBitter.unitsize * 16, 0);
        EightBitter.animateFlicker(EightBitter.player);
        
        if (!EightBitter.MapScreener.underwater) {
            EightBitter.playerAddRestingStone(EightBitter.player);
        }
    }
    
    
    /* Map exits
    */
    
    /**
     * 
     * 
     * @notes Thing is a Player, other is a Pipe.
     */
    function mapExitPipeVertical(thing, other) {
        if (!thing.resting || typeof(other.transport) === "undefined"
                || thing.right + thing.EightBitter.unitsize * 2 > other.right 
                || thing.left - thing.EightBitter.unitsize * 2 < other.left) {
            return;
        }
        
        thing.EightBitter.animatePlayerPipingStart(thing);
        thing.EightBitter.AudioPlayer.play("Pipe");
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.EightBitter.shiftVert(thing, thing.EightBitter.unitsize / 4);
            
            if (thing.top > other.top) { 
                thing.EightBitter.TimeHandler.addEvent(function () {
                    if (other.transport.constructor === Object) {
                        thing.EightBitter.setMap(other.transport.map);
                    } else {
                        thing.EightBitter.setLocation(other.transport);
                    }
                }, 42);
                return true;
            }
        }, 1, Infinity);
    }
    
    /**
     * 
     * 
     * @notes Thing is a Player, other is a Pipe. The third argument was added
     *        because the "Bouncy Bounce!" mod rendered some areas unescapable
     *        without it.
     */
    function mapExitPipeHorizontal(thing, other, shouldTransport) {
        if (!shouldTransport && !thing.resting && !thing.paddling) {
            return;
        }
        
        thing.EightBitter.animatePlayerPipingStart(thing);
        thing.EightBitter.AudioPlayer.play("Pipe");
        
        thing.EightBitter.TimeHandler.addEventInterval(function () {
            thing.EightBitter.shiftHoriz(thing, thing.EightBitter.unitsize / 4);
            
            if (thing.left > other.left) { 
                thing.EightBitter.TimeHandler.addEvent(function () {
                    thing.EightBitter.setLocation(other.transport);
                }, 42);
                return true;
            }
        }, 1, Infinity);
    }
    
    
    /* Map creation
    */
    
    /**
     * This is used as the OnMake callback for areas. In the future, it would be
     * better to make areas inherit from base area types (Overworld, etc.) so 
     * this inelegant switch statement doesn't have to be used.
     */
    function initializeArea() {
        var setting = this.setting;
        
        // Copy all attributes, if they exist
        if (this.attributes) {
            for (var i in this.attributes) {
                if (this[i]) {
                    // Add the extra options
                    proliferate(this, this.attributes[i]);
                }
            }
        }
        
        // Underworld, Castle, and all Nights: background is black
        if (
            this.setting.indexOf("Underworld") !== -1
            || this.setting.indexOf("Castle") !== -1
            || this.setting.indexOf("Night") !== -1
        ) {
            this.background = "#000000";
        } 
        // Default (typically Overworld): background is sky blue
        else {
            this.background = "#5c94fc";
        }
    }
    
    /**
     * Gets the distance from the absolute base (bottom of the user's viewport)
     * to a specific height above the floor (in the form given by map functions,
     * distance from the floor).
     * 
     * @param {Number} yloc   A height to find the distance to the floor from.
     * @param {Boolean} [correctUnitsize]   Whether the yloc accounts for 
     *                                       unitsize expansion (e.g. 48 rather
     *                                       than 12, for unitsize=4).
     * @return {Number}
     */
    function getAbsoluteHeight(yloc, correctUnitsize) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            height = yloc + EightBitter.MapScreener.height;
        
        if (!correctUnitsize) {
            height *= EightBitter.unitsize;
        }
        
        return height;
    }
    
    /**
     * 
     */
    function mapAddStretched(raw) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            boundaries = EightBitter.MapsHandler.getArea().boundaries,
            y = (EightBitter.MapScreener.floor - raw.y) * EightBitter.unitsize;
        
        return EightBitter.addThing(EightBitter.ObjectMaker.make(raw.thing, {
            "width": boundaries.right - boundaries.left,
            "height": raw.height || EightBitter.getAbsoluteHeight(raw.y)
        }), boundaries.left, y);
    }
    
    /**
     * 
     */
    function mapAddAfter(raw) {
        var EightBitter = EightBittr.ensureCorrectCaller(this),
            MapsCreator = EightBitter.MapsCreator,
            MapsHandler = EightBitter.MapsHandler,
            prethings = MapsHandler.getPreThings(),
            area = MapsHandler.getArea(),
            map = MapsHandler.getMap(),
            boundaries = EightBitter.MapsHandler.getArea().boundaries;
        
        raw.x = boundaries.right;
        MapsCreator.analyzePreSwitch(raw, prethings, area, map);
    }
    
    /**
     * 
     */
    function mapPlaceRandomCommands(EightBitter, generatedCommands) {
        var MapsCreator = EightBitter.MapsCreator,
            MapsHandler = EightBitter.MapsHandler,
            prethings = MapsHandler.getPreThings(),
            area = MapsHandler.getArea(),
            map = MapsHandler.getMap(),
            command, output, i;
        
        for (i = 0; i < generatedCommands.length; i += 1) {
            command = generatedCommands[i];
            
            output = {
                "thing": command.title,
                "x": command.left,
                "y": command.top
            };
            
            if (command.arguments) {
                EightBitter.proliferateHard(output, command.arguments, true);
            }
            
            MapsCreator.analyzePreSwitch(output, prethings, area, map);
        }
    }
    
    /**
     * 
     */
    function mapStretchThing(thing, xlocReal) {
        thing.EightBitter.setWidth(thing, xlocReal * thing.EightBitter.unitsize);
    }
    
    /**
     * Sample macro with no functionality, except to console.log a listing of 
     * the arguments provided to each macro function.
     * For all real macros, arguments are listed as the keys given as members of
     * the reference object.
     * They also ignore the "x" and "y" arguments, which 
     * are the x-location and y-location of the output (and both default to 0),
     * and the "macro" argument, which is listed as their alias.
     * 
     * @alias Example
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Array. This should 
     *                             be treated as static!
     * @param {Object[]} prethings   The Area's actual .creation Array, which
     *                               consists of a bunch of reference Objects.
     * @param {Area} area   The area currently being generated.
     * @param {Map} map   The map containing the area currently being generated.
     */
    function macroExample(reference, prethings, area, map, scope) {
        console.log("This is a macro that may be called by a map creation.");
        console.log("The arguments are:\n");
        console.log("Reference (the listing from area.creation):  ", reference);
        console.log("Prethings (the area's listing of prethings): ", prethings);
        console.log("Area      (the currently generated area):    ", area);
        console.log("Map       (the map containing the area):     ", map);
        console.log("Scope     (the custom scope container):      ", scope);
    }
    
    /**
     * Macro to place a single type of Thing multiple times, drawing from a
     * bottom/left corner to a top/right corner.
     * 
     * @alias Fill
     * @param {String} thing   The name of the Thing to fill (e.g. "Brick").
     * @param {Number} xnum   How many times to repeat the Thing horizontally
     *                        to the right (defaults to 1)
     * @param {Number} ynum   How many times to repeat the Thing vertically
     *                        upwards (defaults to 1)
     * @param {Number} xwidth   How many units are between the left edges of 
     *                          placed Things horizontally (defaults to 0)
     * @param {Number} yheight   How many units are between the top edges of
     *                           placed Things vertically (defaults to 0)
     * @example   { "macro": "Fill", "thing": "Brick",
     *              "x": 644, "y": 64, "xnum": 5, "xwidth": 8 }
     */
    function macroFillPreThings(reference, prethings, area, map, scope) {
        var defaults = scope.ObjectMaker.getFullPropertiesOf(reference.thing),
            xnum = reference.xnum || 1,
            ynum = reference.ynum || 1,
            xwidth = reference.xwidth || defaults.width,
            yheight = reference.yheight || defaults.height,
            x = reference.x || 0,
            yref = reference.y || 0,
            ynum = reference.ynum || 1,
            outputs = new Array(xnum * ynum),
            output,
            o = 0, y, i, j;
        
        for (i = 0; i < xnum; ++i) {
            y = yref;
            for (j = 0; j < ynum; ++j) {
                output = {
                    "x": x,
                    "y": y,
                    "macro": undefined
                };
                outputs[o] = proliferate(output, reference, true);
                o += 1;
                y += yheight;
            }
            x += xwidth;
        }
        
        return outputs;
    }
    
    /**
     * Macro to continuously place a listing of Things multiple times, from left
     * to right. This is commonly used for repeating background scenery.
     * 
     * @alias Pattern
     * @param {String} pattern   The name of the pattern to print, from the
     *                           listing in scope.settings.maps.patterns.
     * @param {Number} [repeat]   How many times to repeat the overall pattern 
     *                            (by default, 1).
     * @param {Number[]} [skips]   Which numbered items to skip, if any.
     */
    function macroFillPrePattern(reference, prethings, area, map, scope) {
        // Make sure the pattern exists before doing anything
        if (!scope.settings.maps.patterns[reference.pattern]) {
            console.warn("An unknown pattern is referenced: " + reference);
            return;
        }
        var pattern = scope.settings.maps.patterns[reference.pattern],
            length = pattern.length,
            defaults = scope.ObjectMaker.getFullProperties(),
            repeats = reference.repeat || 1,
            xpos = reference.x || 0,
            ypos = reference.y || 0,
            outputs = new Array(length * repeats),
            o = 0,
            skips = {},
            output, prething, i, j;
        
        // If skips are given, record them in an Object for quick access
        if (typeof reference.skips !== "undefined") {
            for (i = 0; i < reference.skips.length; i += 1) {
                skips[reference.skips[i]] = true;
            }
        }
        
        // For each time the pattern should be repeated:
        for (i = 0; i < repeats; i += 1) {
            // For each Thing listing in the pattern:
            for (j = 0; j < length; j += 1) {
                // Don't place if marked in skips
                if (skips[j]) {
                    continue;
                }
                
                prething = pattern[j];
                output = {
                    "thing": prething[0],
                    "x": xpos + prething[1],
                    "y": ypos + prething[2]
                };
                output.y += defaults[prething[0]].height;
                
                outputs[o] = output;
                o += 1;
            }
            xpos += pattern.width;
        }
        
        return outputs;
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroFloor(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = reference.y || 0,
            floor = proliferate({
                "thing": "Floor",
                "x": x,
                "y": y,
                "width": (reference.width || 8),
                "height": "Infinity",
            }, reference, true );
        floor.macro = undefined;
        return floor;
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroPipe(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = reference.y || 0,
            height = reference.height || 16,
            pipe = proliferate({
                "thing": "Pipe",
                "x": x,
                "y": y,
                "width": 16,
                "height": reference.height || 8
            }, reference, true),
            output = [pipe];
            
        pipe.macro = undefined;
        
        if (height === "Infinity") {
            pipe.height = scope.MapScreener.height;
        } else {
            pipe.y += height;
        }
        
        if (reference.piranha) {
            output.push({
                "thing": "Piranha",
                "x": x + 4,
                "y": pipe.y + 12,
                "onPipe": true
            });
        }
        
        return output;
    }
    
    /**
     * 
     * 
     * @remarks This could be used in 1-2 and 4-2, but there's no real need to 
     *          take the time (unless you're a volunteer and want something to 
     *          do!). It was introduced for WorldSeedr generation.
     */
    function macroPipeCorner(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = reference.y || 0,
            height = reference.height || 16,
            output = [
                {
                    "thing": "PipeHorizontal",
                    "x": x,
                    "y": y,
                    "transport": reference.transport || 0
                },
                {
                    "thing": "PipeVertical",
                    "x": x + 16,
                    "y": y + height - 16,
                    "height": height
                }
            ];
        
        if (reference.scrollEnabler) {
            output.push({
                "thing": "ScrollEnabler", 
                "x": x + 16, 
                "y": y + height + 48, 
                "height": 64,
                "width": 16
            });
        }
        
        if (reference.scrollBlocker) {
            output.push({
                "thing": "ScrollBlocker", 
                "x": x + 32
            });
        }
        
        return output;
    }

    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroTree(reference, prethings, area, map, scope) {
        // Although the tree trunks in later trees overlap earlier ones, it's ok
        // because the pattern is indistinguishible when placed correctly.
        var x = reference.x || 0,
            y = reference.y || 0,
            width = reference.width || 24,
            output = [
                { 
                    "thing": "TreeTop", 
                    "x": x,
                    "y": y,
                    "width": width 
                }
            ];
        
        if (width > 16) {
            output.push({
                "thing": "TreeTrunk", 
                "x": x + 8, 
                "y": y - 8,
                "width": width - 16,
                "height": "Infinity",
                "grouptype": reference.solidTrunk ? "Solid": "Scenery"
            });
        };
        
        return output;
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroShroom(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = reference.y || 0,
            width = reference.width || 24,
            output = [
                { "thing": "ShroomTop", "x": x, "y": y, "width": width }
            ];
        
        if (width > 16) {
            output.push({
                "thing": "ShroomTrunk", "x": x + (width - 8) / 2, "y": y - 8, "height": "Infinity" 
            });
        }
        
        return output;
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroWater(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = (reference.y || 0) + 2, // water is 3.5 x 5.5
            output = proliferate({
                "thing": "Water",
                "x": x,
                "y": y,
                "height": "Infinity",
                "macro": undefined
            }, reference, true);
        
        return output;
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroCeiling(reference) {
        return {
            "macro": "Fill",
            "thing": "Brick",
            "x": reference.x,
            "y": 88,
            "xnum": Math.floor(reference.width / 8),
            "xwidth": 8
        };
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroBridge(reference) {
        var x = reference.x || 0,
            y = reference.y || 0,
            width = Math.max(reference.width || 0, 16),
            output = [];

        // A beginning column reduces the width and pushes it forward
        if (reference.begin) {
            width -= 8;
            output.push({ "thing": "Stone", "x": x, "y": y, "height": "Infinity" });
            x += 8;
        }

        // An ending column just reduces the width 
        if (reference.end) {
            width -= 8;
            output.push({ "thing": "Stone", "x": x + width, "y": y, "height": "Infinity" });
        }

        // Between any columns is a BridgeBase with a Railing on top
        output.push({ "thing": "BridgeBase", "x": x, "y": y, "width": width });
        output.push({ "thing": "Railing", "x": x, "y": y + 4, "width": width });

        return output;
    }
    
    /**
     * 
     */
    function macroScale(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = reference.y || 0,
            unitsize = scope.unitsize,
            widthLeft = reference.width || 24,
            widthRight = reference.width || 24,
            between = reference.between || 40,
            dropLeft = reference.dropLeft || 24,
            dropRight = reference.dropRight || 24,
            // Tension is always the height from the top to a platform
            tensionLeft = dropLeft * unitsize,
            tensionRight = dropRight * unitsize,
            // Each part of the scale is registered in the collection {}
            collection = {},
            onThingMake = scope.spawnCollectionComponent.bind(scope, collection),
            onThingAdd = scope.spawnCollectionPartner.bind(scope, collection),
            stringLeft = { 
                "thing": "String",
                "x": x, 
                "y": y - 4, 
                "height": dropLeft - 4,
                "onThingMake": onThingMake,
                "collectionName": "stringLeft",
            },
            stringRight = {
                "thing": "String",
                "x": x + between,
                "y": y - 4, 
                "height": dropRight - 4,
                "onThingMake": onThingMake,
                "collectionName": "stringRight"
            },
            stringMiddle = { 
                "thing": "String", 
                "x": x + 4, 
                "y": y, 
                "width": between - 7, 
                "onThingMake": onThingMake,
                "collectionName": "stringMiddle" 
            },
            cornerLeft = {
                "thing": "StringCornerLeft", 
                "x": x, 
                "y": y
            },
            cornerRight = {
                "thing": "StringCornerRight", 
                "x": x + between - 4, 
                "y": y
            },
            platformLeft = { 
                "thing": "Platform",
                "x": x - (widthLeft / 2), 
                "y": y - dropLeft, 
                "width": widthLeft,
                "scale": true,
                "tension": (dropLeft - 1.5) * unitsize,
                "onThingMake": onThingMake,
                "onThingAdd": onThingAdd,
                "collectionName": "platformLeft",
                "collectionPartnerNames": {
                    "stringHere": "stringLeft",
                    "stringOther": "stringRight",
                    "platformOther": "platformRight",
                }
            },
            platformRight = { 
                "thing": "Platform",
                "x": x + between - (widthRight / 2),
                "y": y - dropRight, 
                "width": widthRight,
                "scale": true,
                "tension": (dropRight - 1.5) * unitsize,
                "onThingMake": onThingMake,
                "onThingAdd": onThingAdd,
                "collectionName": "platformRight" ,
                "collectionPartnerNames": {
                    "stringHere": "stringRight",
                    "stringOther": "stringLeft",
                    "platformOther": "platformLeft",
                }
            };
        
        return [
            stringLeft,
            stringRight,
            stringMiddle,
            cornerLeft,
            cornerRight,
            platformLeft,
            platformRight
        ];
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroPlatformGenerator(reference, prethings, area, map, scope) {
        var output = [],
            direction = reference.direction || 1,
            levels = direction > 0 ? [0, 48] : [8, 56],
            width = reference.width || 16,
            x = reference.x || 0,
            yvel = direction * scope.unitsize * .42,
            i;
        
        for (i = 0; i < levels.length; i += 1) {
            output.push({
                "thing": "Platform",
                "x": x,
                "y": levels[i],
                "width": width,
                "yvel": yvel,
                "movement": scope.movePlatformSpawn
            });
        }
        
        output.push({
            "thing": "PlatformString",
            "x": x + (width / 2) - .5,
            "y": scope.MapScreener.floor,
            "width": 1,
            "height": scope.MapScreener.height / scope.unitsize
        });
        
        return output;
    }
    
    /**
     * 
     */
    function macroWarpWorld(reference, prethings, area, map, scope) {
        var output = [],
            x = reference.x || 0,
            y = reference.y || 0,
            textHeight = reference.hasOwnProperty("textHeight")
                ? reference.textHeight : 8,
            warps = reference.warps,
            collectionName = "WarpWorldCollection-" + warps.join("."),
            keys = [],
            i;
        
        output.push({
            "thing": "CustomText",
            "x": x + 8,
            "y": y + textHeight + 56,
            "texts": [{
                "text": "WELCOME TO WARP WORLD!"
            }],
            "textAttributes": {
                "hidden": true
            },
            "collectionName": collectionName,
            "collectionKey": "Welcomer"
        });
        
        output.push({
            "thing": "DetectCollision",
            "x": x + 64,
            "y": y + 174,
            "width": 40,
            "height": 102,
            "activate": scope.activateWarpWorld,
            "collectionName": collectionName,
            "collectionKey": "Detector"
        });
        
        for (i = 0; i < warps.length; i += 1) {
            keys.push(i);
            output.push({
                "macro": "Pipe",
                "x": x + 8 + i * 32,
                "height": 24,
                "transport": { "map": warps[i] + "-1" },
                "collectionName": collectionName,
                "collectionKey": i + "-Pipe"
            });
            output.push({
                "thing": "Piranha",
                "x": x + 12 + i * 32,
                "y": y + 36,
                "collectionName": collectionName,
                "collectionKey": i + "-Piranha"
            });
            output.push({
                "thing": "CustomText",
                "x": x + 14 + i * 32,
                "y": y + 32 + textHeight,
                "texts": [{
                    "text": String(warps[i])
                }],
                "textAttributes": {
                    "hidden": true
                },
                "collectionName": collectionName,
                "collectionKey": i + "-Text"
            });
        }
        
        if (warps.length === 1) {
            for (i = 2; i < output.length; i += 1) {
                output[i].x += 32;
            }
        }
        
        return output;
    }
    
    /**
     * 
     */
    function macroCheepsStart(reference, prethings, area, map, scope) {
        return [
            { 
                "thing": "DetectCollision", 
                "x": reference.x || 0,
                "y": scope.MapScreener.floor,
                "width": reference.width || 8,
                "height": scope.MapScreener.height / scope.unitsize,
                "activate": scope.activateCheepsStart
            }
        ];
    }
    
    /**
     * 
     */
    function macroCheepsStop(reference, prethings, area, map, scope) {
        return [
            { 
                "thing": "DetectCollision", 
                "x": reference.x || 0,
                "y": scope.MapScreener.floor,
                "width": reference.width || 8,
                "height": scope.MapScreener.height / scope.unitsize,
                "activate": scope.activateCheepsStop
            }
        ];
    }
    
    /**
     * 
     */
    function macroBulletBillsStart(reference, prethings, area, map, scope) {
        return [
            { 
                "thing": "DetectCollision", 
                "x": reference.x || 0,
                "y": scope.MapScreener.floor,
                "width": reference.width || 8,
                "height": scope.MapScreener.height / scope.unitsize,
                "activate": scope.activateBulletBillsStart
            }
        ];
    }
    
    /**
     * 
     */
    function macroBulletBillsStop(reference, prethings, area, map, scope) {
        return [
            { 
                "thing": "DetectCollision", 
                "x": reference.x || 0,
                "y": scope.MapScreener.floor,
                "width": reference.width || 8,
                "height": scope.MapScreener.height / scope.unitsize,
                "activate": scope.activateBulletBillsStop
            }
        ];
    }
    
    /**
     * 
     */
    function macroLakituStop(reference, prethings, area, map, scope) {
        return [
            {
                "thing": "DetectCollision",
                "x": reference.x || 0,
                "y": scope.MapScreener.floor,
                "width": reference.width || 8,
                "height": scope.MapScreener.height / scope.unitsize,
                "activate": scope.activateLakituStop
            }
        ];
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroCastleSmall(reference) {
        var output = [],
            x = reference.x || 0,
            y = reference.y || 0,
            i, j;
        
        // Base filling left
        for (i = 0; i < 2; i += 1) { // x
            output.push({ 
                "thing": "BrickHalf", 
                "x": x + i * 8,
                "y": y + 4,
                "position": "end"
            });
            
            for (j = 1; j < 3; j += 1) { // y
                output.push({
                    "thing": "BrickPlain",
                    "x": x + i * 8,
                    "y": y + 4 + j * 8,
                    "position": "end"
                });
            }
        }
        
        // Base filling right
        for (i = 0; i < 2; i += 1) { // x
            output.push({ 
                "thing": "BrickHalf", 
                "x": x + 24 + i * 8,
                "y": y + 4,
                "position": "end"
            });
            
            for (j = 1; j < 3; j += 1) { // y
                output.push({
                    "thing": "BrickPlain",
                    "x": x + 24 + i * 8,
                    "y": y + 4 + j * 8,
                    "position": "end"
                });
            }
        }
        
        // Medium railing left
        output.push({
            "thing": "CastleRailing",
            "x": x,
            "y": y + 24,
            "position": "end"
        });
        
        // Medium railing center
        for (i = 0; i < 3; i += 1) {
            output.push({
                "thing": "CastleRailingFilled",
                "x": x + (i + 1) * 8,
                "y": y + 24,
                "position": "end"
            });
        }
        
        // Medium railing right
        output.push({
            "thing": "CastleRailing",
            "x": x + 32,
            "y": y + 24,
            "position": "end"
        });
        
        // Top railing
        for (i = 0; i < 3; i += 1) {
            output.push({
                "thing": "CastleRailing",
                "x": x + (i + 1) * 8,
                "y": y + 40,
                "position": "end"
            });
        }
        
        // Top bricking
        for (i = 0; i < 2; i += 1) {
            output.push({
                "thing": "CastleTop",
                "x": x + 8 + i * 12,
                "y": y + 36,
                "position": "end"
            });
        }
        
        // Door, and detector if required
        output.push({
            "thing": "CastleDoor",
            "x": x + 16,
            "y": y + 20,
            "position": "end"
        });
        if (reference.transport) {
            output.push({
                "thing": "DetectCollision",
                "x": x + 24,
                "y": y + 16,
                "height": 16,
                "activate": FullScreenMario.prototype.collideCastleDoor,
                "transport": reference.transport,
                "position": "end"
            });
        }
        
        return output;
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroCastleLarge(reference) {
        var output = [],
            x = reference.x || 0,
            y = reference.y || 0,
            i, j;
        
        output.push({
            "macro": "CastleSmall",
            "x": x + 16,
            "y": y + 48   
        });
        
        // CastleWalls left
        for (i = 0; i < 2; i += 1) { // x
            output.push({
                "thing": "CastleWall",
                "x": x + i * 8,
                "y": y + 48
            });
        }
        
        // Bottom doors with bricks on top
        for (i = 0; i < 3; i += 1) { // x
            output.push({
                "thing": "CastleDoor",
                "x": x + 16 + i * 16,
                "y": y + 20,
                "position": "end"
            });
            for (j = 0; j < 2; j += 1) {
                output.push({
                    "thing": "BrickPlain",
                    "x": x + 16 + i * 16,
                    "y": y + 28 + j * 8
                });
                output.push({
                    "thing": "BrickHalf",
                    "x": x + 16 + i * 16,
                    "y": y + 40 + j * 4
                });
            }
        }
        
        // Bottom bricks with doors on top
        for (i = 0; i < 2; i += 1) { // x
            for (j = 0; j < 3; j += 1) { // y
                output.push({
                    "thing": "BrickPlain",
                    "x": x + 24 + i * 16,
                    "y": y + 8 + j * 8
                });
            }
            output.push({
                "thing": "CastleDoor",
                "x": x + 24 + i * 16,
                "y": y + 44
            });
        }
        
        // Railing (filled)
        for (i = 0; i < 5; i += 1) { // x
            output.push({
                "thing": "CastleRailingFilled",
                "x": x + 16 + i * 8,
                "y": y + 48
            });
        }
        
        // CastleWalls right
        j = reference.hasOwnProperty("walls") ? reference.walls : 2;
        for (i = 0; i < j; i += 1) { // x
            output.push({
                "thing": "CastleWall",
                "x": x + 56 + i * 8,
                "y": y + 48,
                "position": "end"
            });
        }
        
        if (reference.transport) {
            output.push({
                "thing": "DetectCollision",
                "x": x + 24,
                "y": y + 16,
                "height": 16,
                "activate": FullScreenMario.prototype.collideCastleDoor,
                "transport": reference.transport,
                "position": "end"
            });
        }
        
        return output;
    }
    
    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroStartInsideCastle(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = reference.y || 0,
            width = (reference.width || 0) - 40,
            output = [
                { "thing": "Stone", "x": x, "y": y + 48, "width": 24, "height": "Infinity" },
                { "thing": "Stone", "x": x + 24, "y": y + 40, "width": 8, "height": "Infinity" },
                { "thing": "Stone", "x": x + 32, "y": y + 32, "width": 8, "height": "Infinity" }
            ];
        
        if (width > 0) {
            output.push({ "macro": "Floor", "x": x + 40, "y": y + 24, "width": width });
        }
        
        return output;
    }
    
    /**
     * 
     *
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroEndOutsideCastle(reference) {
        var x = reference.x || 0,
            y = reference.y || 0,
            output;
        
        // Output starts off with the general flag & collision detection
        output = [
            // Initial collision detector
            {
                thing: "DetectCollision", x: x, y: y + 108, height: 100,
                activate: FullScreenMario.prototype.collideFlagpole,
                activateFail: FullScreenMario.prototype.killNormal 
            },
            // Flag (scenery)
            { thing: "Flag", x: x - 4.5, y: y + 79.5 },
            { thing: "FlagTop", x: x + 1.5, y: y + 84 },
            { thing: "FlagPole", x: x + 3, y: y + 80 },
            // Bottom stone
            { thing: "Stone", x: x, y: y + 8 },
        ];
        
        if (reference.large) {
            output.push({
                "macro": "CastleLarge",
                "x": x + (reference.castleDistance || 24),
                "y": y,
                "transport": reference.transport,
                "walls": reference.walls || 8
            });
        } else {
            output.push({
                "macro": "CastleSmall",
                "x": x + (reference.castleDistance || 32),
                "y": y,
                "transport": reference.transport
            });
        }

        return output;
    }

    /**
     * 
     * 
     * @param {Object} reference   A listing of the settings for this macro,
     *                             from an Area's .creation Object.
     */
    function macroEndInsideCastle(reference, prethings, area, map, scope) {
        var x = reference.x || 0,
            y = reference.y || 0,
            npc = reference.npc || "Toad",
            style = reference.style || {},
            output, texts, keys;

        if (npc === "Toad") {
            keys = ["1", "2"];
            texts = [{
                "thing": "CustomText",
                "x": x + 164,
                "y": y + 64,
                "texts": [{
                    "text": "THANK YOU MARIO!"
                }],
                "textAttributes": {
                    "hidden": true
                },
                "collectionName": "endInsideCastleText",
                "collectionKey": "1"
            }, {
                "thing": "CustomText",
                "x": x + 152,
                "y": y + 48,
                "texts": [{
                    "text": "BUT OUR PRINCESS IS IN"
                }, {
                    "text": "ANOTHER CASTLE!"
                }],
                "textAttributes": {
                    "hidden": true
                },
                "collectionName": "endInsideCastleText",
                "collectionKey": "2"
            }];
        } else if (npc === "Peach") {
            keys = ["1", "2", "3"];
            texts = [{
                "thing": "CustomText",
                "x": x + 164,
                "y": y + 64,
                "texts": [{
                    "text": "THANK YOU MARIO!"
                }],
                "textAttributes": {
                    "hidden": true
                },
                "collectionName": "endInsideCastleText",
                "collectionKey": "1"
            }, {
                "thing": "CustomText",
                "x": x + 152,
                "y": y + 48,
                "texts": [{
                    "text": "YOUR QUEST IS OVER.",
                    "offset": 12
                }, {
                    "text": "WE PRESENT YOU A NEW QUEST."
                }],
                "textAttributes": {
                    "hidden": true
                },
                "collectionName": "endInsideCastleText",
                "collectionKey": "2"
            }, {
                "thing": "CustomText", 
                "x": x + 152,
                "y": 32,
                "texts": [{
                    "text": "PRESS BUTTON B",
                    "offset": 8
                }, {
                    "text": "TO SELECT A WORLD"
                }],
                "textAttributes": {
                    "hidden": true
                },
                "collectionName": "endInsideCastleText",
                "collectionKey": "3"
            }];
        }
        
        output = [
            { "thing": "Stone", "x": x, "y": y + 88, "width": 256 },
            { "macro": "Water", "x": x, "y": y, "width": 104 },
            // Bridge & Bowser area
            { "thing": "CastleBridge", "x": x, "y": y + 24, "width": 104 },
            { "thing": "Bowser", "x": x + 69, "y": y + 42, "hard": reference.hard },
            { "thing": "CastleChain", "x": x + 96, "y": y + 32 },
            // Axe area
            { "thing": "CastleAxe", "x": x + 104, "y": y + 40 },
            { "thing": "ScrollBlocker", "x": x + 112 },
            { "macro": "Floor", "x": x + 104, "y": y, "width": 152 },
            { "thing": "Stone", "x": x + 104, "y": y + 32, "width": 24, "height": 32 },
            { "thing": "Stone", "x": x + 112, "y": y + 80, "width": 16, "height": 24 },
            // Peach's Magical Happy Chamber of Fantastic Love
            { 
                "thing": "DetectCollision", "x": x + 180, 
                "activate": scope.collideCastleNPC, 
                "transport": reference.transport,
                "collectionName": "endInsideCastleText", 
                "collectionKey": "npc", 
                "collectionKeys": keys
            },
            { "thing": npc, "x": x + 200, "y": 13 },
            { "thing": "ScrollBlocker", "x": x + 256 }
        ]
        
        output.push.apply(output, texts);
        return output;
    }
    
    /**
     * 
     */
    function macroSection(reference, prethings, area, map, scope) {
        return [
            { 
                "thing": "DetectSpawn", 
                "x": reference.x, 
                "y": reference.y, 
                "activate": scope.activateSectionBefore,
                "section": reference.section || 0 
            }
        ];
    }
    
    /**
     * 
     */
    function macroSectionPass(reference, prethings, area, map, scope) {
        return [
            { 
                "thing": "DetectCollision", 
                "x": reference.x,
                "y": reference.y, 
                "width": reference.width || 8, "height": reference.height || 8, 
                "activate": function (thing) {
                    thing.EightBitter.MapScreener.sectionPassed = true;
                }
            }
        ];
    }
    
    /**
     * 
     */
    function macroSectionFail(reference, prethings, area, map, scope) {
        return [
            { 
                "thing": "DetectCollision", 
                "x": reference.x,
                "y": reference.y, 
                "width": reference.width || 8, "height": reference.height || 8, 
                "activate": function (thing) {
                    thing.EightBitter.MapScreener.sectionPassed = false;
                }
            }
        ];
    }
    
    /**
     * 
     */
    function macroSectionDecider(reference, prethings, area, map, scope) {
        return [
            {
                "thing": "DetectSpawn",
                "x": reference.x, "y": reference.y,
                "width": reference.width || 8, "height": reference.height || 8,
                "activate": function (thing) {
                    if (thing.EightBitter.MapScreener.sectionPassed) {
                        thing.section = reference.pass || 0;
                    } else {
                        thing.section = reference.fail || 0;
                    }
                    thing.EightBitter.activateSectionBefore(thing);
                }
            }
        ];
    }
    
   
    // Add all registered functions from above to the FullScreenMario prototype
    proliferateHard(FullScreenMario.prototype, {
        // Resets
        "resetStatsHolder": resetStatsHolder,
        "resetContainer": resetContainer,
        // Global manipulations
        "gameStart": gameStart,
        "gameOver": gameOver,
        "addPreThing": addPreThing,
        "addPlayer": addPlayer,
        "scrollPlayer": scrollPlayer,
        "onGamePause": onGamePause,
        "onGamePlay": onGamePlay,
        // Inputs
        "keyDownLeft": keyDownLeft,
        "keyDownRight": keyDownRight,
        "keyDownUp": keyDownUp,
        "keyDownDown": keyDownDown,
        "keyDownSprint": keyDownSprint,
        "keyDownPause": keyDownPause,
        "keyDownMute": keyDownMute,
        "keyUpLeft": keyUpLeft,
        "keyUpRight": keyUpRight,
        "keyUpUp": keyUpUp,
        "keyUpDown": keyUpDown,
        "keyUpSprint": keyUpSprint,
        "keyUpPause": keyUpPause,
        "mouseDownRight": mouseDownRight,
        "deviceMotion": deviceMotion,
        "canInputsTrigger": canInputsTrigger,
        // Upkeep maintenence
        "maintainSolids": maintainSolids,
        "maintainCharacters": maintainCharacters,
        "maintainPlayer": maintainPlayer,
        // Collision detectors
        "generateCanThingCollide": generateCanThingCollide,
        "isThingTouchingThing": isThingTouchingThing,
        "isThingOnThing": isThingOnThing,
        "isThingOnSolid": isThingOnSolid,
        "generateIsCharacterTouchingSolid": generateIsCharacterTouchingSolid,
        "generateIsCharacterTouchingCharacter": generateIsCharacterTouchingCharacter,
        "isCharacterOnSolid": isCharacterOnSolid,
        "isCharacterOnResting": isCharacterOnResting,
        "isCharacterAboveEnemy": isCharacterAboveEnemy,
        "isCharacterBumpingSolid": isCharacterBumpingSolid,
        "isSolidOnCharacter": isSolidOnCharacter,
        "isCharacterAlive": isCharacterAlive,
        // Collision reactions
        "gainLife": gainLife,
        "itemJump": itemJump,
        "jumpEnemy": jumpEnemy,
        "playerShroom": playerShroom,
        "playerShroom1Up": playerShroom1Up,
        "playerStarUp": playerStarUp,
        "playerStarDown": playerStarDown,
        "playerStarOffCycle": playerStarOffCycle,
        "playerStarOffFinal": playerStarOffFinal,
        "playerGetsBig": playerGetsBig,
        "playerGetsBigAnimation": playerGetsBigAnimation,
        "playerGetsSmall": playerGetsSmall,
        "playerGetsFire": playerGetsFire,
        "setPlayerSizeSmall": setPlayerSizeSmall,
        "setPlayerSizeLarge": setPlayerSizeLarge,
        "animatePlayerRemoveCrouch": animatePlayerRemoveCrouch,
        "unattachPlayer": unattachPlayer,
        "playerAddRestingStone": playerAddRestingStone,
        // Spawn / actions
        "spawnHammerBro": spawnHammerBro,
        "spawnBowser": spawnBowser,
        "spawnPiranha": spawnPiranha,
        "spawnBlooper": spawnBlooper,
        "spawnPodoboo": spawnPodoboo,
        "spawnLakitu": spawnLakitu,
        "spawnCannon": spawnCannon,
        "spawnCastleBlock": spawnCastleBlock,
        "spawnMoveFloating": spawnMoveFloating,
        "spawnMoveSliding": spawnMoveSliding,
        "spawnRandomCheep": spawnRandomCheep,
        "spawnRandomBulletBill": spawnRandomBulletBill,
        "spawnCustomText": spawnCustomText,
        "spawnDetector": spawnDetector,
        "spawnCollectionComponent": spawnCollectionComponent,
        "spawnCollectionPartner": spawnCollectionPartner,
        "spawnRandomSpawner": spawnRandomSpawner,
        "activateCheepsStart": activateCheepsStart,
        "activateCheepsStop": activateCheepsStop,
        "activateBulletBillsStart": activateBulletBillsStart,
        "activateBulletBillsStop": activateBulletBillsStop,
        "activateLakituStop": activateLakituStop,
        "activateWarpWorld": activateWarpWorld,
        "activateRestingStone": activateRestingStone,
        "activateWindowDetector": activateWindowDetector,
        "activateScrollBlocker": activateScrollBlocker,
        "activateScrollEnabler": activateScrollEnabler,
        "activateSectionBefore": activateSectionBefore,
        "activateSectionStretch": activateSectionStretch,
        "activateSectionAfter": activateSectionAfter,
        // Collision / actions
        "generateHitCharacterSolid": generateHitCharacterSolid,
        "generateHitCharacterCharacter": generateHitCharacterCharacter,
        "collideFriendly": collideFriendly,
        "collideCharacterSolid": collideCharacterSolid,
        "collideCharacterSolidUp": collideCharacterSolidUp,
        "collideUpItem": collideUpItem,
        "collideUpCoin": collideUpCoin,
        "collideCoin": collideCoin,
        "collideStar": collideStar,
        "collideFireball": collideFireball,
        "collideCastleFireball": collideCastleFireball,
        "collideShell": collideShell,
        "collideShellSolid": collideShellSolid,
        "collideShellPlayer": collideShellPlayer,
        "collideShellShell": collideShellShell,
        "collideEnemy": collideEnemy,
        "collideBottomBrick": collideBottomBrick,
        "collideBottomBlock": collideBottomBlock,
        "collideVine": collideVine,
        "collideSpringboard": collideSpringboard,
        "collideWaterBlocker": collideWaterBlocker,
        "collideFlagpole": collideFlagpole,
        "collideFlagBottom": collideFlagBottom,
        "collideCastleAxe": collideCastleAxe,
        "collideCastleDoor": collideCastleDoor,
        "collideCastleNPC": collideCastleNPC,
        "collideTransport": collideTransport,
        "collideDetector": collideDetector,
        "collideLevelTransport": collideLevelTransport,
        // Movement
        "moveSimple": moveSimple,
        "moveSmart": moveSmart,
        "moveJumping": moveJumping,
        "movePacing": movePacing,
        "moveHammerBro": moveHammerBro,
        "moveBowser": moveBowser,
        "moveBowserFire": moveBowserFire,
        "moveFloating": moveFloating,
        "moveSliding": moveSliding,
        "movePlatform": movePlatform,
        "setMovementEndpoints": setMovementEndpoints,
        "movePlatformSpawn": movePlatformSpawn,
        "movePlatformScale": movePlatformScale,
        "moveVine": moveVine,
        "moveSpringboardUp": moveSpringboardUp,        "moveFalling": moveFalling,        "moveFreeFalling": moveFreeFalling,
        "moveShell": moveShell,
        "movePiranha": movePiranha,
        "moveBubble": moveBubble,
        "moveCheepCheep": moveCheepCheep,
        "moveCheepCheepFlying": moveCheepCheepFlying,
        "moveBlooper": moveBlooper,
        "moveBlooperSqueezing": moveBlooperSqueezing,
        "movePodobooFalling": movePodobooFalling,
        "moveLakitu": moveLakitu,
        "moveLakituInitial": moveLakituInitial,
        "moveLakituFleeing": moveLakituFleeing,
        "moveCoinEmerge": moveCoinEmerge,
        "movePlayer": movePlayer,
        "movePlayerVine": movePlayerVine,
        "movePlayerSpringboardDown": movePlayerSpringboardDown,
        // Animations
        "animateSolidBump": animateSolidBump,
        "animateSolidContents": animateSolidContents,
        "animateBlockBecomesUsed": animateBlockBecomesUsed,
        "animateBrickShards": animateBrickShards,
        "animateEmerge": animateEmerge,
        "animateEmergeCoin": animateEmergeCoin,
        "animateEmergeVine": animateEmergeVine,
        "animateFlicker": animateFlicker,
        "animateJump": animateJump,
        "animateThrowingHammer": animateThrowingHammer,
        "animateBowserJump": animateBowserJump,
        "animateBowserFire": animateBowserFire,
        "animateBowserFireOpen": animateBowserFireOpen,
        "animateBowserFreeze": animateBowserFreeze,
        "animateBlooperUnsqueezing": animateBlooperUnsqueezing,
        "animatePodobooJumpUp": animatePodobooJumpUp,
        "animatePodobooJumpDown": animatePodobooJumpDown,
        "animateLakituThrowingSpiny": animateLakituThrowingSpiny,
        "animateSpinyEggHatching": animateSpinyEggHatching,
        "animateFireballEmerge": animateFireballEmerge,
        "animateFireballExplode": animateFireballExplode,
        "animateFirework": animateFirework,
        "animateEndLevelFireworks": animateEndLevelFireworks,
        "animateCannonFiring": animateCannonFiring,
        "animateCastleBlock": animateCastleBlock,
        "animateCastleBridgeOpen": animateCastleBridgeOpen,
        "animateCastleChainOpen": animateCastleChainOpen,
        "animatePlayerFire": animatePlayerFire,
        "animatePlayerPaddling": animatePlayerPaddling,
        "animatePlayerLanding": animatePlayerLanding,
        "animatePlayerRestingOff": animatePlayerRestingOff,
        "animatePlayerBubbling": animatePlayerBubbling,
        "animatePlayerRunningCycle": animatePlayerRunningCycle,
        "animatePlayerPipingStart": animatePlayerPipingStart,
        "animatePlayerPipingEnd": animatePlayerPipingEnd,
        "animatePlayerOffPole": animatePlayerOffPole,
        "animatePlayerOffVine": animatePlayerOffVine,
        "animateCharacterHop": animateCharacterHop,
        // Appearance utilities
        "lookTowardsThing": lookTowardsThing,
        "lookTowardsPlayer": lookTowardsPlayer,
        // Death functions
        "killNormal": killNormal,
        "killFlip": killFlip,
        "killSpawn": killSpawn,
        "killReplace": killReplace,
        "killGoomba": killGoomba,
        "killKoopa": killKoopa,
        "killBowser": killBowser,
        "killToShell": killToShell,
        "killNPCs": killNPCs,
        "killBrick": killBrick,
        "killPlayer": killPlayer,
        // Scoring
        "findScore": findScore,
        "score": score,
        "scoreOn": scoreOn,
        "scoreAnimateOn": scoreAnimateOn,
        "scoreAnimate": scoreAnimate,
        "scorePlayerShell": scorePlayerShell,
        "scorePlayerFlag": scorePlayerFlag,
        // Audio
        "getVolumeLocal": getVolumeLocal,
        "getAudioThemeDefault": getAudioThemeDefault,
        // Map sets
        "setMap": setMap,
        "setLocation": setLocation,
        // Map entrances
        "mapEntranceNormal": mapEntranceNormal,
        "mapEntrancePlain": mapEntrancePlain,
        "mapEntranceWalking": mapEntranceWalking,
        "mapEntranceCastle": mapEntranceCastle,
        "mapEntranceVine": mapEntranceVine,
        "mapEntranceVinePlayer": mapEntranceVinePlayer,
        "mapEntrancePipeVertical": mapEntrancePipeVertical,
        "mapEntrancePipeHorizontal": mapEntrancePipeHorizontal,
        "mapEntranceRespawn": mapEntranceRespawn,
        // Map exits
        "mapExitPipeVertical": mapExitPipeVertical,
        "mapExitPipeHorizontal": mapExitPipeHorizontal,
        // Map creation
        "initializeArea": initializeArea,
        "getAbsoluteHeight": getAbsoluteHeight,
        "mapAddStretched": mapAddStretched,
        "mapAddAfter": mapAddAfter,
        "mapPlaceRandomCommands": mapPlaceRandomCommands,
        "mapStretchThing": mapStretchThing,
        "macroExample": macroExample,
        "macroFillPreThings": macroFillPreThings,
        "macroFillPrePattern": macroFillPrePattern,
        "macroFloor": macroFloor,
        "macroPipe": macroPipe,
        "macroPipeCorner": macroPipeCorner,
        "macroTree": macroTree,
        "macroShroom": macroShroom,
        "macroWater": macroWater,
        "macroCastleSmall": macroCastleSmall,
        "macroCastleLarge": macroCastleLarge,
        "macroCeiling": macroCeiling,
        "macroBridge": macroBridge,
        "macroScale": macroScale,
        "macroPlatformGenerator": macroPlatformGenerator,
        "macroWarpWorld": macroWarpWorld,
        "macroCheepsStart": macroCheepsStart,
        "macroCheepsStop": macroCheepsStop,
        "macroBulletBillsStart": macroBulletBillsStart,
        "macroBulletBillsStop": macroBulletBillsStop,
        "macroLakituStop": macroLakituStop,
        "macroStartInsideCastle": macroStartInsideCastle,
        "macroEndOutsideCastle": macroEndOutsideCastle,
        "macroEndInsideCastle": macroEndInsideCastle,
        "macroSection": macroSection,
        "macroSectionPass": macroSectionPass,
        "macroSectionFail": macroSectionFail,
        "macroSectionDecider": macroSectionDecider
    });
    
    return FullScreenMario;
})(GameStartr);
FullScreenMario.prototype.settings.audio = {
    "directory": "Sounds",
    "fileTypes": ["mp3", "ogg"],
    "statistics": {
        "prefix": "FullScreenMario::AudioPlayer::",
        "values": {
            "volume": {
                "valueDefault": 0.5,
                "storeLocally": true
            },
            "muted": {
                "valueDefault": 0,
                "storeLocally": true
            }
        }
    },
    "library": {
        "Sounds": [
            "Bowser Falls",
            "Bowser Fires",
            "Break Block",
            "Bump",
            "Coin",
            "Ending",
            "Fireball",
            "Firework",
            "Flagpole",
            "Gain Life",
            "Game Over 2",
            "Game Over",
            "Hurry",
            "Jump Small",
            "Jump Super",
            "Kick",
            "Level Complete",
            "Player Dies",
            "Pause",
            "Pipe",
            "Power Down",
            "Powerup Appears",
            "Powerup",
            "Stage Clear",
            "Vine Emerging",
            "World Clear",
            "You Dead"
        ],
        "Themes": [
            "Castle",
            "Overworld",
            "Underwater",
            "Underworld",
            "Star",
            "Sky",
            "Hurry Castle",
            "Hurry Overworld",
            "Hurry Underwater",
            "Hurry Underworld",
            "Hurry Star",
            "Hurry Sky"
        ]
    }
}
FullScreenMario.prototype.settings.collisions = {
    "groupNames": ["Solid", "Character", "Scenery", "Text"],
    "groupTypes": "Array",
    "hitCheckGenerators": {
        "Character": {
            "Character": FullScreenMario.prototype.generateIsCharacterTouchingCharacter,
            "Solid": FullScreenMario.prototype.generateIsCharacterTouchingSolid
        }
    },
    "hitFunctionGenerators": {
        "Character": {
            "Solid": FullScreenMario.prototype.generateHitCharacterSolid,
            "Character": FullScreenMario.prototype.generateHitCharacterCharacter
        }
    },
    "globalCheckGenerators": {
        "Character": FullScreenMario.prototype.generateCanThingCollide,
        "Solid": FullScreenMario.prototype.generateCanThingCollide
    }
};
(function (things, macros) {
	FullScreenMario.prototype.settings.editor = {
		"blocksize": FullScreenMario.unitsize * 4,
		"mapDefault": {
			"name": "New Map",
			"locations": [
				{ "entry": "Plain" }
			],
			"areas": [
				{
					"setting": "Overworld",
					"creation": [
						{ "location": "0" },
						{ "macro": "Floor", "x": 0, "y": 0, "width": 128 }
					]
				}
			]
		},
		"mapSettingDefault": "Overworld",
		"mapEntryDefault": "Plain",
		"things": things,
        "thingGroups": ["Text", "Character", "Solid", "Scenery"],
		"thingKeys": (function () {
			var keys = [];
			Object.keys(things).forEach(function (group) {
				keys.push.apply(keys, Object.keys(things[group]));
			});
			return keys;
		})(),
		"macros": macros
	};
	
})({
	"Characters": {
		"Goomba": undefined,
		"Koopa": {
			"smart": "Boolean",
			"jumping": "Boolean",
			"flying": "Boolean"
		},
		"Beetle": undefined,
		"Piranha": {
			"evil": "Boolean"
		},
		"Blooper": undefined,
		"CheepCheep": {
			"smart": "Boolean"
		},
		"Podoboo": undefined,
		"Lakitu": undefined,
		"HammerBro": undefined,
		"Bowser": {
			"contents": [ 
				"Gooma", "Koopa", "HammerBro", "Bowser"
			]
		}
	},
	"Items": {
		"Mushroom": undefined,
		"Mushroom1Up": undefined,
		"MushroomDeathly": undefined,
		"FireFlower": undefined,
		"Star": undefined,
		"Shell": {
			"smart": "Boolean"
		},
		"BeetleShell": undefined,
		"Coin": undefined
	},
	"Solids": {
		"Block": {
			"contents": [
				"Coin", "Mushroom", "Star", "Mushroom1Up", "MushroomDeathly"
			],
			"hidden": "Boolean"
		},
		"Brick": {
			"contents": [
				"Coin", "Mushroom", "Star", "Mushroom1Up", "MushroomDeathly"
			]
		},
		"Pipe": {
			"height": {
                "type": "Number",
                "value": 8,
                "mod": 8,
                "Infinite": true
            }
		},
		"PipeHorizontal": {
			"width": {
                "type": "Number",
                "value": 2,
                "mod": 8
            },
            "transport": "Location"
		},
		"PipeVertical": {
			"height": {
                "type": "Number",
                "value": 2,
                "mod": 8,
                "Infinite": true
            },
            "transport": "Location"
		},
		"Platform": {
			"width": 2
		},
		"Stone": {
			"width": 1,
			"height": {
                "type": "Number",
                "value": 1,
                "Infinite": true
            }
		},
		"Cannon": {
			"height": 1
		},
		"Springboard": undefined,
		"Floor": {
			"width": 8,
			"height": {
                "type": "Number",
                "value": Infinity,
                "Infinite": true
            }
		},
		"CastleBlock": {
			"fireballs": {
                "value": 0,
                "mod": 4
            }
		},
		"CastleBridge": {
			"width": 8
		},
		"Coral": {
			"width": 8,
			"height": 8
		}
	},
	"Scenery": {
		"BrickPlain": undefined,
		"Bush1": undefined,
		"Bush2": undefined,
		"Bush3": undefined,
		"Cloud1": undefined,
		"Cloud2": undefined,
		"Cloud3": undefined,
		"Fence": {
            "width": 8
        },
		"HillSmall": undefined,
		"HillLarge": undefined,
		"PlantSmall": undefined,
		"PlantLarge": undefined,
		"Railing": undefined,
		"Water": undefined
	}
}, {
    "Fill": {
        "description": "Place a bunch of Things at once, as a grid.",
        "options": {
            "thing": "Everything",
            "xnum": 1,
            "ynum": 1,
            "xwidth": 8,
            "ywidth": 8
        }
    },
    "Pattern": {
        "description": "Fill one of the preset Scenery background patterns.",
        "options": {
            "Pattern": [
                "BackRegular", "BackCloud", "BackFence", "BackFenceMin", "BackFenceMin2", "BackFenceMin3"
            ],
            "repeat": "Number"
        }
    },
    "Floor": {
        "description": "Place a floor of infinite height.",
        "options": {
            "width": {
                "type": "Number",
                "value": 8,
                "mod": 4
            }
        }
    },
    "Pipe": {
        "description": "Add a pipe with the option for piranhas and moving to locations.",
        "options": {
            "height": 8,
            "piranha": "Boolean",
            "transport": "Location",
            "entrance": "Location"
        }
    },
    "Tree": {
        "description": "Add a tree to the map.",
        "options": {
            "width": {
                "type": "Number",
                "value": 4,
                "mod": 8
            }
        }
    },
    "Shroom": {
        "function": "macroShroom",
        "description": "Add a mushroom tree to the map.",
        "options": {
            "width": {
                "type": "Number",
                "value": 4,
                "mod": 8
            }
        }
    },
    "Water": {
        "function": "macroWater",
        "description": "Fill water of infinite height.",
        "options": {
            "width": 4
        }
    },
    "CastleSmall": {
        "description": "Add a one-story castle to the map."
    },
    "CastleLarge": {
        "description": "Add a two-story castle to the map."
    },
    "Ceiling": {
        "description": "Add an Underworld-style ceiling of Bricks.",
        "options": {
            "width": "Number"
        }
    },
    "Bridge": {
        "description": "Create a bridge, complete with stone columns.",
        "options": {
            "width": 8,
            "start": "Boolean",
            "end": "Boolean"
        }
    },
    "PlatformGenerator": {
        "description": "Add a columnn of infinitely generated platforms.",
        "options": {
            "width": 8
        }
    },
    "StartInsideCastle": {
        "description": "Add the castle stones similar to typical Castles.",
        "options": {
            "width": 8
        }
    },
    "EndOutsideCastle": {
        "description": "End the map off with an outdoor flag and Castle."
    },
    "EndInsideCastle": {
        "description": "End the map off with an indoor bridge, Bowser, and Toad."
    }
});
FullScreenMario.prototype.settings.events = {
    "keyOnSpriteCycleStart": "onThingAdd",
    "keyDoSpriteCycleStart": "placed",
    "keyCycleCheckValidity": "alive",
    "timingDefault": 9
};
FullScreenMario.prototype.settings.generator = {
    "possibilities": {
        
        /* Randomization continuation
        */
        
        "RandomSpawnerOverworld": {
            "width": 0,
            "height": 0,
            "contents": {
                "mode": "Random",
                "limit": 1,
                "children": [{
                    "percent": 100,
                    "type": "Known",
                    "title": "RandomSpawner",
                    "arguments": {
                        "randomization": "Overworld",
                        "randomWidth": 2992,
                        "randomTop": 80,
                        "randomBottom": 0
                    }
                }]
            }
        },
        "RandomSpawnerUnderworld": {
            "width": 0,
            "height": 0,
            "contents": {
                "mode": "Random",
                "limit": 1,
                "children": [{
                    "percent": 100,
                    "type": "Known",
                    "title": "RandomSpawner",
                    "arguments": {
                        "randomization": "Underworld",
                        "randomWidth": 1400,
                        "randomTop": 80,
                        "randomBottom": 0
                    }
                }]
            }
        },
        "RandomSpawnerSky": {
            "width": 0,
            "height": 0,
            "contents": {
                "mode": "Random",
                "limit": 1,
                "children": [{
                    "percent": 100,
                    "type": "Known",
                    "title": "RandomSpawner",
                    "arguments": {
                        "randomization": "Sky",
                        "randomWidth": 700,
                        "randomTop": 80,
                        "randomBottom": 0
                    }
                }]
            }
        },
        "RandomSpawnerCastle": {
            "width": 0,
            "height": 0,
            "contents": {
                "mode": "Random",
                "limit": 1,
                "children": [{
                    "percent": 100,
                    "type": "Known",
                    "title": "RandomSpawner",
                    "arguments": {
                        "randomization": "Castle",
                        "randomWidth": 700,
                        "randomTop": 80,
                        "randomBottom": 0
                    }
                }]
            }
        },
        
        
        /* Overworld
        */
        
        "Overworld": {
            "height": 80,
            "width": 2992,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "OverworldStart"
                }, {
                    "type": "Random",
                    "title": "OverworldBody"
                }, {
                    "type": "Random",
                    "title": "OverworldEnd"
                }]
            }
        },
        "OverworldStart": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": -8,
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 112
                    }
                }, {
                    "type": "Random",
                    "title": "OverworldScenery"
                }]
            }
        },
        "OverworldBody": {
            "width": 2480,
            "height": 80,
            "contents": {
                "mode": "Multiple",
                "children": [{
                    "type": "Random",
                    "title": "OverworldRandomization"
                }, {
                    "type": "Random",
                    "title": "OverworldClouds"
                }]
            }
        },
        "OverworldRandomization": {
            "width": 2480,
            "height": 80,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "OverworldClump"
                }, {
                    "type": "Random",
                    "title": "OverworldSegwaySpotty"
                }, {
                    "type": "Random",
                    "title": "OverworldSegway"
                }, {
                    "type": "Random",
                    "title": "OverworldSegwaySpotty"
                }]
            }
        },
        "OverworldClump": {
            "width": 160,
            "height": 80,
            "contents": {
                "mode": "Multiple",
                "children": [{
                    "type": "Random",
                    "title": "OverworldScenery"
                }, {
                    "type": "Random",
                    "title": "OverworldLandArea"
                }]
            }
        },
        "OverworldLandArea": {
            "width": 160,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 160
                    }
                }, {
                    "type": "Random",
                    "title": "LandObstacleGroup"
                }]
            }
        },
        
        
        /* Areas Segway floors
        */
        
        "OverworldSegway": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 30,
                    "type": "Random",
                    "title": "OverworldSegwaySpotty"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "OverworldSegwayEnemySpots"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "OverworldSegwayRamps"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "OverworldSegwayWatery"
                }, {
                    "percent": 10,
                    "type": "Random",
                    "title": "OverworldSegwaySpring"
                }, {
                    "percent": 10,
                    "type": "Random",
                    "title": "OverworldSegwayPipeTransit"
                }]
            }
        },
        "OverworldSegwaySpotty": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 60,
                    "type": "Random",
                    "title": "OverworldSegwaySpot",
                }, {
                    "percent": 40,
                    "type": "Random",
                    "title": "Nothing",
                }]
            }
        },
        "OverworldSegwaySpot": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                    }
                }, {
                    "type": "Random",
                    "title": "OverworldSegwaySpotContent"
                }]
            }
        },
        "OverworldSegwaySpotContent": {
            "width": 8,
            "height": 24,
            "contents": {
                "mode": "Random",
                "direction": "top",
                "spacing": 24,
                "children": [{
                    "percent": 90,
                    "type": "Random",
                    "title": "OverworldSegwaySpotScenery"
                }, {
                    "percent": 10,
                    "type": "Random",
                    "title": "KoopaJumping"
                }]
            }
        },
        "OverworldSegwayEnemySpots": {
            "width": 112,
            "height": 24,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "spacing": [{
                    "percent": 60,
                    "value": 0
                }, {
                    "percent": 25,
                    "value": 8
                }, {
                    "percent": 15,
                    "value": 16
                }],
                "children": [{
                    "type": "Random",
                    "title": "OverworldSegwayEnemySpot"
                }]
            }
        },
        "OverworldSegwayEnemySpot": {
            "width": 32,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 32
                    }
                }, {
                    "type": "Random",
                    "title": "OverworldSegwayEnemySpotContent"
                }]
            }
        },
        "OverworldSegwayEnemySpotContent": {
            "width": 32,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 45,
                    "type": "Random",
                    "title": "EnemyEasy"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "percent": 40,
                    "type": "Random",
                    "title": "LandObstacleGroupVertical"
                }]
            }
        },
        "OverworldSegwayRamps": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "RampUpSmallFloor"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 48
                    }
                }, {
                    "type": "Random",
                    "title": "RampDownSmallFloor"
                }]
            }
        },
        "OverworldSegwayFloating": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "percent": 50,
                    "type": "Random",
                    "title": "OverworldSegwayFloat"
                }]
            }
        },
        "OverworldSegwayFloat": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "Stone"
                }]
            }
        },
        "OverworldSegwayWatery": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "RampUpSmallFloor"
                }, {
                    "type": "Random",
                    "title": "OverworldSegwayWateryBridge", 
                }, {
                    "type": "Random",
                    "title": "RampDownSmallFloor"
                }]
            }
        },
        "OverworldSegwayWateryBridge": {
            "width": 48,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "Water",
                    "sizing": {
                        "height": 8
                    }
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 24
                    },
                }, {
                    "type": "Random",
                    "title": "Bridge"
                }, {
                    "type": "Random",
                    "title": "OverworldSegwayWateryBridgeTop"
                }]
            }
        },
        "OverworldSegwayWateryBridgeTop": {
            "width": 48,
            "height": 40,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "OverworldSegwayWateryBridgeTopEnemies"
                }, {
                    "type": "Random",
                    "title": "OverworldSegwayWateryBridgeTopSolid"
                }]
            }
        },
        "OverworldSegwayWateryBridgeTopEnemies": {
            "width": 48,
            "height": 16,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "spacing": {
                    "min": 4,
                    "max": 20,
                    "units": 4
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": 16
                }, {
                    "type": "Random",
                    "title": "EnemyEasy"
                }, {
                    "type": "Random",
                    "title": "EnemyEasy"
                }, {
                    "type": "Random",
                    "title": "EnemyEasy"
                }]
            }
        },
        "OverworldSegwayWateryBridgeTopSolid": {
            "width": 48,
            "height": 24,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "spacing": {
                    "min": 0,
                    "max": 24,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "BlockReward"
                }]
            }
        },
        "OverworldSegwaySpring": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "OverworldSegwaySpringLand"
                }, {
                    "type": "Random",
                    "title": "OverworldSegwaySpringGap"
                }]
            }
        },
        "OverworldSegwaySpringLand": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor"
                    }
                }, {
                    "type": "Known",
                    "title": "Springboard"
                }]
            }
        },
        "OverworldSegwaySpringGap": {
            "width": 104,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "spacing": {
                    "min": 48,
                    "max": 80,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "OverworldSegwaySpringReward"
                }]
            }
        },
        "OverworldSegwaySpringReward": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 16,
                    "max": 40,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "Brick"
                }, {
                    "type": "Random",
                    "title": "BlockTreasureFloating"
                }]
            }
        },
        "OverworldSegwayPipeTransit": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 112
                    }
                }, {
                    "type": "Random",
                    "title": "OverworldSegwayPipeTransitLand"
                }]
            }
        },
        "OverworldSegwayPipeTransitLand": {
            "width": 104,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "spacing": {
                    "min": 32,
                    "max": 80,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "PipeRandomTransit"
                }]
            }
        },
        
        
        /* General obstacles
        */
        
        "LandObstacleGroup": {
            "width": 160,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "spacing": {
                    "min": 0,
                    "max": 8,
                    "units": 16
                },
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "LandObstacleGroupDoubleStory"
                }, {
                    "percent": 30,
                    "type": "Random",
                    "title": "LandObstacleGroupSingleStory"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "LandObstacleGroupVertical"
                }, {
                    "percent": 3,
                    "type": "Random",
                    "title": "LandObstacleGroupPitSmall"
                }, {
                    "percent": 3,
                    "type": "Random",
                    "title": "LandObstacleGroupPitLarge"
                }]
            }
        },
        "LandObstacleGroupEnemies": {
            "width": 64,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "spacing": 4,
                "children": [{
                    "percent": 65,
                    "type": "Random",
                    "title": "EnemyEasyScattered"
                }, {
                    "percent": 2,
                    "type": "Random",
                    "title": "EnemyHard"
                }, {
                    "percent": 13,
                    "type": "Random",
                    "title": "LandObstacleGroupVertical"
                }]
            }
        },
        "LandObstacleGroupSingleStory": {
            "width": 64,
            "height": 80,
            "contents": {
                "mode": "Multiple",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "LandObstacleGroupSolidsSpotty"
                }, {
                    "type": "Random",
                    "title": "EnemyEasy"
                }]
            }
        },
        "LandObstacleGroupSingleStorySolids": {
            "width": 64,
            "height": 40,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 32
                    }
                }, {
                    "type": "Random",
                    "title": "LandObstacleGroupSolidsSpotty"
                }]
            }
        },
        "LandObstacleGroupDoubleStory": {
            "width": 64,
            "height": 80,
            "contents": {
                "mode": "Multiple",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "LandObstacleGroupDoubleStorySolids"
                }, {
                    "type": "Random",
                    "title": "LandObstacleGroupEnemies"
                }]
            }
        },
        "LandObstacleGroupDoubleStorySolids": {
            "width": 64,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "LandObstacleGroupSolidsPopulated"
                }, {
                    "type": "Random",
                    "title": "LandObstacleGroupSolidsSpotty"
                }]
            }
        },
        "LandObstacleGroupSolidsPopulated": {
            "width": 64,
            "height": 32,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 24
                    }
                }, {
                    "type": "Random",
                    "title": "LandObstacleGroupSolid"
                }, {
                    "type": "Random",
                    "title": "EnemyEasyElevated"
                }]
            }
        },
        "LandObstacleGroupSolids": {
            "width": 64,
            "height": 32,
            "contents": {
                "mode": "Random",
                "snap": "bottom",
                "direction": "right",
                "children": [{
                    "percent": 75,
                    "type": "Random",
                    "title": "Brick"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "Block"
                }]
            }
        },
        "LandObstacleGroupSolidsSpotty": {
            "width": 64,
            "height": 32,
            "contents": {
                "mode": "Random",
                "snap": "bottom",
                "direction": "right",
                "children": [{
                    "percent": 30,
                    "type": "Random",
                    "title": "Brick"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "Block"
                }, {
                    "percent": 50,
                    "type": "Random",
                    "title": "Nothing"
                }]
            }
        },
        "LandObstacleGroupVertical": {
            "width": 32,
            "height": 80,
            "contents": {
                "mode": "Random",
                "snap": "bottom",
                "direction": "right",
                "spacing": {
                    "min": 0,
                    "max": 16,
                    "units": 8
                },
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "PipeRandom"
                }, {
                    "percent": 35,
                    "type": "Random",
                    "title": "StoneTower"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "CannonTower"
                }]
            }
        },
        "LandObstacleGroupPitSmall": {
            "width": 40,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "StoneTower"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "PitTreasure"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "StoneTower"
                }]
            }
        },
        "LandObstacleGroupPitLarge": {
            "width": 56,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "StoneTower"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 16
                    }
                }, {
                    "type": "Random",
                    "title": "PitTreasure"
                }, {
                    "type": "Random",
                    "title": "EnemyEasy"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "StoneTower"
                }]
            }
        },
        "PitTreasure": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 0,
                    "max": 40,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 32
                    }
                }, {
                    "type": "Random",
                    "title": "BlockTreasure",
                }]
            }
        },
        
        
        /* Underworld
        */
        
        "Underworld": {
            "width": 1520,
            "height": 88,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "left",
                "children": [{
                    "type": "Random",
                    "title": "UnderworldStart"
                }, {
                    "type": "Random",
                    "title": "UnderworldRandomization"
                }, {
                    "type": "Random",
                    "title": "UnderworldPreEnd"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "UnderworldEnd"
                }]
            }
        },
        "UnderworldStart": {
            "width": 128,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": [{
                        "percent": 25,
                        "values": {
                            "macro": "Floor", 
                            "width": 80
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "macro": "Floor",
                            "width": 96
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "macro": "Floor",
                            "width": 104
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "macro": "Floor",
                            "width": 128
                        }
                    }]
                }, {
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "macro": "Fill",
                        "ynum": 11
                    }
                }]
            }
        },
        "UnderworldRandomization": {
            "width": 1512,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "UnderworldLandArea"
                }, {
                    "percent": 40,
                    "type": "Random",
                    "title": "UnderworldSegway"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "Nothing"
                }]
            }
        },
        "UnderworldLandArea": {
            "width": 160,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 160
                    }
                }, {
                    "type": "Random",
                    "title": "UnderworldObstacleGroup"
                }, {
                    "type": "Random",
                    "title": "Brick", 
                    "sizing": {
                        "width": 160
                    }
                }]
            }
        },
        "UnderworldObstacleGroup": {
            "width": 160,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "spacing": [{
                    "percent": 50,
                    "value": 0
                }, {
                    "percent": 30,
                    "value": 8
                }, {
                    "percent": 20,
                    "value": 16
                }],
                "children": [{
                    "percent": 30,
                    "type": "Random",
                    "title": "EnemyEasyScattered"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "UnderworldBricksOverhangs"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "LandObstacleGroupSingleStory"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "LandObstacleGroupVertical"
                }]
            }
        },
        "UnderworldBricksOverhangs": {
            "width": 160,
            "height": 64,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "snap": "bottom",
                "spacing": {
                    "min": 0,
                    "max": 24,
                    "units": 8
                },
                "children": [{
                    "percent": 100,
                    "type": "Random",
                    "title": "UnderworldBricksOverhang"
                }]
            }
        },
        "UnderworldBricksOverhang": {
            "width": 32,
            "height": 64,
            "contents": {
                "mode": "Random",
                "direction": "top",
                "snap": "left",
                "spacing": [{
                    "percent": 40,
                    "value": 0
                }, {
                    "percent": 40,
                    "value": 16
                }, {
                    "percent": 20,
                    "value": 8
                }],
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "UnderworldBrickCluster"
                }, {
                    "percent": 30,
                    "type": "Known",
                    "title": "Coin",
                    "arguments": {
                        "macro": "Fill",
                        "xnum": 4,
                        "xwidth": 8
                    },
                    "sizing": {
                        "width": 32,
                        "height": 16
                    }
                }, {
                    "percent": 30,
                    "type": "Random",
                    "title": "EnemyEasyScattered",
                }]
            }
        },
        "UnderworldBrickCluster": {
            "width": 32,
            "height": 16,
            "contents": {
                "mode": "Repeat",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "UnderworldBrickRow"
                }]
            }
        },
        "UnderworldBrickRow": {
            "width": 32,
            "height": 8,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 97,
                    "type": "Known",
                    "title": "Brick"
                }, {
                    "percent": 3,
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "contents": "Coin"
                    }
                }]
            }
        },
        "UnderworldSegway": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 30,
                    "type": "Random",
                    "title": "UnderworldSegwaySpotty"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "OverworldSegwayWatery"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "UnderworldSegwayPlatforms"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "OverworldSegwayRamps"
                }]
            }
        },
        "UnderworldSegwaySpotty": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Multiple",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "UnderworldSegwaySpots"
                }, {
                    "type": "Random",
                    "title": "UnderworldBrickCeiling",
                    "sizing": {
                        "width": 112
                    }
                }]
            }
        },
        "UnderworldSegwaySpots": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "UnderworldSegwaySpot",
                }, {
                    "percent": 50,
                    "type": "Random",
                    "title": "Nothing",
                }]
            }
        },
        "UnderworldSegwaySpot": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": [{
                        "percent": 40,
                        "values": {
                            "macro": "Floor"
                        }
                    }, {
                        "percent": 30,
                        "values": {
                            "macro": "Floor",
                            "y": 8
                        }
                    }, {
                        "percent": 30,
                        "values": {
                            "macro": "Floor",
                            "y": 16
                        }
                    }]
                }]
            }
        },
        "UnderworldSegwayPlatforms": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "spacing": {
                    "min": 0,
                    "max": 8,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 16
                    }
                }, {
                    "type": "Random",
                    "title": "PlatformGenerator"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "PlatformGenerator"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }]
            }
        },
        "UnderworldBrickCeiling": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 88
                    }
                }, {
                    "type": "Random",
                    "title": "Brick"
                }]
            }
        },
        "UnderworldPreEnd": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "left",
                "spacing": 32,
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "OverworldSegwaySpring"
                }, {
                    "percent": 50,
                    "type": "Random",
                    "title": "PlatformGenerator"
                }]
            }
        },
        
        // OverworldSegwaySpring is 112
        // platgen is 24
        "UnderworldEnd": {
            "width": 480,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Random",
                    "title": "UnderworldEndFloor"
                }, {
                    "type": "Random",
                    "title": "UnderworldEndLand"
                }]
            }
        },
        "UnderworldEndFloor": {
            "width": 480,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Random",
                    "title": "Floor"
                }]
            }
        },
        "UnderworldEndLand": {
            "width": 488,
            "height": 72,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "LakituStop",
                    "sizing": {
                        "width": 0
                    }
                }, {
                    "type": "Random",
                    "title": "UnderworldEndPipeArea"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 64
                    }
                }, {
                    "type": "Random",
                    "title": "RampUpLarge"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 64
                    }
                }, {
                    "type": "Random",
                    "title": "UnderworldEndOutsideCastle"
                }, {
                    "type": "Known",
                    "title": "ScrollBlocker",
                    "sizing": {
                        "width": 0,
                        "height": 0
                    }
                }]
            }
        },
        "UnderworldEndPipeArea": {
            "width": 144,
            "height": 88,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "UnderworldEndPipeFront"
                }, {
                    "type": "Random",
                    "title": "UnderworldEndPipeTransport"
                }, {
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "macro": "Fill",
                        "xnum": 7,
                        "ynum": 11,
                        "yheight": -8
                    }
                }]
            }
        },
        "UnderworldEndPipeFront": {
            "width": 80,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "macro": "Fill",
                        "xnum": 10,
                        "ynum": 3
                    }
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 40
                    }
                }, {
                    "type": "Known",
                    "title": "Block",
                    "arguments": {
                        "hidden": true
                    }
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 24
                    }
                }, {
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "macro": "Fill",
                        "xnum": 10,
                        "ynum": 1
                    }
                }]
            }
        },
        "UnderworldEndPipeTransport": {
            "width": 32,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "right",
                "children": [{
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "macro": "Fill",
                        "xnum": 4,
                        "ynum": 3,
                        "yheight": -8
                    },
                    "sizing": {
                        "height": 24
                    }
                }, {
                    "type": "Known",
                    "title": "PipeCorner",
                    "arguments": {
                        "macro": "PipeCorner",
                        "height": 64,
                        "transport": "Overworld",
                        "scrollEnabler": true,
                        "scrollBlocker": true
                    }
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 40
                    }
                }, {
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "macro": "Fill",
                        "xnum": 2
                    }
                }]
            }
        },
        
        
        /* Sky
        */
        
        "Sky": {
            "width": 1400, // ???
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "left",
                "children": [{
                    "type": "Random",
                    "title": "SkyStart"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "SkyBeforeMain"
                }, {
                    "type": "Random",
                    "title": "SkyMain"
                }, {
                    "type": "Random",
                    "title": "SkyEnd"
                }]
            }
        },
        "SkyStart": {
            "width": 32,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "width": 32
                    },
                    "sizing": {
                        "width": 32
                    }
                }]
            }
        },
        "SkyBeforeMain": {
            "width": 80,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "width": 80
                    },
                    "sizing": {
                        "width": 80
                    }
                }]
            }
        },
        "SkyMain": {
            "width": 560,
            "height": 80,
            "contents": {
                "mode": "Multiple",
                "children": [{
                    "type": "Random",
                    "title": "SkyMainLand"
                }, {
                    "type": "Random",
                    "title": "SkyMainTransport"
                }, {
                    "type": "Random",
                    "title": "SkyMainAir"
                }]
            }
        },
        "SkyMainLand": {
            "width": 560,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "width": 560
                    }
                }]
            }
        },
        "SkyMainTransport": {
            "width": 140,
            "height": 40,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 32 
                    }
                }, {
                    "type": "Known",
                    "title": "Platform",
                    "arguments": {
                        "width": 24,
                        "transport": "true"
                    }
                }]
            }
        },
        "SkyMainAir": {
            "width": 560,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "spacing": 8,
                "children": [{
                    "percent": 20,
                    "type": "Random",
                    "title": "SkyCoinsShort"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "SkyCoinsMedium"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "SkyCoinsLong"
                }, {
                    "percent": 40,
                    "type": "Random",
                    "title": "SkyCoinsStone"
                }]
            }
        },
        "SkyCoinsShort": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "spacing": {
                    "min": 0,
                    "max": 16,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 56
                    }
                }, {
                    "type": "Random",
                    "title": "SkyCoinsRow",
                    "stretch": {
                        "width": true
                    }
                }]
            }
        },
        "SkyCoinsMedium": {
            "width": 56,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "spacing": {
                    "min": 0,
                    "max": 16,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 56
                    }
                }, {
                    "type": "Random",
                    "title": "SkyCoinsRow",
                    "stretch": {
                        "width": true
                    }
                }]
            }
        },
        "SkyCoinsLong": {
            "width": 128,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "spacing": {
                    "min": 0,
                    "max": 16,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 56
                    }
                }, {
                    "type": "Random",
                    "title": "SkyCoinsRow",
                    "stretch": {
                        "width": true
                    }
                }]
            }
        },
        "SkyCoinsRow": {
            "width": 5,
            "height": 7,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "snap": "top",
                "spacing": 3,
                "children": [{
                    "type": "Random",
                    "title": "Coin"
                }]
            }
        },
        "SkyCoinsStone": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                }, {
                    "type": "Random",
                    "title": "SkyCoinsStoneVertical",
                }]
            }
        },
        "SkyCoinsStoneVertical": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 0,
                    "max": 8,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 64
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "arguments": [{
                        "percent": 33,
                        "values": {}
                    }, {
                        "percent": 34,
                        "values": {
                            "width": 16
                        }
                    }, {
                        "percent": 33,
                        "values": {
                            "height": 16
                        }
                    }]
                }]
            }
        },
        "SkyEnd": {
            "width": 320,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "right",
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "SkyEndCoins"
                }]
            }
        },
        "SkyEndCoins": {
            "width": 24,
            "height": 7,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "spacing": 3,
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 64
                    }
                }, {
                    "type": "Known",
                    "title": "Coin"
                }, {
                    "type": "Known",
                    "title": "Coin"
                }, {
                    "type": "Known",
                    "title": "Coin"
                }]
            }
        },
        
        
        /* Castle
        */
        
        "Castle": {
            "height": 80,
            "width": 2000,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "CastleStart"
                }, {
                    "type": "Random",
                    "title": "CastleBody"
                }, {
                    "type": "Random",
                    "title": "CastleEnd"
                }]
            }
        },
        "CastleStart": {
            "width": 112,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "StartInsideCastle"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 80
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "height": 24,
                        "width": 112
                    }
                }]
            }
        },
        "CastleBody": {
            "width": 1632,
            "height": 80,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "CastleSegway"
                }, {
                    "type": "Random",
                    "title": "CastleLandArea"
                }, {
                    "type": "Random",
                    "title": "CastleSegway"
                }, {
                    "type": "Random",
                    "title": "CastleLandAreaLarge"
                }]
            }
        },
        "CastleSegway": {
            "width": 168,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "CastleSegwayFloatingGap"
                }, {
                    "percent": 50,
                    "type": "Random",
                    "title": "CastleSegwayPlatformGap"
                }]
            }
        },
        "CastleSegwayFloatingGap": {
            "width": 168,
            "height": 80,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "CastleSegwayGapSpace"
                }, {
                    "type": "Random",
                    "title": "CastleSegwayGapChunk"
                }]
            }
        },
        "CastleSegwayGapSpace": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Multiple",
                "children": [{
                    "type": "Random",
                    "title": "CastleSegwayGapSpaceWater"
                }, {
                    "type": "Random",
                    "title": "CastleSegwayGapSpaceEnemyArea"
                }]
            }
        },
        "CastleSegwayGapSpaceWater": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Water",
                    "sizing": {
                        "width": 24
                    }
                }]
            }
        },
        "CastleSegwayGapSpaceEnemyArea": {
            "width": 24,
            "height": 40,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "snap": "bottom",
                "spacing": [{
                    "percent": 60,
                    "value": 24
                }, {
                    "percent": 15,
                    "value": 0
                }, {
                    "percent": 15,
                    "value": 8
                }, {
                    "percent": 15,
                    "value": 16
                }],
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 0
                    }
                }, {
                    "type": "Random",
                    "title": "Podoboo"
                }]
            }
        },
        "CastleSegwayGapChunk": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 16,
                    "max": 40,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Water",
                    "sizing": {
                        "width": 24
                    }
                }, {
                    "type": "Random",
                    "title": "CastleSegwayGapChunkSolids"
                }, {
                    "type": "Random",
                    "title": "CastleSegwayGapChunkReward"
                }]
            }
        },
        "CastleSegwayGapChunkSolids": {
            "width": 24,
            "height": 8,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "children": [{
                    "percent": 80,
                    "type": "Random",
                    "title": "Stone"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "CastleBlockActive"
                }]
            }
        },
        "CastleSegwayGapChunkReward": {
            "width": 16,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "CastleSegwayGapChunkBlock"
                }]
            }
        },
        "CastleSegwayGapChunkBlock": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "percent": 50,
                    "type": "Known",
                    "title": "Block",
                    "arguments": {
                        "contents": "Mushroom"
                    }
                }]
            }
        },
        "CastleSegwayPlatformGap": {
            "width": 168,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "CastleSegwayPlatformGapBorder"
                }, {
                    "type": "Random",
                    "title": "CastleSegwayPlatformGapPlatforms"
                }, {
                    "type": "Random",
                    "title": "CastleSegwayPlatformGapBorder"
                }]
            }
        },
        "CastleSegwayPlatformGapBorder": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 0,
                    "max": 24,
                    "units": 8
                },
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor"
                    },
                    "sizing": {
                        "height": 32
                    },
                    "stretch": {
                        "width": true
                    }
                }, {
                    "type": "Random",
                    "title": "CastleSegwayPlatformGapBorderCastleBlock"
                }]
            }
        },
        "CastleSegwayPlatformGapBorderCastleBlock": {
            "width": 24,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "spacing": {
                    "min": 0,
                    "max": 16,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 0
                    }
                }, {
                    "type": "Random",
                    "title": "CastleBlockActive"
                }]
            }
        },
        "CastleSegwayPlatformGapPlatforms": {
            "width": 120,
            "height": 80,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "spacing": {
                    "min": 0,
                    "max": 16,
                    "units": 16
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "PlatformGenerator"
                }]
            }
        },
        "CastleLandArea": {
            "width": 160,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 100,
                    "type": "Random",
                    "title": "CastleLandTunnel"
                }]
            }
        },
        "CastleLandTunnel": {
            "width": 160,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 160,
                    },
                    "sizing": {
                        "height": 32
                    }
                }, {
                    "type": "Random",
                    "title": "CastleLandTunnelEnemies"
                }, {
                    "type": "Random",
                    "title": "CastleLandTunnelTop"
                }]
            }
        },
        "CastleLandTunnelEnemies": {
            "width": 160,
            "height": 16,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "spacing": [{
                    "percent": 10,
                    "value": 4
                }, {
                    "percent": 15,
                    "value": 8
                }, {
                    "percent": 85,
                    "value": {
                        "min": 32,
                        "max": 64,
                        "units": 8
                    }
                }],
                "children": [{
                    "percent": 70,
                    "type": "Random",
                    "title": "Goomba"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "Beetle"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "Koopa"
                }]
            }
        },
        "CastleLandTunnelTop": {
            "width": 160,
            "height": 32,
            "contents": {
                "mode": "Certain",
                "direction": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "stretch": {
                        "width": true
                    },
                    "arguments": [{
                        "percent": 33,
                        "values": {
                            "height": 24
                        }
                    }, {
                        "percent": 34,
                        "values": {
                            "height": 32
                        }
                    }, {
                        "percent": 33,
                        "values": {
                            "height": 40
                        }
                    }, ]
                }]
            }
        },
        "CastleLandAreaLarge": {
            "width": 320,
            "height": 80,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "CastleLandAreaChunk"
                }, {
                    "type": "Random",
                    "title": "CastleLandAreaBetween"
                }]
            }
        },
        "CastleLandAreaChunk": {
            "width": 152,
            "height": 80,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "children": [{
                    "percent": 100,
                    "type": "Random",
                    "title": "CastleLandAreaCavern"
                }]
            }
        },
        "CastleLandAreaCavern": {
            "width": 152,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 152,
                    }
                }, {
                    "type": "Random",
                    "title": "CastleLandAreaCavernInside"
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "width": 152
                    }
                }]
            }
        },
        "CastleLandAreaCavernInside": {
            "width": 152,
            "height": 80,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "spacing": {
                    "min": 8,
                    "max": 40,
                    "units": 8
                },
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "CastleLandAreaCavernInsideTites"
                }, {
                    "percent": 35,
                    "type": "Random",
                    "title": "CastleLandAreaCavernInsideBonus"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 24
                    }
                }]
            }
        },
        "CastleLandAreaCavernInsideTites": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "width": 24
                    }
                }, {
                    "type": "Random",
                    "title": "CastleLandAreaCavernInsideTitesCastleBlock"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 40
                    }
                }, {
                    "type": "Random",
                    "title": "CastleLandAreaCavernInsideTitesCastleBlock"
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "width": 24,
                        "height": 16
                    },
                    "arguments": {
                        "width": 24,
                        "height": 16
                    }
                }]
            }
        },
        "CastleLandAreaCavernInsideTitesCastleBlock": {
            "width": 24,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "CastleBlockActive"
                }]
            }
        },
        "CastleLandAreaCavernInsideBonus": {
            "width": 24,
            "height": 64,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 8,
                    "max": 24,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "CastleLandAreaCavernInsideBonusBlocks"
                }, {
                    "type": "Random",
                    "title": "CastleLandAreaCavernInsideBonusBlocks"
                }]
            }
        },
        "CastleLandAreaCavernInsideBonusBlocks": {
            "width": 24,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Known",
                    "title": "Block",
                    "arguments": [{
                        "percent": 45,
                        "values": {
                            "hidden": true
                        }
                    }, {
                        "percent": 35,
                        "values": {}
                    }, {
                        "percent": 15,
                        "values": {
                            "contents": "Mushroom",
                            "hidden": true
                        }
                    }, {
                        "percent": 5,
                        "values": {
                            "contents": "Mushroom",
                        }
                    }]
                }]
            }
        },
        "CastleLandAreaBetween": {
            "width": 16,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Water",
                    "arguments": {
                        "macro": "Water",
                        "width": 16
                    }
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 83
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "width": 16
                    }
                }]
            }
        },
        "CastleEnd": {
            "width": 256,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Random",
                    "title": "CastlePreEnd"
                }, {
                    "type": "Random",
                    "title": "EndInsideCastle"
                }]
            }
        },
        "CastlePreEnd": {
            "width": 80,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor", 
                    "arguments": {
                        "macro": "Floor",
                        "width": 80
                    }
                }, {
                    "type": "Random",
                    "title": "CastlePreEndBlocks"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 56
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "arguments": [{
                        "percent": 50,
                        "values": {
                            "width": 80,
                            "height": 24
                        }
                    }, {
                        "percent": 50,
                        "values": {
                            "width": 80,
                            "height": 32
                        }
                    }]
                }]
            }
        },
        "CastlePreEndBlocks": {
            "width": 80,
            "height": 24,
            "contents": {
                "mode": "Repeat",
                "direction": "right",
                "snap": "top",
                "spacing": 16,
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "width": 16,
                        "height": 24
                    },
                    "arguments": {
                        "width": 16,
                        "height": 24
                    }
                }]
            }
        },
        
        
        /* Enemy groups
        */
        
        "EnemyEasy": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "spacing": [{
                    "percent": 75,
                    "value": 4
                }, {
                    "percent": 25,
                    "value": 8
                }],
                "children": [{
                    "percent": 45,
                    "type": "Random",
                    "title": "Goomba"
                }, {
                    "percent": 35,
                    "type": "Random",
                    "title": "Koopa"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "Beetle"
                }]
            }
        },
        "EnemyEasyScattered": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "spacing": [{
                    "percent": 45,
                    "value": 8
                }, {
                    "percent": 25,
                    "value": 4
                }, {
                    "percent": 15,
                    "value": 12
                }, {
                    "percent": 15,
                    "value": 16
                }],
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "Goomba"
                }, {
                    "percent": 30,
                    "type": "Random",
                    "title": "Koopa"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "Beetle"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "Nothing"
                }]
            }
        },
        "EnemyEasyElevated": {
            "width": 64,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "spacing": 4,
                "children": [{
                    "percent": 25,
                    "type": "Random",
                    "title": "Goomba"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "Koopa"
                }, {
                    "percent": 10,
                    "type": "Random",
                    "title": "Beetle"
                }, {
                    "percent": 50,
                    "type": "Random",
                    "title": "Nothing"
                }]
            }
        },
        "EnemyHard": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "HammerBro"
                }, {
                    "percent": 40,
                    "type": "Random",
                    "title": "Blooper"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "Lakitu"
                }]
            }
        },
        
        
        /* Solid groups
        */
        
        "SolidSmall": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 80,
                    "type": "Random",
                    "title": "Brick"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "Block"
                }]
            }
        },
        "SolidSmallSpotty": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "Brick"
                }, {
                    "percent": 30,
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "percent": 20,
                    "type": "Random",
                    "title": "Block"
                }]
            }
        },
        "LandObstacleGroupSolid": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "children": [{
                    "percent": 70,
                    "type": "Random",
                    "title": "Brick"
                }, {
                    "percent": 30,
                    "type": "Random",
                    "title": "Block"
                }]
            }
        },
        "Cannon": {
            "width": 8,
            "height": 32,
            "contents": {
                "mode": "Random",
                "direction": "top",
                "snap": "bottom",
                "spacing": [{
                    "percent": 50,
                    "value": 0
                }, {
                    "percent": 50,
                    "value": 24
                }],
                "children": [{
                    "percent": 50,
                    "type": "Random",
                    "title": "CannonMedium"
                }, {
                    "percent": 10,
                    "type": "Random",
                    "title": "CannonSmall"
                }, {
                    "percent": 40,
                    "type": "Random",
                    "title": "CannonLarge"
                }]
            }
        },
        "CannonStack": {
            "width": 8,
            "height": 32,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Cannon"
                }, {
                    "type": "Random",
                    "title": "Cannon"
                }]
            }
        },
        "RampUpSmall": {
            "width": 32,
            "height": 32,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Stone"
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 16
                    },
                    "arguments": {
                        "height": 16
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 24
                    },
                    "arguments": {
                        "height": 24
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 32
                    },
                    "arguments": {
                        "height": 32
                    }
                }]
            }
        },
        "RampUpSmallFloor": {
            "width": 32,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 32
                    }
                }, {
                    "type": "Random",
                    "title": "RampUpSmall"
                }]
            }
        },
        "RampUpLarge": {
            "width": 64,
            "height": 64,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Stone"
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 16
                    },
                    "arguments": {
                        "height": 16
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 24
                    },
                    "arguments": {
                        "height": 24
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 32
                    },
                    "arguments": {
                        "height": 32
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 40
                    },
                    "arguments": {
                        "height": 40
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 48
                    },
                    "arguments": {
                        "height": 48
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 56
                    },
                    "arguments": {
                        "height": 56
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 64
                    },
                    "arguments": {
                        "height": 64
                    }
                }]
            }
        },
        "RampUpLargeFloor": {
            "width": 64,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 64
                    }
                }, {
                    "type": "Random",
                    "title": "RampUpLarge"
                }]
            }
        },
        "RampDownSmall": {
            "width": 32,
            "height": 32,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 32
                    },
                    "arguments": {
                        "height": 32
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 24
                    },
                    "arguments": {
                        "height": 24
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 16
                    },
                    "arguments": {
                        "height": 16
                    }
                }, {
                    "type": "Known",
                    "title": "Stone"
                }]
            }
        },
        "RampDownSmallFloor": {
            "width": 32,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 32
                    }
                }, {
                    "type": "Random",
                    "title": "RampDownSmall"
                }]
            }
        },
        "RampDownLarge": {
            "width": 64,
            "height": 64,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 64
                    },
                    "arguments": {
                        "height": 64
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 56
                    },
                    "arguments": {
                        "height": 56
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 48
                    },
                    "arguments": {
                        "height": 48
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 40
                    },
                    "arguments": {
                        "height": 40
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 32
                    },
                    "arguments": {
                        "height": 32
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 24
                    },
                    "arguments": {
                        "height": 24
                    }
                }, {
                    "type": "Known",
                    "title": "Stone",
                    "sizing": {
                        "height": 16
                    },
                    "arguments": {
                        "height": 16
                    }
                }, {
                    "type": "Known",
                    "title": "Stone"
                }]
            }
        },
        "RampDownLargeFloor": {
            "width": 64,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "arguments": {
                        "macro": "Floor",
                        "width": 64
                    }
                }, {
                    "type": "Random",
                    "title": "RampDownLarge"
                }]
            }
        },
        "StoneTower": {
            "width": 8,
            "height": 32,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "percent": 50,
                    "type": "Known",
                    "title": "Stone",
                    "snap": "bottom",
                    "sizing": {
                        "height": 24
                    },
                    "arguments": {
                        "height": 24
                    }
                }, {
                    "percent": 50,
                    "type": "Known",
                    "title": "Stone",
                    "stretch": {
                        "height": true
                    },
                }]
            }
        },
        "StoneTowerLarge": {
            "width": 8,
            "height": 64,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "top",
                "children": [{
                    "type": "Known",
                    "title": "Stone",
                    "arguments": {
                        "height": 64
                    },
                    "sizing": {
                        "height": 64
                    }
                }]
            }
        },
        "CannonTower": {
            "width": 24,
            "height": 32,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Random",
                    "title": "Cannon"
                }, {
                    "type": "Random",
                    "title": "Nothing"
                }]
            }
        },
        
        /* Scenery groups
        */
        
        "OverworldScenery": {
            "height": 80,
            "width": 160,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 8
                    }
                }, {
                    "type": "Random",
                    "title": "OverworldLandScenery"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 32
                    }
                }]
            }
        },
        "OverworldLandScenery": {
            "height": 40,
            "width": 160,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "spacing": {
                    "min": -4,
                    "max": 40,
                    "units": 4
                },
                "children": [{
                    "percent": 25,
                    "type": "Random",
                    "title": "HillSmall"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "HillLarge"
                }, {
                    "percent": 12,
                    "type": "Random",
                    "title": "Bush1"
                }, {
                    "percent": 11,
                    "type": "Random",
                    "title": "Bush2"
                }, {
                    "percent": 12,
                    "type": "Random",
                    "title": "Bush3"
                }, {
                    "percent": 10,
                    "type": "Random",
                    "title": "Fence"
                }, {
                    "percent": 5,
                    "type": "Random",
                    "title": "PlantSmall"
                }, {
                    "percent": 5,
                    "type": "Random",
                    "title": "PlantLarge"
                }]
            }
        },
        "OverworldClouds": {
            "height": 56,
            "width": 2528,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "top",
                "spacing": {
                    "min": 16,
                    "max": 80,
                    "units": 8
                },
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "CloudClump1"
                }, {
                    "percent": 35,
                    "type": "Random",
                    "title": "CloudClump2"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "CloudClump3"
                }]
            }
        },
        "CloudClump1": {
            "height": 56,
            "width": 16,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 16,
                    "max": 40,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                }, {
                    "type": "Random",
                    "title": "Cloud1"
                }]
            }
        },
        "CloudClump2": {
            "height": 56,
            "width": 24,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 16,
                    "max": 40,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                }, {
                    "type": "Random",
                    "title": "Cloud2"
                }]
            }
        },
        "CloudClump3": {
            "height": 56,
            "width": 32,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": {
                    "min": 16,
                    "max": 40,
                    "units": 8
                },
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                }, {
                    "type": "Random",
                    "title": "Cloud3"
                }]
            }
        },
        "Cloud": {
            "width": 32,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "limit": 1,
                "children": [{
                    "percent": 40,
                    "type": "Random",
                    "title": "Cloud1"
                }, {
                    "percent": 35,
                    "type": "Random",
                    "title": "Cloud2"
                }, {
                    "percent": 25,
                    "type": "Random",
                    "title": "Cloud3"
                }]
            }
        },
        "OverworldSegwaySpotScenery": {
            "width": 8,
            "height": 23,
            "contents": {
                "mode": "Random",
                "direction": "top",
                "snap": "bottom",
                "children": [{
                    "percent": 70,
                    "type": "Random",
                    "title": "Nothing",
                    "stretch": {
                        "height": true
                    }
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "PlantSmall"
                }, {
                    "percent": 15,
                    "type": "Random",
                    "title": "PlantLarge"
                }]
            }
        },
        
        
        /* Characters
        */
        
        "Goomba": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Goomba"
                }]
            }
        },
        "Koopa": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "percent": 20,
                    "type": "Known",
                    "title": "Koopa",
                }, {
                    "percent": 40,
                    "type": "Known",
                    "title": "Koopa",
                    "arguments": {
                        "smart": true
                    }
                }, {
                    "percent": 15,
                    "type": "Known",
                    "title": "Koopa",
                    "arguments": {
                        "jumping": true
                    }
                }, {
                    "percent": 25,
                    "type": "Known",
                    "title": "Koopa",
                    "arguments": {
                        "smart": true,
                        "jumping": true
                    }
                }]
            }
        },
        "KoopaJumping": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Random",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "percent": 35,
                    "type": "Known",
                    "title": "Koopa",
                    "arguments": {
                        "jumping": true
                    }
                }, {
                    "percent": 65,
                    "type": "Known",
                    "title": "Koopa",
                    "arguments": {
                        "smart": true,
                        "jumping": true
                    }
                }]
            }
        },
        "Beetle": {
            "width": 8,
            "height": 8.5,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Beetle"
                }]
            }
        },
        "HammerBro": {
            "width": 8,
            "height": 12,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "HammerBro"
                }]
            }
        },
        "Blooper": {
            "width": 8,
            "height": 40,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "top",
                "children": [{
                    "type": "Known",
                    "title": "Blooper"
                }]
            }
        },
        "Lakitu": {
            "width": 8,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "right",
                "spacing": 4,
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 0
                    }
                }, {
                    "type": "Known",
                    "title": "Lakitu"
                }]
            }
        },
        "Podoboo": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "spacing": -40,
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Nothing"
                }, {
                    "type": "Known",
                    "title": "Podoboo"
                }]
            }
        },
        
        
        /* Solids
        */
        
        "Brick": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Random",
                "direction": "right",
                "snap": "top",
                "children": [{
                    "percent": 85,
                    "type": "Known",
                    "title": "Brick"
                }, {
                    "percent": 10,
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "contents": "Coin"
                    }
                }, {
                    "percent": 5,
                    "type": "Known",
                    "title": "Brick",
                    "arguments": {
                        "contents": "Star"
                    }
                }]
            }
        },
        "Block": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "top",
                "children": [{
                    "type": "Known",
                    "title": "Block",
                    "arguments": [{
                        "percent": 90,
                        "values": {}
                    }, {
                        "percent": 9,
                        "values": {
                            "contents": "Mushroom"
                        }
                    }, {
                        "percent": 1,
                        "values": {
                            "contents": "Mushroom1Up",
                            "hidden": true
                        }
                    }]
                }]
            }
        },
        "BlockTreasure": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "top",
                "children": [{
                    "type": "Known",
                    "title": "Block",
                    "arguments": [{
                        "percent": 35,
                        "values": {
                            "contents": "Mushroom"
                        }
                    }, {
                        "percent": 35,
                        "values": {
                            "contents": "Star"
                        }
                    }, {
                        "percent": 30,
                        "values": {
                            "contents": "Mushroom1Up"
                        }
                    }]
                }]
            }
        },
        "BlockTreasureFloating": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "top",
                "children": [{
                    "type": "Known",
                    "title": "Block",
                    "arguments": [{
                        "percent": 20,
                        "values": {
                            "contents": "Mushroom"
                        }
                    }, {
                        "percent": 20,
                        "values": {
                            "hidden": true,
                            "contents": "Mushroom"
                        }
                    }, {
                        "percent": 15,
                        "values": {
                            "contents": "Star"
                        }
                    }, {
                        "percent": 15,
                        "values": {
                            "hidden": true,
                            "contents": "Star"
                        }
                    }, {
                        "percent": 20,
                        "values": {
                            "contents": "Mushroom1Up"
                        }
                    }, {
                        "percent": 20,
                        "values": {
                            "hidden": true,
                            "contents": "Mushroom1Up"
                        }
                    }]
                }]
            }
        },
        "BlockReward": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right", 
                "snap": "top",
                "children": [{
                    "type": "Known",
                    "title": "Block",
                    "arguments": [{
                        "percent": 30,
                        "values": {
                            "hidden": true
                        }
                    }, {
                        "percent": 30,
                        "values": {
                            "hidden": true,
                            "contents": "Mushroom"
                        }
                    }, {
                        "percent": 30,
                        "values": {
                            "hidden": true,
                            "contents": "Star"
                        }
                    }, {
                        "percent": 30,
                        "values": {
                            "hidden": true,
                            "contents": "Mushroom1Up"
                        }
                    }]
                }]
            }
        },
        "Bridge": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "direction": "right",
                "children": [{
                    "type": "Known",
                    "title": "Bridge",
                    "stretch": {
                        "width": true
                    },
                    "arguments": {
                        "macro": "Bridge",
                    }
                }]
            }
        },
        "Coin": {
            "width": 5,
            "height": 7,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Known",
                    "title": "Coin"
                }]
            }
        },
        "PipeRandom": {
            "width": 16,
            "height": 40,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "height": 0
                    }
                }, {
                    "type": "Known",
                    "title": "Pipe",
                    "sizing": {
                        "height": 0
                    },
                    "arguments": [{
                        "percent": 25,
                        "values": {
                            "macro": "Pipe",
                            "piranha": true,
                            "height": 16
                        }
                    }, {
                        "percent": 5,
                        "values": {
                            "macro": "Pipe",
                            "height": 16
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "macro": "Pipe",
                            "piranha": true,
                            "height": 24
                        }
                    }, {
                        "percent": 5,
                        "values": {
                            "macro": "Pipe",
                            "height": 24
                        }
                    }, {
                        "percent": 20,
                        "values": {
                            "macro": "Pipe",
                            "piranha": true,
                            "height": 32
                        }
                    }, {
                        "percent": 5,
                        "values": {
                            "macro": "Pipe",
                            "height": 32
                        }
                    }, {
                        "percent": 5,
                        "values": {
                            "macro": "Pipe",
                            "piranha": true,
                            "transport": "Underworld",
                            "height": 32
                        }
                    }, {
                        "percent": 5,
                        "values": {
                            "macro": "Pipe",
                            "transport": "Underworld",
                            "height": 32
                        }
                    }, {
                        "percent": 3,
                        "values": {
                            "macro": "Pipe",
                            "piranha": true,
                            "transport": "Underwater",
                            "height": 32
                        }
                    }, {
                        "percent": 2,
                        "values": {
                            "macro": "Pipe",
                            "transport": "Underwater",
                            "height": 32
                        }
                    }]
                }]
            }
        },
        "PipeRandomTransit": {
            "width": 16,
            "height": 40,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Pipe",
                    "sizing": {
                        "height": 0
                    },
                    "arguments": [{
                        "percent": 50,
                        "values": {
                            "macro": "Pipe",
                            "piranha": true,
                            "height": 24,
                            "transport": "Underworld"
                        }
                    }, {
                        "percent": 50,
                        "values": {
                            "macro": "Pipe",
                            "piranha": true,
                            "height": 32,
                            "transport": "Underworld"
                        }
                    }]
                }]
            }
        },
        "Pipe": {
            "width": 16,
            "height": 32,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Pipe"
                }]
            }
        },
        "PipeHorizontal": {
            "width": 16,
            "height": 16,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "PipeHorizontal"
                }]
            }
        },
        "PipeVertical": {
            "width": 16,
            "height": 16,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "PipeVertical"
                }]
            }
        },
        "PipeCorner": {
            "width": 32,
            "height": 16,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "PipeCorner",
                    "arguments": {
                        "macro": "PipeCorner"
                    }
                }]
            }
        },
        "CannonSmall": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Final",
                    "source": "CannonSmall",
                    "title": "Cannon",
                }]
            }
        },
        "CannonMedium": {
            "width": 8,
            "height": 16,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Final",
                    "source": "CannonMedium",
                    "title": "Cannon",
                    "arguments": {
                        "height": 16
                    }
                }]
            }
        },
        "CannonLarge": {
            "width": 8,
            "height": 24,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Final",
                    "source": "CannonLarge",
                    "title": "Cannon",
                    "arguments": {
                        "height": 24 
                    }
                }]
            }
        },
        "Floor": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "top",
                "children": [{
                    "type": "Known",
                    "title": "Floor",
                    "stretch": {
                        "width": true,
                    },
                    "arguments": {
                        "height": "Infinity"
                    }
                }]
            }
        },
        "Springboard": {
            "width": 8,
            "height": 14.5,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Springboard"
                }]
            }
        },
        "Stone": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Stone"
                }]
            }
        },
        "CastleBlock": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Known",
                    "title": "CastleBlock"
                }]
            }
        },
        "CastleBlockActive": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Known",
                    "title": "CastleBlock",
                    "arguments": [{
                        "percent": 20,
                        "values": {}
                    }, {
                        "percent": 25,
                        "values": {
                            "fireballs": 6
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "fireballs": 6,
                            "direction": 1
                        }
                    }, {
                        "percent": 15,
                        "values": {
                            "fireballs": 12
                        }
                    }, {
                        "percent": 15,
                        "values": {
                            "fireballs": 12,
                            "direction": 1
                        }
                    }]
                }]
            }
        },
        
        
        /* Scenery
        */
        
        "Bush1": {
            "width": 16,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Bush1"
                }]
            }
        },
        "Bush2": {
            "width": 24,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Bush2"
                }]
            }
        },
        "Bush3": {
            "width": 32,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Bush3"
                }]
            }
        },
        "Cloud1": {
            "width": 16,
            "height": 12,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Known",
                    "title": "Cloud1"
                }]
            }
        },
        "Cloud2": {
            "width": 24,
            "height": 12,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Known",
                    "title": "Cloud2"
                }]
            }
        },
        "Cloud3": {
            "width": 32,
            "height": 12,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Known",
                    "title": "Cloud3"
                }]
            }
        },
        "Fence": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "Fence"
                }]
            }
        },
        "HillSmall": {
            "width": 24,
            "height": 9.5,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "HillSmall"
                }]
            }
        },
        "HillLarge": {
            "width": 40,
            "height": 17.5,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "HillLarge"
                }]
            }
        },
        "PlantSmall": {
            "width": 7,
            "height": 15,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "PlantSmall"
                }]
            }
        },
        "PlantLarge": {
            "width": 8,
            "height": 23,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "PlantLarge"
                }]
            }
        },
        "Water": {
            "width": 4,
            "height": 5,
            "contents": {
                "mode": "Certain",
                "snap": "bottom",
                "direction": "right",
                "children": [{
                    "type": "Known",
                    "title": "Water",
                    "stretch": {
                        "width": true
                    },
                    "arguments": {
                        "macro": "Water",
                    }
                }]
            }
        },
        
        
        /* General macros & helpers
        */
        
        "LakituStop": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Known",
                    "title": "LakituStop",
                    "arguments": {
                        "macro": "LakituStop"
                    }
                }]
            }
        },
        "Platform": {
            "width": 16,
            "height": 4,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Known",
                    "title": "Platform",
                    "stretch": {
                        "width": true
                    }
                }]
            }
        },
        "PlatformGenerator": {
            "width": 24,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Known",
                    "title": "PlatformGenerator",
                    "arguments": [{
                        "percent": 25,
                        "values": {
                            "macro": "PlatformGenerator"
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "macro": "PlatformGenerator",
                            "width": 24
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "macro": "PlatformGenerator",
                            "direction": -1,
                            "width": 24
                        }
                    }, {
                        "percent": 25,
                        "values": {
                            "macro": "PlatformGenerator",
                            "direction": -1,
                        }
                    }]
                }]
            }
        },
        "OverworldEnd": {
            "width": 288,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "left",
                "children": [{
                    "type": "Random",
                    "title": "OverworldEndFloor"
                }, {
                    "type": "Random",
                    "title": "OverworldEndLand"
                }]
            }
        },
        "OverworldEndFloor": {
            "width": 288,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "children": [{
                    "type": "Random", 
                    "title": "Floor"
                }]
            }
        },
        "OverworldEndLand": {
            "width": 288,
            "height": 64,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "snap": "bottom",
                "children": [{
                    "type": "Random",
                    "title": "LakituStop"
                }, {
                    "type": "Random", 
                    "title": "RampUpLarge"
                }, {
                    "type": "Random",
                    "title": "StoneTowerLarge"
                }, {
                    "type": "Random",
                    "title": "Nothing",
                    "sizing": {
                        "width": 64
                    }
                }, {
                    "type": "Random",
                    "title": "EndOutsideCastle"
                }, {
                    "type": "Random",
                    "title": "ScrollBlocker"
                }]
            }
        },
        "EndOutsideCastle": {
            "width": 144,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "EndOutsideCastle",
                    "arguments": {
                        "macro": "EndOutsideCastle",
                        "transport": "Castle",
                        "large": true
                    },
                    "sizing": {
                        "height": 0
                    }
                }]
            }
        },
        "UnderworldEndOutsideCastle": {
            "width": 144,
            "Height": 88,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Random",
                    "title": "EndOutsideCastle"
                }]
            }
        },
        "StartInsideCastle": {
            "width": 112,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "snap": "bottom",
                "children": [{
                    "type": "Known",
                    "title": "StartInsideCastle",
                    "arguments": {
                        "macro": "StartInsideCastle",
                        "width": 112
                    }
                }]
            }
        },
        "EndInsideCastle": {
            "width": 256,
            "height": 80,
            "contents": {
                "mode": "Certain",
                "direction": "top",
                "children": [{
                    "type": "Known",
                    "title": "EndInsideCastle",
                    "arguments": {
                        "macro": "EndInsideCastle"
                    },
                    "sizing": {
                        "height": 8
                    }
                }]
            }
        },
        "ScrollBlocker": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "direction": "right",
                "children": [{
                    "type": "Known",
                    "title": "ScrollBlocker"
                }]
            }
        },
        
        
        /* Misc.
        */
        
        "Nothing": {
            "width": 8,
            "height": 8,
            "contents": {
                "mode": "Certain",
                "children": []
            }
        }
    }
};
FullScreenMario.prototype.settings.input = {
    "InputWritrArgs": {
        "aliases": {
            // Keyboard aliases
            "left":   [65, 37],     // a,     left
            "right":  [68, 39],     // d,     right
            "up":     [87, 38, 32], // w,     up,    space
            "down":   [83, 40],     // s,     down
            "sprint": [16, 17],     // shift, ctrl
            "pause":  [80],         // p (pause)
            // Mute and Luigi disabled because there's a GUI for them now
            // "mute":   [77],         // m (mute)
            // "l":      [76],         // l (luigi)
            // Mouse aliases
            "rightclick": [3],
        },
        "triggers": {
            "onkeydown": {
                "left": FullScreenMario.prototype.keyDownLeft,
                "right": FullScreenMario.prototype.keyDownRight,
                "up": FullScreenMario.prototype.keyDownUp,
                "down": FullScreenMario.prototype.keyDownDown,
                "sprint": FullScreenMario.prototype.keyDownSprint,
                "pause": FullScreenMario.prototype.keyDownPause,
                "mute": FullScreenMario.prototype.keyDownMute,
            },
            "onkeyup": {
                "left": FullScreenMario.prototype.keyUpLeft,
                "right": FullScreenMario.prototype.keyUpRight,
                "up": FullScreenMario.prototype.keyUpUp,
                "down": FullScreenMario.prototype.keyUpDown,
                "sprint": FullScreenMario.prototype.keyUpSprint,
                "pause": FullScreenMario.prototype.keyUpPause
            },
            "onmousedown": {
                "rightclick": FullScreenMario.prototype.mouseDownRight
            },
            "oncontextmenu": {},
            "ondevicemotion": {
                "devicemotion": FullScreenMario.prototype.deviceMotion
            }
        }
    }
};
FullScreenMario.prototype.settings.maps = {
    "mapDefault": "1-1",
    "screenAttributes": [
        "gravity",
        "setting",
        "time",
        "underwater",
        "floor",
        "jumpmod",
        "maxyvel",
        "maxyvelinv",
        "notime",
        "nokeys",
        "canscroll"
    ],
    "screenVariables": {
        "bottomDeathDifference": function (EightBitter) {
            return EightBitter.unitsize * 12;
        },
        "bottomPlatformMax": function (EightBitter) {
            var area = EightBitter.MapsHandler.getArea(),
                diff = EightBitter.MapScreener.bottomDeathDifference;
                
            if (!area) {
                return -1;
            }
                
            return (area.floor + diff) * EightBitter.unitsize;
        },
        "gravity": function (EightBitter) {
            var area = EightBitter.MapsHandler.getArea();
            
            if (area && area.underwater) {
                return EightBitter.gravity / 2.8;
            }
            
            return EightBitter.gravity;
        }
    },
    "onSpawn": FullScreenMario.prototype.addPreThing,
    "macros": {
        "Example": FullScreenMario.prototype.macroExample,
        "Fill": FullScreenMario.prototype.macroFillPreThings,
        "Pattern": FullScreenMario.prototype.macroFillPrePattern,
        "Floor": FullScreenMario.prototype.macroFloor,
        "Pipe": FullScreenMario.prototype.macroPipe,
        "PipeCorner": FullScreenMario.prototype.macroPipeCorner,
        "Tree": FullScreenMario.prototype.macroTree,
        "Shroom": FullScreenMario.prototype.macroShroom,
        "Water": FullScreenMario.prototype.macroWater,
        "CastleSmall": FullScreenMario.prototype.macroCastleSmall,
        "CastleLarge": FullScreenMario.prototype.macroCastleLarge,
        "Ceiling": FullScreenMario.prototype.macroCeiling,
        "Bridge": FullScreenMario.prototype.macroBridge,
        "Scale": FullScreenMario.prototype.macroScale,
        "PlatformGenerator": FullScreenMario.prototype.macroPlatformGenerator,
        "WarpWorld": FullScreenMario.prototype.macroWarpWorld,
        "CheepsStart": FullScreenMario.prototype.macroCheepsStart,
        "CheepsStop": FullScreenMario.prototype.macroCheepsStop,
        "BulletBillsStart": FullScreenMario.prototype.macroBulletBillsStart,
        "BulletBillsStop": FullScreenMario.prototype.macroBulletBillsStop,
        "LakituStop": FullScreenMario.prototype.macroLakituStop,
        "StartInsideCastle": FullScreenMario.prototype.macroStartInsideCastle,
        "EndOutsideCastle": FullScreenMario.prototype.macroEndOutsideCastle,
        "EndInsideCastle": FullScreenMario.prototype.macroEndInsideCastle,
        "Section": FullScreenMario.prototype.macroSection,
        "SectionPass": FullScreenMario.prototype.macroSectionPass,
        "SectionFail": FullScreenMario.prototype.macroSectionFail,
        "SectionDecider": FullScreenMario.prototype.macroSectionDecider
    },
    "entrances": {
        "Normal": FullScreenMario.prototype.mapEntranceNormal,
        "Plain": FullScreenMario.prototype.mapEntrancePlain,
        "Castle": FullScreenMario.prototype.mapEntranceCastle,
        "Walking": FullScreenMario.prototype.mapEntranceWalking,
        "Vine": FullScreenMario.prototype.mapEntranceVine,
        "PipeVertical": FullScreenMario.prototype.mapEntrancePipeVertical,
        "PipeHorizontal": FullScreenMario.prototype.mapEntrancePipeHorizontal,
    },
    "patterns": (function (patterns) {
        var pattern,
            i;
        for (i in patterns) {
            if (patterns.hasOwnProperty(i)) {
                pattern = patterns[i];
                if (!pattern.length) {
                    continue;
                }
                
                // Pattern's last array should previously be ["blank", width]
                pattern.width = pattern[pattern.length - 1][1];
                pattern.pop();
            }
        }
        return patterns;
    })({
        "BackRegular": [
            ["HillLarge", 0, 0],
            ["Cloud1", 68, 68],
            ["Bush3", 92, 0],
            ["HillSmall", 128, 0],
            ["Cloud1", 156, 76],
            ["Bush1", 188, 0],
            ["Cloud3", 220, 68],
            ["Cloud2", 292, 76],
            ["Bush2", 332, 0],
            ["Blank", 384]
        ],
        "BackCloud": [
            ["Cloud2", 28, 64],
            ["Cloud1", 76, 32],
            ["Cloud2", 148, 72],
            ["Cloud1", 228, 0],
            ["Cloud1", 284, 32],
            ["Cloud1", 308, 40],
            ["Cloud1", 372, 0],
            ["Blank", 384]
        ],
        "BackFence": [
            ["PlantSmall", 88, 0],
            ["PlantLarge", 104, 0],
            ["Fence", 112, 0, 4],
            ["Cloud1", 148, 68],
            ["PlantLarge", 168, 0],
            ["PlantSmall", 184, 0],
            ["PlantSmall", 192, 0],
            ["Cloud1", 220, 76],
            ["Cloud2", 244, 68],
            ["Fence", 304, 0, 2],
            ["PlantSmall", 320, 0],
            ["Fence", 328, 0],
            ["PlantLarge", 344, 0],
            ["Cloud1", 364, 76],
            ["Cloud2", 388, 68],
            ["Blank", 384]
        ],
        "BackFenceMin": [
            ["PlantLarge", 104, 0],
            ["Fence", 112, 0, 4],
            ["Cloud1", 148, 68],
            ["PlantLarge", 168, 0],
            ["PlantSmall", 184, 0],
            ["PlantSmall", 192, 0],
            ["Cloud1", 220, 76],
            ["Cloud2", 244, 68],
            ["Fence", 304, 0, 2],
            ["PlantSmall", 320, 0],
            ["Fence", 328, 0],
            ["Cloud1", 364, 76],
            ["Cloud2", 388, 68],
            ["Blank", 384]
        ],
        "BackFenceMin2": [
            ["Cloud2", 4, 68],
            ["PlantSmall", 88, 0],
            ["PlantLarge", 104, 0],
            ["Fence", 112, 0, 1],
            ["Fence", 128, 0, 2],
            ["Cloud1", 148, 68],
            // ["PlantLarge", 168, 0],
            ["PlantSmall", 184, 0],
            ["PlantSmall", 192, 0],
            ["Cloud1", 220, 76],
            ["Cloud2", 244, 68],
            ["Fence", 304, 0, 2],
            ["PlantSmall", 320, 0],
            ["Fence", 328, 0],
            ["PlantLarge", 344, 0],
            ["Cloud1", 364, 76],
            ["Cloud2", 388, 68],
            ["Blank", 384]
        ],
        "BackFenceMin3": [
            ["Cloud2", 4, 68],
            ["PlantSmall", 88, 0],
            ["PlantLarge", 104, 0],
            ["Fence", 112, 0, 4],
            ["Cloud1", 148, 68],
            ["PlantSmall", 184, 0],
            ["PlantSmall", 192, 0],
            ["Cloud1", 220, 76],
            ["Cloud2", 244, 68],
            ["Cloud1", 364, 76],
            ["Cloud2", 388, 68],
            ["Blank", 384]
        ]
    }),
    "library": (function (maps) {
        var library = {},
            i;
        
        for (i = 0; i < maps.length; i += 1) {
            library[maps[i].name] = maps[i];
        }
        
        return library;
    })([
        {
            "name": "1-1",
            "locations": [
                  { "entry": "Plain" },
                  { "entry": "PipeVertical" },
                  { "area": 1 },
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackRegular", "repeat": 5 },
                        { "macro": "Floor", "width": 552 },
                        { "thing": "DecorativeBack", "x": 20, "y": 88 },
                        { "thing": "DecorativeDot", "x": 21.5, "y": 46.5 },
                        { "thing": "DecorativeDot", "x": 21.5, "y": 86.5 },
                        { "thing": "CustomText", "x": 20, "y": 36, "texts": [
                            { "text": "MOVE: ARROWS/WASD", "offset": 12 },
                            { "text": "FIRE/SPRINT: SHIFT/CTRL" },
                            { "text": "PAUSE: P/RIGHTCLICK", "offset": 8 } 
                        ]},
                        { "thing": "CustomText", "x": 24.5, "y": 84, "size": "Large", "texts": [
                            { "text": "SUPER" }
                        ]},
                        { "thing": "CustomText", "x": 24.5, "y": 68, "size": "Huge", "texts": [
                            { "text": "MARIO BROS." }
                        ]},
                        { "thing": "DecorativeDot", "x": 105.5, "y": 46.5 },
                        { "thing": "DecorativeDot", "x": 105.5, "y": 86.5 },
                        { "thing": "CustomText", "x": 52, "y": 44, "size": "Colored", "texts": [
                            { "text": "©1985 NINTENDO" }
                        ]},
                        { "thing": "Block", "x": 128, "y": 32 },
                        { "thing": "Brick", "x": 160, "y": 32 },
                        { "thing": "Block", "x": 168, "y": 32, "contents": "Mushroom" },
                        { "thing": "Goomba", "x": 176, "y": 8 },
                        { "thing": "Brick", "x": 176, "y": 32 },
                        { "thing": "Block", "x": 176, "y": 64 },
                        { "thing": "Block", "x": 184, "y": 32 },
                        { "thing": "Brick", "x": 192, "y": 32 },
                        { "macro": "Pipe", "x": 224, "height": 16 },
                        { "macro": "Pipe", "x": 304, "height": 24 },
                        { "thing": "Goomba", "x": 340, "y": 8 },
                        { "macro": "Pipe", "x": 368, "height": 32 },
                        { "thing": "Goomba", "x": 412, "y": 8 },
                        { "thing": "Goomba", "x": 422, "y": 8 },
                        { "macro": "Pipe", "x": 456, "height": 32, "transport": 2 },
                        { "thing": "Block", "x": 512, "y": 40, "contents": "Mushroom1Up", "hidden": true },
                        { "macro": "Floor", "x": 568, "width": 120 },
                        { "thing": "Brick", "x": 616, "y": 32 },
                        { "thing": "Block", "x": 624, "y": 32, "contents": "Mushroom" },
                        { "thing": "Brick", "x": 632, "y": 32 },
                        { "thing": "Brick", "x": 640, "y": 32 },
                        { "thing": "Goomba", "x": 640, "y": 72 },
                        { "thing": "Brick", "x": 648, "y": 64 },
                        { "thing": "Brick", "x": 656, "y": 64 },
                        { "thing": "Goomba", "x": 656, "y": 72 },
                        { "macro": "Fill", "thing": "Brick", "x": 664, "y": 64, "xnum": 5, "xwidth": 8 },
                        { "macro": "Floor", "x": 712, "width": 512 }, 
                        { "macro": "Fill", "thing": "Brick", "x": 728, "y": 64, "xnum": 3, "xwidth": 8 },
                        { "thing": "Brick", "x": 752, "y": 32, "contents": "Coin" },
                        { "thing": "Block", "x": 752, "y": 64 },
                        { "thing": "Goomba", "x": 776, "y": 8 },
                        { "thing": "Goomba", "x": 788, "y": 8 },
                        { "thing": "Brick", "x": 800, "y": 32 },
                        { "thing": "Brick", "x": 808, "y": 32, "contents": "Star" },
                        { "thing": "Block", "x": 848, "y": 32 },
                        { "thing": "Koopa", "x": 856, "y": 12 },
                        { "thing": "Block", "x": 872, "y": 32 },
                        { "thing": "Block", "x": 872, "y": 64, "contents": "Mushroom" },
                        { "thing": "Block", "x": 896, "y": 32 },
                        { "thing": "Goomba", "x": 912, "y": 8 },
                        { "thing": "Goomba", "x": 924, "y": 8 },
                        { "thing": "Brick", "x": 944, "y": 32 },
                        { "macro": "Fill", "thing": "Brick", "x": 968, "y": 64, "xnum": 3, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Goomba", "x": 992, "y": 8, "xnum": 4, "xwidth": 16 },
                        { "thing": "Brick", "x": 1024, "y": 64 },
                        { "thing": "Brick", "x": 1032, "y": 32 },
                        { "thing": "Block", "x": 1032, "y": 64 },
                        { "thing": "Brick", "x": 1040, "y": 32 },
                        { "thing": "Block", "x": 1040, "y": 64 },
                        { "thing": "Brick", "x": 1048, "y": 64 },
                        { "thing": "Stone", "x": 1072, "y": 8 },
                        { "thing": "Stone", "x": 1080, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1088, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1096, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1120, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1128, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1136, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1144, "y": 8 },
                        { "thing": "Stone", "x": 1184, "y": 8 },
                        { "thing": "Stone", "x": 1192, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1200, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1208, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1216, "y": 32, "height": 32 },
                        { "macro": "Floor", "x": 1240, "width": 656 },
                        { "thing": "Stone", "x": 1240, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1248, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1256, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1264, "y": 8 },
                        { "macro": "Pipe", "x": 1304, "height": 16, "entrance": 1 },
                        { "thing": "Brick", "x": 1344, "y": 32 },
                        { "thing": "Brick", "x": 1352, "y": 32 },
                        { "thing": "Block", "x": 1360, "y": 32 },
                        { "thing": "Brick", "x": 1368, "y": 32 },
                        { "thing": "Goomba", "x": 1392, "y": 8 },
                        { "thing": "Goomba", "x": 1404, "y": 8 },
                        { "macro": "Pipe", "x": 1432, "height": 16 },
                        { "thing": "Stone", "x": 1448, "y": 8 },
                        { "thing": "Stone", "x": 1456, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1464, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1472, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1480, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1488, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1496, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1504, "y": 64, "height": 64, "width": 16 },
                        { "macro": "EndOutsideCastle", "x": 1584, "y": 0, "transport": { "map": "1-2" } }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Ceiling", "x": 32, "width": 56 },
                        { "macro": "Floor", "x": 0, "y": 0, "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "x": 0, "y": 8, "ynum": 11, "yheight": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 8, "xnum": 7, "ynum": 3, "xwidth": 8, "yheight": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 33, "y": 31, "xnum": 7, "ynum": 2, "xwidth": 8, "yheight": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 41, "y": 63, "xnum": 5, "ynum": 1, "xwidth": 8 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "transport": 1, "width": 16 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }
            ]
        }, {
            "name": "1-2",
            "locations": [
                { "entry": "Walking" }, 
                { "area": 1 },
                { "area": 2 },
                { "area": 1, "entry": "PipeVertical" },
                { "area": 3, "entry": "PipeVertical" }, 
                { "area": 1 }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 1 },
                        { "macro": "Floor", "width": 192 },
                        { "macro": "CastleSmall" },
                        { "thing": "PipeHorizontal", "x": 80, "y": 16, "transport": 1 },
                        { "macro": "Pipe", "x": 96, "height": 32 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 1 },
                        { "macro": "Floor", "width": 640 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Ceiling", "x": 48, "width": 664 },
                        { "thing": "Block", "x": 80, "y": 32, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Block", "x": 88, "y": 32, "xnum": 4 },
                        { "thing": "Goomba", "x": 128, "y": 8 },
                        { "thing": "Stone", "x": 136, "y": 8 },
                        { "thing": "Goomba", "x": 136, "y": 16 },
                        { "thing": "Stone", "x": 152, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 168, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 184, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 200, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 216, "y": 24, "height": 24 },
                        { "thing": "Goomba", "x": 232, "y": 8 },
                        { "thing": "Brick", "x": 232, "y": 40, "contents": "Coin" },
                        { "thing": "Stone", "x": 248, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 264, "y": 16, "height": 16 },
                        { "macro": "Fill", "thing": "Brick", "x": 312, "y": 32, "ynum": 3 },
                        { "thing": "Brick", "x": 320, "y": 32 },
                        { "thing": "Coin", "x": 321, "y": 39 },
                        { "macro": "Fill", "thing": "Brick", "x": 328, "y": 32, "ynum": 3 },
                        { "macro": "Fill", "thing": "Coin", "x": 330, "y": 60, "xnum": 4, "xwidth": 8 },
                        { "thing": "Brick", "x": 336, "y": 48 },
                        { "thing": "Brick", "x": 344, "y": 48 },
                        { "macro": "Fill", "thing": "Koopa", "x": 352, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 352, "y": 32, "ynum": 3 },
                        { "thing": "Brick", "x": 360, "y": 32 },
                        { "thing": "Coin", "x": 361, "y": 39 },
                        { "macro": "Fill", "thing": "Brick", "x": 368, "y": 32, "ynum": 2 },
                        { "thing": "Brick", "x": 368, "y": 48, "contents": "Star" },
                        { "macro": "Fill", "thing": "Brick", "x": 416, "y": 32, "xnum": 2, "ynum": 5 },
                        { "macro": "Fill", "thing": "Brick", "x": 432, "y": 16, "xnum": 2, "ynum": 3 },
                        { "macro": "Fill", "thing": "Brick", "x": 432, "y": 72, "xnum": 2, "ynum": 2 },
                        { "macro": "Fill", "thing": "Brick", "x": 464, "y": 32, "xnum": 4, "ynum": 1 },
                        { "macro": "Fill", "thing": "Brick", "x": 464, "y": 72, "xnum": 5, "ynum": 2 },
                        { "macro": "Fill", "thing": "Coin", "x": 465, "y": 39, "xnum": 4, "xwidth": 8 },
                        { "thing": "Koopa", "x": 472, "y": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 496, "y": 32, "xnum": 2, "ynum": 7 },
                        { "thing": "Goomba", "x": 494, "y": 8 },
                        { "thing": "Goomba", "x": 510, "y": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 528, "y": 72, "xnum": 4, "ynum": 2 },
                        { "macro": "Fill", "thing": "Brick", "x": 536, "y": 32, "ynum": 5 },
                        { "macro": "Fill", "thing": "Brick", "x": 544, "y": 32, "xnum": 2 },
                        { "thing": "Coin", "x": 545, "y": 39 },
                        { "thing": "Brick", "x": 552, "y": 40, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Brick", "x": 576, "y": 32, "xnum": 2 },
                        { "thing": "Brick", "x": 576, "y": 40 },
                        { "macro": "Fill", "thing": "Brick", "x": 576, "y": 48, "xnum": 2, "ynum": 3 },
                        { "thing": "Brick", "x": 584, "y": 40, "contents": "Coin" },
                        { "thing": "Goomba", "x": 584, "y": 72 },
                        { "macro": "Fill", "thing": "Brick", "x": 608, "y": 32, "xnum": 4 },
                        { "macro": "Fill", "thing": "Goomba", "x": 608, "y": 40, "xnum": 2, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 608, "y": 72, "xnum": 4, "ynum": 2 },
                        { "macro": "Floor", "x": 664, "width": 272 },
                        { "macro": "Fill", "thing": "Brick", "x": 672, "y": 40, "xnum": 6, "ynum": 2 },
                        { "macro": "Fill", "thing": "Coin", "x": 674, "y": 64, "xnum": 6, "xwidth": 8 },
                        { "thing": "Brick", "x": 712, "y": 88, "contents": "Mushroom1Up" },
                        { "macro": "Ceiling", "x": 720, "width": 360 },
                        { "macro": "Fill", "thing": "Goomba", "x": 768, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Pipe", "x": 800, "height": 24, "piranha": true, "transport": 2 },
                        { "macro": "Pipe", "x": 848, "height": 32, "piranha": true },
                        { "thing": "Goomba", "x": 872, "y": 8 },
                        { "macro": "Pipe", "x": 896, "height": 16, "piranha": true, "entrance": 3 },
                        { "macro": "Floor", "x": 952, "width": 16 },
                        { "macro": "Fill", "thing": "Brick", "x": 952, "y": 8, "xnum": 2, "ynum": 3 },
                        { "macro": "Floor", "x": 984, "width": 96 },
                        { "thing": "Stone", "x": 1040, "y": 8 },
                        { "thing": "Stone", "x": 1048, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1056, "y": 24, "height": 24 },
                        { "thing": "Goomba", "x": 1056, "y": 32 },
                        { "thing": "Stone", "x": 1064, "y": 32, "height": 32 },
                        { "thing": "Goomba", "x": 1064, "y": 48 },
                        { "thing": "Stone", "x": 1072, "y": 32, "height": 32 },
                        { "macro": "PlatformGenerator", "x": 1096, "width": 24 },
                        { "macro": "Floor", "x": 1144, "width": 64 },
                        { "macro": "Fill", "thing": "Brick", "x": 1144, "y": 40, "xnum": 5, "ynum": 1 },
                        { "thing": "Koopa", "x": 1152, "y": 12, "smart": true },
                        { "thing": "Brick", "x": 1184, "y": 40, "contents": "Mushroom" },
                        { "macro": "PlatformGenerator", "x": 1224, "width": 24, "direction": 1 },
                        { "macro": "Floor", "x": 1264,  "width": 256 },
                        { "macro": "Fill", "thing": "Brick", "x": 1264, "y": 8, "xnum": 17, "ynum": 3 },
                        { "thing": "PipeHorizontal", "x": 1312, "y": 40, "transport": 4 },
                        { "thing": "PipeVertical", "x": 1328, "y": 88, "height": 64 },
                        { "thing": "ScrollEnabler", "x": 1328, "y": 120, "height": 48 },
                        { "macro": "Ceiling", "x": 1272, "width": 56 },
                        { "macro": "Fill", "thing": "Brick", "x": 1344, "y": 32, "xnum": 7, "ynum": 7 },
                        { "macro": "Ceiling", "x": 1344, "width": 136 },
                        { "thing": "ScrollBlocker", "x": 1344 },
                        { "macro": "WarpWorld", "x": 1400, "warps": [4, 3, 2] },
                        { "macro": "Fill", "thing": "Brick", "x": 1504, "y": 8, "xnum": 2, "ynum": 11 },
                        { "thing": "ScrollBlocker", "x": 1518, "y": 8 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 24, "y": 32, "xnum": 9 },
                        { "macro": "Fill", "thing": "Brick", "x": 24, "y": 64, "xnum": 10, "ynum": 4 },
                        { "macro": "Fill", "thing": "Coin", "x": 25, "y": 7, "xnum": 9, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 33, "y": 39, "xnum": 8, "xwidth": 8 },
                        { "thing": "Brick", "x": 96, "y": 32, "contents": "Coin" },
                        { "macro": "Fill", "thing": "Brick", "x": 104, "y": 24, "xnum": 2, "ynum": 9 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "transport": 3 },
                        { "thing": "PipeVertical", "x": 120, "y": 100, "height": 100 }
                    ]
                }, {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 4 },
                        { "macro": "Floor", "width": 464 },
                        { "macro": "Pipe", "height": 16, "piranha": true, "entrance": 4 },
                        { "macro": "Pattern", "pattern": "BackRegular", "x": 104, },
                        { "thing": "Stone", "x": 16, "y": 8 },
                        { "thing": "Stone", "x": 24, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 32, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 40, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 48, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 56, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 64, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 72, "y": 64, "height": 64, "width": 16 },
                        { "macro": "EndOutsideCastle", "x": 148, "transport": { "map": "1-3" } }
                    ]
                }
            ]
        }, {
            "name": "1-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackCloud", "x": 0, "y": 4, "repeat": 5 },
                        { "macro": "Floor", "x": 0, "y": 0, "width": 128 },
                        { "macro": "CastleSmall" },
                        { "macro": "Tree", "x": 144, "y": 8, "width": 32 },
                        { "macro": "Tree", "x": 192, "y": 32, "width": 64, "solidTrunk": true },
                        { "macro": "Tree", "x": 208, "y": 64, "width": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 217, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "thing": "Koopa", "x": 240, "y": 76, "smart": true },
                        { "macro": "Tree", "x": 256, "y": 8, "width": 24 },
                        { "thing": "Coin", "x": 266, "y": 15 },
                        { "macro": "Tree", "x": 280, "y": 40, "width": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 297, "y": 87, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 320, "y": 72, "width": 56 },
                        { "macro": "Fill", "thing": "Goomba", "x": 352, "y": 80, "xnum": 2, "xwidth": 16 },
                        { "macro": "Tree", "x": 400, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 402, "y": 55, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 440, "y": 56, "width": 24, "floating": true, "begin": -4, "end": 56 },
                        { "macro": "Tree", "x": 472, "width": 40 },
                        { "thing": "Block", "x": 472, "y": 24, "contents": "Mushroom" },
                        { "macro": "Tree", "x": 480, "y": 64, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 482, "y": 71, "xnum": 4, "xwidth": 8 },
                        { "macro": "Tree", "x": 520, "width": 40 },
                        { "macro": "Tree", "x": 560, "y": 32, "width": 24 },
                        { "thing": "Koopa", "x": 592, "y": 76, "smart": true, "jumping": true, "floating": true, "begin": 16, "end": 88 },
                        { "macro": "Tree", "x": 608, "y": 56, "width": 48 },
                        { "thing": "Goomba", "x": 640, "y": 64 },
                        { "macro": "Fill", "thing": "Coin", "x": 681, "y": 63, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 688, "y": 40, "width": 24, "sliding": true, "begin": 660, "end": 720 },
                        { "macro": "Fill", "thing": "Coin", "x": 745, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 752, "y": 32, "width": 24, "sliding": true, "begin": 708, "end": 776 },
                        { "macro": "Fill", "thing": "Coin", "x": 777, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 784, "y": 16, "width": 32 },
                        { "macro": "Tree", "x": 832, "y": 48, "width": 64, "solidTrunk": true },
                        { "thing": "Koopa", "x": 880, "y": 60, "smart": true },
                        { "macro": "Tree", "x": 904, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 906, "y": 7, "xnum": 3, "xwidth": 8 },
                        { "thing": "Koopa", "x": 912, "y": 68, "smart": true, "jumping": true, "floating": true, "begin": 4, "end": 76 },
                        { "macro": "Tree", "x": 928, "y": 32, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 963, "y": 63, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 976, "y": 32, "width": 32, "solidTrunk": true },
                        { "macro": "Floor", "x": 1032, "width": 368 },
                        { "thing": "Platform", "x": 1048, "y": 56, "width": 24, "sliding": true, "begin": 1024, "end": 1068 },
                        { "thing": "Koopa", "x": 1064, "y": 12, "smart": true },
                        { "thing": "Stone", "x": 1104, "y": 32, "width": 16, "height": 32 },
                        { "thing": "Stone", "x": 1120, "y": 48, "width": 16, "height": 48 },
                        { "thing": "Stone", "x": 1136, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 1220, "large": true, "walls": 12, "transport": { "map": "1-4" } }
                    ]
                }
            ]
        }, {
            "name": "1-4",
            "time": 300,
            "locations": [
                { "entry": "Castle" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle", "width": 104 },
                        { "thing": "Stone", "y": 88, "width": 192, "height": 24 },
                        { "macro": "Water", "x": 104, "y": 8, "width": 24 },
                        { "macro": "Floor", "x": 120, "y": 24, "width": 88 },
                        { "thing": "Stone", "x": 184, "y": 64 },
                        { "thing": "CastleBlock", "x": 184, "y": 56 },
                        { "thing": "Stone", "x": 192, "y": 88, "width": 1088 },
                        { "macro": "Water", "x": 208, "width": 24 },
                        { "macro": "Floor", "x": 232, "y": 24, "width": 8 },
                        { "macro": "Floor", "x": 240, "y": 16, "width": 8 },
                        { "thing": "CastleBlock", "x": 240, "y": 24, "fireballs": 6, "speed": -1 },
                        { "thing": "Block", "x": 240, "y": 56, "contents": "Mushroom" },
                        { "macro": "Floor", "x": 248, "y": 24, "width": 8 },
                        { "macro": "Water", "x": 256, "width": 24 },
                        { "macro": "Floor", "x": 280, "y": 0, "width": 744 },
                        { "thing": "Stone", "x": 280, "y": 32, "width": 296 },
                        { "thing": "Stone", "x": 280, "y": 24, "width": 552, "height": 24 },
                        { "thing": "Stone", "x": 296, "y": 80, "width": 280, "height": 24 },
                        { "thing": "CastleBlock", "x": 296, "y": 56 },
                        { "thing": "CastleBlock", "x": 392, "y": 56, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 480, "y": 56, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 536, "y": 56, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 608, "y": 32, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 640, "y": 72 },
                        { "thing": "Stone", "x": 640, "y": 80 },
                        { "thing": "CastleBlock", "x": 672, "y": 32, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 704, "y": 72, "fireballs": 6, "direction": 1 },
                        { "thing": "Stone", "x": 704, "y": 80 },
                        { "thing": "CastleBlock", "x": 736, "y": 32 },
                        { "thing": "Stone", "x": 776, "y": 80, "width": 56, "height": 16 },
                        { "macro": "Fill", "thing": "Block", "x": 848, "y": 32, "xnum": 3, "xwidth": 24, "hidden": true },
                        { "macro": "Fill", "thing": "Block", "x": 856, "y": 64, "xnum": 3, "xwidth": 24, "hidden": true },
                        { "thing": "Stone", "x": 928, "y": 24, "width": 32, "height": 24 },
                        { "thing": "Stone", "x": 984, "y": 24, "width": 40, "height": 24 },
                        { "thing": "Stone", "x": 984, "y": 80, "width": 40, "height": 16 },
                        { "macro": "EndInsideCastle", "x": 1024, "transport": { "map": "2-1" } },
                        { "thing": "Platform", "x": 1108, "y": 56, "width": 16, "sliding": true, "begin": 1080, "end": 1112, "nocollidechar": true }
                    ]
                }
            ]
        }, {
            "name": "2-1",
            "locations": [
                { "entry": "Plain" }, { "xloc": 1260 }, { "entry": "PipeVertical" }, { "area": 1, "entry": "Vine" }, { "area": 2 }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Floor", "width": 736 },
                        { "macro": "CastleLarge", "x": -16 },
                        { "macro": "Pattern", "pattern": "BackFence", "repeat": 2 },
                        { "thing": "Brick", "x": 120, "y": 32 },
                        { "thing": "Brick", "x": 128, "y": 32, "contents": "Mushroom" },
                        { "thing": "Brick", "x": 136, "y": 32 },
                        { "thing": "Stone", "x": 160, "y": 8 },
                        { "thing": "Stone", "x": 168, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 176, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 184, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 192, "y": 40, "height": 40 },
                        { "thing": "Goomba", "x": 192, "y": 48 },
                        { "thing": "Block", "x": 224, "y": 32, "hidden": true },
                        { "thing": "Block", "x": 224, "y": 64, "contents": "Mushroom1Up", "hidden": true },
                        { "macro": "Fill", "thing": "Brick", "x": 232, "y": 64, "xnum": 3 },
                        { "thing": "Koopa", "x": 256, "y": 12 },
                        { "thing": "Koopa", "x": 264, "y": 12 },
                        { "thing": "Stone", "x": 272, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 280, "y": 16, "height": 16 },
                        { "thing": "Goomba", "x": 336, "y": 8 },
                        { "thing": "Goomba", "x": 348, "y": 8 },
                        { "macro": "Pipe", "x": 368, "height": 32, "Piranha": "true" },
                        { "thing": "Block", "x": 424, "y": 32, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Block", "x": 424, "y": 64, "xnum": 5 },
                        { "macro": "Fill", "thing": "Block", "x": 432, "y": 32, "xnum": 4 },
                        { "thing": "Koopa", "x": 440, "y": 44 },
                        { "thing": "Goomba", "x": 472, "y": 8 },
                        { "thing": "Goomba", "x": 484, "y": 8 },
                        { "thing": "Koopa", "x": 528, "y": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 544, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Brick", "x": 544, "y": 32 },
                        { "thing": "Brick", "x": 552, "y": 64, "contents": "Star" },
                        { "thing": "Brick", "x": 560, "y": 64, "xnum": 3 },
                        { "macro": "Pipe", "x": 592, "height": 32, "piranha": true },
                        { "macro": "Fill", "thing": "Block", "x": 632, "y": 32, "xnum": 4 },
                        { "macro": "Fill", "thing": "Brick", "x": 648, "y": 64, "xnum": 2 },
                        { "thing": "Brick", "x": 664, "y": 64, "contents": ["Vine", { "entrance": 3 }] },
                        { "macro": "Fill", "thing": "Brick", "x": 672, "y": 64, "xnum": 2 },
                        { "macro": "Fill", "thing": "Block", "x": 680, "y": 32, "xnum": 3 },
                        { "macro": "Fill", "thing": "Goomba", "x": 704, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 736, "y": 64, "xnum": 4 },
                        { "macro": "Floor", "x": 768, "width": 80 },
                        { "macro": "Pattern", "pattern": "BackFenceMin", "x": 768 },
                        { "thing": "Goomba", "x": 820, "y": 40 },
                        { "macro": "Pipe", "x": 824, "height": 32, "piranha": true, "entrance": 4 },
                        { "macro": "Floor", "x": 872, "width": 240 },
                        { "thing": "Goomba", "x": 916, "y": 24 },
                        { "macro": "Pipe", "x": 920, "height": 16, "piranha": true, "exit": 2 },
                        { "thing": "Goomba", "x": 962, "y": 8 },
                        { "macro": "Pipe", "x": 976, "height": 32, "piranha": true },
                        { "thing": "Brick", "x": 1000, "y": 64, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Brick", "x": 1008, "y": 64, "xnum": 3 },
                        { "macro": "Pipe", "x": 1008, "height": 24 },
                        { "macro": "Pipe", "x": 1040, "height": 40, "piranha": true },
                        { "macro": "Floor", "x": 1136, "width": 80 },
                        { "macro": "Pattern", "pattern": "BackFence", "x": 1152, "repeat": 2 },
                        { "thing": "Koopa", "x": 1200, "y": 36, "jumping": true },
                        { "macro": "Floor", "x": 1232, "width": 576 },
                        { "thing": "Stone", "x": 1232, "y": 24, "height": 24 },
                        { "thing": "Brick", "x": 1288, "y": 32, "contents": "Coin" },
                        { "macro": "Fill", "thing": "Goomba", "x": 1296, "y": 8, "xnum": 2, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 1312, "y": 64, "xnum": 5 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1352, "y": 12, "xnum": 2, "xwidth": 16 },
                        { "thing": "Block", "x": 1360, "y": 32 },
                        { "thing": "Block", "x": 1374, "y": 64, "contents": "Mushroom" },
                        { "macro": "Pipe", "x": 1408, "height": 24, "piranha": true },
                        { "thing": "Koopa", "x": 1480, "y": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 1480, "y": 32, "xnum": 2 },
                        { "thing": "Block", "x": 1488, "y": 64, "contents": "Coin", "hidden": true },
                        { "thing": "Springboard", "x": 1504, "y": 14.5 },
                        { "macro": "Fill", "thing": "Stone", "x": 1520, "y": 80, "xnum": 2, "height": 80 },
                        { "macro": "EndOutsideCastle", "x": 1596, "transport": { "map": "2-2" } }
                    ]
                }, {
                    "setting": "Sky",
                    "blockBoundaries": true,
                    "exit": 1,
                    "creation": [
                        { "location": 3 },
                        { "thing": "Stone", "width": 32 },
                        { "thing": "Stone", "x": 40, "width": 456 },
                        { "macro": "Fill", "thing": "Coin", "x": 121, "y": 55, "xnum": 16, "xwidth": 8 },
                        { "thing": "Platform", "x": 128, "y": 24, "width": 24, "transport": true },
                        { "macro": "Fill", "thing": "Coin", "x": 257, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 289, "y": 63, "xnum": 16, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 425, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 553, "y": 7, "xnum": 3, "xwidth": 8 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 4 },
                        { "macro": "Ceiling", "x": 32, "width": 56 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 8, "xnum": 7, "ynum": 3 },
                        { "macro": "Fill", "thing": "Coin", "x": 33, "y": 31, "xnum": 7, "ynum": 2, "yheight": 16, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 41, "y": 63, "xnum": 5, "xwidth": 8 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "entrance": 2 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }
            ]
        }, {
            "name": "2-2",
            "locations": [
                { "entry": "Walking" }, { "area": 1 }, { "area": 2, "entry": "PipeVertical" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 2 },
                        { "macro": "Floor", "width": 192 },
                        { "macro": "CastleSmall" },
                        { "thing": "PipeHorizontal", "x": 80, "y": 16, "transport": 1 },
                        { "macro": "Pipe", "x": 96, "height": 32 }
                    ]
                }, {
                    "setting": "Underwater",
                    "blockBoundaries": true,
                    "underwater": true,
                    "creation": [
                        { "location": 1 },
                        { "macro": "Floor", "width": 536 }, 
                        { "thing": "Coral", "x": 96, "y": 24, "height": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 121, "y": 7, "xnum": 2, "xwidth": 8 },
                        { "thing": "Stone", "x": 152, "y": 32, "width": 24 },
                        { "thing": "Blooper", "x": 184, "y": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 224, "y": 64, "xnum": 3, "xwidth": 8 },
                        { "thing": "Coral", "x": 272, "y": 40, "height": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 296, "y": 7, "xnum": 3, "xwidth": 8 },
                        { "thing": "Stone", "x": 344, "y": 32, "width": 16 },
                        { "thing": "Coral", "x": 344, "y": 48, "height": 16 },
                        { "thing": "Blooper", "x": 376, "y": 32 },
                        { "thing": "Coral", "x": 408, "y": 32, "height": 32 },
                        { "thing": "Blooper", "x": 448, "y": 24 },
                        { "thing": "Stone", "x": 520, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 528, "y": 40, "height": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 546, "y": 23, "xnum": 3, "xwidth": 8 },
                        { "macro": "Floor", "x": 576, "width": 480 },
                        { "thing": "Stone", "x": 576, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 584, "y": 24, "height": 24 },
                        { "thing": "CheepCheep", "x": 616, "y": 24 },
                        { "thing": "Stone", "x": 632, "y": 24, "width": 16, "height": 24 },
                        { "thing": "Stone", "x": 632, "y": 88, "width": 16, "height": 24 },
                        { "thing": "CheepCheep", "x": 640, "y": 48 },
                        { "thing": "CheepCheep", "x": 656, "y": 16 },
                        { "thing": "Stone", "x": 664, "y": 64, "width": 24 },
                        { "thing": "Blooper", "x": 672, "y": 40 },
                        { "thing": "Coral", "x": 672, "y": 80, "height": 16 },
                        { "thing": "Coral", "x": 720, "y": 24, "height": 24 },
                        { "thing": "Blooper", "x": 760, "y": 80 },
                        { "thing": "CheepCheep", "x": 760, "y": 56 },
                        { "thing": "CheepCheep", "x": 784, "y": 80, "smart": true },
                        { "macro": "Fill", "thing": "Coin", "x": 816, "y": 15, "xnum": 3, "xwidth": 8 },
                        { "thing": "Stone", "x": 824, "y": 32, "width": 16 },
                        { "thing": "Coral", "x": 824, "y": 64, "height": 32 },
                        { "thing": "Blooper", "x": 848, "y": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 912, "y": 55, "xnum": 3, "xwidth": 8 },
                        { "thing": "Stone", "x": 928, "y": 40, "width": 16 },
                        { "thing": "CheepCheep", "x": 944, "y": 72 },
                        { "thing": "Coral", "x": 968, "y": 32, "height": 32 },
                        { "thing": "CheepCheep", "x": 1032, "y": 24, "smart": true },
                        { "thing": "Stone", "x": 1040, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1048, "y": 16, "height": 16 },
                        { "thing": "CheepCheep", "x": 1056, "y": 16 },
                        { "thing": "Stone", "x": 1056, "y": 88, "height": 24 },
                        { "thing": "Stone", "x": 1064, "y": 72, "width": 64 },
                        { "thing": "Coin", "x": 1073, "y": 15 },
                        { "macro": "Fill", "thing": "Coin", "x": 1080, "y": 7, "xnum": 3, "xwidth": 8 },
                        { "thing": "Coin", "x": 1105, "y": 15 },
                        { "thing": "CheepCheep", "x": 1100, "y": 40 },
                        { "macro": "Floor", "x": 1128, "width": 136 },
                        { "thing": "Stone", "x": 1128, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1136, "y": 32, "height": 32 },
                        { "thing": "CheepCheep", "x": 1160, "y": 32 },
                        { "thing": "Coral", "x": 1184, "y": 16, "height": 16 },
                        { "thing": "Coral", "x": 1200, "y": 24, "height": 24 },
                        { "thing": "CheepCheep", "x": 1206, "y": 56, "smart": true },
                        { "thing": "Stone", "x": 1256, "y": 64, "height": 64 },
                        { "thing": "Stone", "x": 1264, "y": 64, "width": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 1281, "y": 7, "xnum": 3, "ynum": 2, "xwidth": 12, "yheight": 24 },
                        { "thing": "Stone", "x": 1304, "y": 64, "width": 16 },
                        { "thing": "Stone", "x": 1320, "y": 64, "height": 64 },
                        { "macro": "Floor", "x": 1320, "width": 320 },
                        { "thing": "CheepCheep", "x": 1320, "y": 80 },
                        { "thing": "CheepCheep", "x": 1344, "y": 16 },
                        { "macro": "Fill", "thing": "Stone", "x": 1384, "y": 32, "ynum": 2, "yheight": 32, "width": 40 },
                        { "thing": "Coral", "x": 1392, "y": 80, "height": 16 },
                        { "thing": "CheepCheep", "x": 1408, "y": 40 },
                        { "macro": "Fill", "thing": "Stone", "x": 1448, "y": 32, "ynum": 2, "yheight": 32, "width": 32 },
                        { "thing": "CheepCheep", "x": 1472, "y": 72, "smart": true },
                        { "thing": "CheepCheep", "x": 1496, "y": 48, "smart": true },
                        { "thing": "Stone", "x": 1488, "y": 8, "width": 40 },
                        { "thing": "Stone", "x": 1496, "y": 16, "width": 32 },
                        { "thing": "Stone", "x": 1504, "y": 24, "width": 24 },
                        { "thing": "Stone", "x": 1512, "y": 32, "width": 16 },
                        { "thing": "Stone", "x": 1512, "y": 88, "width": 16, "height": 32 },
                        { "thing": "PipeHorizontal", "x": 1520, "y": 48, "transport": 2, "small": true },
                        { "thing": "Stone", "x": 1528, "y": 88, "width": 112, "height": 88 }
                    ]
                }, {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 4 },
                        { "macro": "Floor", "width": 464 },
                        { "macro": "Pipe", "height": 16, "piranha": true, "transport": 4 },
                        { "macro": "Pattern", "pattern": "BackRegular", "x": 104, },
                        { "thing": "Stone", "x": 16, "y": 8 },
                        { "thing": "Stone", "x": 24, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 32, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 40, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 48, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 56, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 64, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 72, "y": 64, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 148, "transport": { "map": "2-3" } }
                    ]
                }
            ]
        }, {
            "name": "2-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Floor", "width": 56 },
                        { "macro": "CastleSmall" },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 5 },
                        { "macro": "CheepsStart", "x": 64 },
                        { "macro": "Tree", "x": 64, "width": 64 },
                        { "thing": "Stone", "x": 80, "y": 8 },
                        { "thing": "Stone", "x": 88, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 96, "y": 24, "height": 24, "width": 24 },
                        { "macro": "Bridge", "x": 120, "y": 24, "width": 136, "end": true },
                        { "macro": "Bridge", "x": 256, "y": 24, "width": 128, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 290, "y": 63, "xnum": 4, "xwidth": 8 },
                        { "macro": "Bridge", "x": 384, "y": 24, "width": 128, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 441, "y": 63, "xnum": 3, "xwidth": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 449, "y": 55, "xnum": 2, "xwidth": 16 },
                        { "macro": "Bridge", "x": 544, "y": 24, "width": 96, "begin": true, "end": true },
                        { "macro": "Bridge", "x": 672, "y": 24, "width": 96, "begin": true, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 777, "y": 63, "xnum": 3, "xwidth": 8 },
                        { "macro": "Bridge", "x": 792, "y": 32, "width": 56, "begin": true, "end": true },
                        { "thing": "Block", "x": 816, "y": 64, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Coin", "x": 865, "y": 63, "xnum": 3, "xwidth": 8 },
                        { "macro": "Tree", "x": 896, "width": 64 },
                        { "macro": "Bridge", "x": 976, "y": 24, "width": 24 },
                        { "macro": "Bridge", "x": 1016, "y": 24, "width": 136, "begin": true, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 1064, "y": 63, "xnum": 6, "xwidth": 8 },
                        { "macro": "Bridge", "x": 1168, "y": 8, "width": 80, "begin": true, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 1193, "y": 39, "xnum": 4, "xwidth": 8 },
                        { "macro": "Bridge", "x": 1272, "y": 24, "width": 80, "begin": true, "end": true },
                        { "macro": "Bridge", "x": 1368, "y": 24, "width": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 1385, "y": 55, "xnum": 6, "xwidth": 8 },
                        { "macro": "Bridge", "x": 1400, "y": 24, "width": 16 },
                        { "macro": "Bridge", "x": 1432, "y": 24, "width": 16 },
                        { "macro": "Bridge", "x": 1464, "y": 24, "width": 80, "begin": true },
                        { "macro": "Tree", "x": 1536, "width": 104 },
                        { "thing": "Stone", "x": 1544, "y": 24, "width": 16, "height": 24 },
                        { "thing": "Stone", "x": 1560, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1568, "y": 8 },
                        { "macro": "CheepsStop", "x": 1600 },
                        { "macro": "Floor", "x": 1656, "width": 280 },
                        { "thing": "Stone", "x": 1664, "y": 8 },
                        { "thing": "Stone", "x": 1672, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1680, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1688, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1696, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1704, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1712, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1720, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 1796, "large": true, "walls": 7, "transport": { "map": "2-4" } }
                    ]
                }
            ]
        }, {
            "name": "2-4",
            "time": 300,
            "locations": [
                { "entry": "Castle" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle", "width": 128 },
                        { "thing": "Stone", "y": 88, "width": 128, "height": 24 },
                        { "thing": "Podoboo", "x": 128, "y": -32 },
                        { "macro": "Water", "x": 128, "width": 128 },
                        { "thing": "Stone", "x": 144, "y": 32, "width": 16 },
                        { "thing": "Stone", "x": 176, "y": 48 },
                        { "thing": "CastleBlock", "x": 184, "y": 48 },
                        { "thing": "Block", "x": 184, "y": 80, "contents": "Mushroom" },
                        { "thing": "Stone", "x": 192, "y": 48 },
                        { "thing": "Stone", "x": 216, "y": 32, "width": 16 },
                        { "thing": "Podoboo", "x": 240, "y": -32 },
                        { "macro": "Floor", "x": 256, "y": -8, "width": 416 },
                        { "thing": "Stone", "x": 256, "y": 24, "width": 16, "height": 32 },
                        { "thing": "Stone", "x": 272, "y": 88, "width": 392, "height": 24 },
                        { "thing": "Stone", "x": 272, "y": 64, "width": 168 },
                        { "thing": "Stone", "x": 272, "width": 72 },
                        { "thing": "Stone", "x": 296, "y": 32, "width": 96 },
                        { "thing": "CastleBlock", "x": 344 },
                        { "thing": "Stone", "x": 352, "width": 88 },
                        { "thing": "CastleBlock", "x": 392, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 400, "y": 32, "width": 88 },
                        { "thing": "CastleBlock", "x": 440, "y": 64, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 440 },
                        { "thing": "Stone", "x": 448, "width": 88 },
                        { "thing": "Stone", "x": 448, "y": 64, "width": 216 },
                        { "thing": "CastleBlock", "x": 488, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 496, "y": 32, "width": 88 },
                        { "thing": "CastleBlock", "x": 536 },
                        { "thing": "Stone", "x": 544, "width": 96 },
                        { "thing": "CastleBlock", "x": 584, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 640, "y": 24, "width": 32, "height": 32 },
                        { "thing": "CastleBlock", "x": 656, "y": 56, "fireballs": 6 },
                        { "macro": "PlatformGenerator", "x": 686, "width": 12, "direction": -1 },
                        { "macro": "PlatformGenerator", "x": 710, "width": 12 },
                        { "macro": "Floor", "x": 736, "y": 16 },
                        { "thing": "CastleBlock", "x": 736, "y": 24, "fireballs": 6, "direction": 1 },
                        { "macro": "Floor", "x": 744, "y": 24, "width": 48 },
                        { "thing": "Stone", "x": 744, "y": 88, "width": 48, "height": 24 },
                        { "macro": "Floor", "x": 792, "width": 80 },
                        { "macro": "Fill", "thing": "Coin", "x": 817, "y": 7, "xnum": 3, "ynum": 2, "xwidth": 8, "yheight": 32 },
                        { "thing": "CastleBlock", "x": 824, "y": 16 },
                        { "thing": "Stone", "x": 864, "y": 24, "height": 24 },
                        { "macro": "Water", "x": 872, "width": 16 },
                        { "thing": "Stone", "x": 864, "y": 24, "height": 24 },
                        { "macro": "Floor", "x": 888, "y": 24, "width": 16 },
                        { "macro": "Water", "x": 904, "width": 32 },
                        { "macro": "Floor", "x": 920, "width": 104 },
                        { "thing": "Stone", "x": 920, "y": 24, "width": 40, "height": 24 },
                        { "thing": "Stone", "x": 920, "y": 88, "width": 104, "height": 24 },
                        { "macro": "Fill", "thing": "Stone", "x": 976, "y": 24, "xnum": 2, "xwidth": 32, "width": 16, "height": 24 },
                        { "macro": "Fill", "thing": "Brick", "x": 1024, "y": 64, "xnum": 6 },
                        { "macro": "EndInsideCastle", "x": 1024 , "transport": { "map": "3-1" }},
                        { "thing": "Platform", "x": 1084, "y": 56, "width": 16 }
                    ]
                }
            ]
        }, {
            "name": "3-1",
            "time": 300,
            "locations": [
                { "entry": "Plain" }, 
                { "entry": "PipeVertical" },
                { "xloc": 1272 }, 
                { "area": 1 }, 
                { "area": 2, "entry": "Vine" }
            ],
            "areas": [
                {
                    "setting": "Overworld Night Alt",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Floor", "width": 360 },
                        { "macro": "CastleLarge", "x": -16 },
                        { "macro": "Pattern", "pattern": "BackFence", "repeat": 5 },
                        { "thing": "Block", "x": 128, "y": 32 },
                        { "thing": "Block", "x": 152, "y": 40 },
                        { "thing": "Block", "x": 176, "y": 40, "contents": "Mushroom" },
                        { "thing": "Koopa", "x": 200, "y": 12, "jumping": true },
                        { "macro": "Fill", "thing": "Brick", "x": 208, "y": 32, "xnum": 3 },
                        { "thing": "Koopa", "x": 224, "y": 20, "jumping": true },
                        { "macro": "Pipe", "x": 256, "height": 24, "piranha": true },
                        { "thing": "Goomba", "x": 296, "y": 8 },
                        { "macro": "Pipe", "x": 304, "height": 32, "piranha": true, "entrance": 3 },
                        { "macro": "Floor", "x": 384, "width": 232 },
                        { "macro": "Fill", "thing": "Goomba", "x": 424, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Pipe", "x": 456, "height": 24, "piranha": true },
                        { "thing": "Brick", "x": 488, "y": 32 },
                        { "thing": "Koopa", "x": 520, "y": 12 },
                        { "macro": "Pipe", "x": 536, "height": 16, "piranha": true, "exit": 1 },
                        { "thing": "Stone", "x": 584, "y": 8 },
                        { "thing": "Stone", "x": 592, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 600, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 608, "y": 32, "height": 32 },
                        { "macro": "Water", "x": 616, "y": 10, "width": 64 },
                        { "macro": "Bridge", "x": 616, "y": 32, "width": 64 },
                        { "macro": "Fill", "thing": "Goomba", "x": 656, "y": 40, "xnum": 3, "xwidth": 12 },
                        { "thing": "Block", "x": 656, "y": 64, "contents": "Mushroom1Up", "hidden": true },
                        { "macro": "Floor", "x": 680 },
                        { "thing": "Stone", "x": 680, "y": 32, "height": 32 },
                        { "macro": "Water", "x": 688, "y": 10, "width": 16 },
                        { "macro": "Floor", "x": 704, "width": 320 },
                        { "thing": "Stone", "x": 704, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 712, "y": 16, "height": 16 },
                        { "thing": "Brick", "x": 720, "y": 64, "contents": "Star" },
                        { "macro": "Fill", "thing": "Brick", "x": 728, "y": 64, "xnum": 2 },
                        { "macro": "Fill", "thing": "Goomba", "x": 752, "y": 8, "xnum": 2, "xwidth": 12 },
                        { "thing": "Koopa", "x": 808, "y": 12 },
                        { "macro": "Pipe", "x": 824, "height": 32, "piranha": true },
                        { "macro": "Fill", "thing": "Brick", "x": 888, "y": 32, "xnum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 888, "y": 64, "xnum": 2 },
                        { "thing": "HammerBro", "x": 904, "y": 44 },
                        { "thing": "Block", "x": 904, "y": 64 },
                        { "macro": "Fill", "thing": "Brick", "x": 912, "y": 64, "xnum": 3 },
                        { "thing": "HammerBro", "x": 936, "y": 12 },
                        { "thing": "Block", "x": 936, "y": 64, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Brick", "x": 944, "y": 64, "xnum": 3 },
                        // { "thing": "Springboard", "x": 1008, "y": 14.5 },
                        { "macro": "Fill", "thing": "Brick", "x": 1032, "y": 40, "xnum": 3 },
                        { "macro": "Fill", "thing": "Brick", "x": 1032, "y": 64, "xnum": 2 },
                        { "thing": "Brick", "thing": "Brick", "x": 1048, "y": 64, "contents": ["Vine", { "entrance": 4 }] },
                        { "macro": "Floor", "x": 1056, "width": 80 },
                        { "thing": "Stone", "x": 1088, "y": 8 },
                        { "thing": "Stone", "x": 1096, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1104, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1112, "y": 32, "height": 32 },
                        { "thing": "Goomba", "x": 1112, "y": 40 },
                        { "thing": "Stone", "x": 1120, "y": 40, "height": 40 },
                        { "thing": "Goomba", "x": 1120, "y": 48 },
                        { "thing": "Stone", "x": 1128, "y": 48, "height": 48 },
                        { "macro": "Floor", "x": 1152, "width": 264 },
                        { "thing": "Koopa", "x": 1192, "y": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 1200, "y": 32, "xnum": 2, "ynum": 2, "xwidth": 16, "yheight": 32 },
                        { "macro": "Fill", "thing": "Block", "x": 1208, "y": 32, "ynum": 2, "yheight": 32 },
                        { "thing": "Koopa", "x": 1216, "y": 76 },
                        { "macro": "Fill", "thing": "Goomba", "x": 1232, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Brick", "x": 1240, "y": 32, "xnum": 2, "ynum": 2, "xwidth": 16, "yheight": 32 },
                        { "thing": "Block", "x": 1248, "y": 32, "contents": "Mushroom" },
                        { "thing": "Block", "x": 1248, "y": 64 },
                        { "thing": "Koopa", "x": 1320, "y": 12, "jumping": true },
                        { "thing": "Brick", "x": 1328, "y": 32 },
                        { "thing": "Brick", "x": 1336, "y": 32, "contents": "Coin" },
                        { "thing": "Koopa", "x": 1344, "y": 18, "jumping": true },
                        { "macro": "Fill", "thing": "Brick", "x": 1344, "y": 32, "xnum": 3 },
                        { "thing": "Koopa", "x": 1360, "y": 44 },
                        { "thing": "Koopa", "x": 1368, "y": 12, "jumping": true },
                        { "thing": "Stone", "x": 1392, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1400, "y": 48, "height": 48 },
                        { "macro": "Floor", "x": 1440, "width": 320 },
                        { "thing": "Stone", "x": 1464, "y": 8 },
                        { "thing": "Stone", "x": 1472, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1480, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1488, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1496, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1504, "y": 48, "height": 48 },
                        { "thing": "Koopa", "x": 1504, "y": 60 },
                        { "thing": "Stone", "x": 1512, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1520, "y": 64, "width": 16, "height": 64 },
                        { "thing": "Koopa", "x": 1528, "y": 76 },
                        { "macro": "EndOutsideCastle", "x": 1596, "transport": { "map": "3-2" } }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 3 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 24, "y": 40, "xnum": 2, "ynum": 4, "xwidth": 72 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 32, "xnum": 2, "xwidth": 56 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 56, "xnum": 2, "ynum": 2, "xwidth": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 33, "y": 39, "xnum": 2, "xwidth": 56 },
                        { "macro": "Fill", "thing": "Brick", "x": 40, "y": 40, "xnum": 2, "xwidth": 40 },
                        { "thing": "Brick", "x": 40, "y": 64, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Coin", "x": 41, "y": 47, "xnum": 2, "xwidth": 40 },
                        { "macro": "Fill", "thing": "Brick", "x": 48, "y": 48, "xnum": 2, "xwidth": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 49, "y": 55, "xnum": 2, "ynum": 2, "xwidth": 24, "yheight": 16 },
                        { "macro": "Fill", "thing": "Brick", "x": 56, "y": 56, "xnum": 2, "ynum": 2 },
                        { "macro": "Fill", "thing": "Coin", "x": 57, "y": 71, "xnum": 2, "ynum": 2 },
                        { "thing": "Brick", "x": 80, "y": 64 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "entrance": 1 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }, {
                    "setting": "Sky Night",
                    "blockBoundaries": true,
                    "exit": 2,
                    "creation": [
                        { "location": 4 },
                        { "thing": "Stone", "width": 32 },
                        { "thing": "Stone", "x": 40, "width": 624 },
                        { "thing": "Platform", "x": 128, "y": 24, "width": 24, "transport": true },
                        { "macro": "Fill", "thing": "Coin", "x": 121, "y": 55, "xnum": 16 },
                        { "thing": "Stone", "x": 256, "y": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 273, "y": 55, "xnum": 16 },
                        { "thing": "Stone", "x": 408, "y": 48, "height": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 425, "y": 63, "xnum": 7 },
                        { "thing": "Stone", "x": 488, "y": 48, "height": 16 },
                        { "thing": "Stone", "x": 536, "y": 56, "width": 16 },
                        { "macro": "Fill", "thing": "Stone", "x": 568, "y": 56, "xnum": 5, "xwidth": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 569, "y": 63, "xnum": 10 },
                        { "macro": "Fill", "thing": "Coin", "x": 681, "y": 15, "xnum": 3 }
                    ]
                }
            ]
        }, {
            "name": "3-2",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld Night Alt",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackFence",  "x": -384, "repeat": 6 },
                        { "macro": "Floor", "width": 640 },
                        { "macro": "CastleSmall" },
                        { "thing": "Koopa", "x": 136, "y": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 192, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 264, "y": 12, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 344, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "thing": "Stone", "x": 392, "y": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 441, "y": 31, "xnum": 3, "xwidth": 8 },
                        { "thing": "Stone", "x": 480, "y": 24, "height": 24 },
                        { "thing": "Block", "x": 480, "y": 56, "contents": "Mushroom" },
                        { "thing": "Koopa", "x": 528, "y": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 568, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Stone", "x": 600, "y": 16, "height": 16 },
                        { "thing": "Brick", "x": 616, "y": 32, "contents": "Coin" },
                        { "thing": "Brick", "x": 616, "y": 64, "contents": "Star" },
                        { "thing": "Koopa", "x": 624, "y": 12 },
                        { "thing": "Stone", "x": 632, "y": 16, "height": 16 },
                        { "macro": "Floor", "x": 656, "width": 328 },
                        { "thing": "Koopa", "x": 736, "y": 34, "jumping": true },
                        { "thing": "Koopa", "x": 888, "y": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 952, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Floor", "x": 1000, "width": 24 },
                        { "thing": "Stone", "x": 1008, "y": 16, "height": 16 },
                        { "thing": "Brick", "x": 1008, "y": 56 },
                        { "macro": "Floor", "x": 1040, "width": 725 },
                        { "thing": "Koopa", "x": 1072, "y": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1120, "y": 12, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1200, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1296, "y": 12, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Coin", "x": 1345, "y": 55, "xnum": 4, "xwidth": 8 },
                        { "macro": "Pipe", "x": 1352, "height": 24, "piranha": true },
                        { "thing": "Koopa", "x": 1400, "y": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 1432, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 1504, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Stone", "x": 1536, "y": 8 },
                        { "thing": "Stone", "x": 1544, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1552, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1560, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1568, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1576, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1584, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1592, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 1668, "transport": { "map": "3-3" } }
                    ]
                }
            ]
        }, {
            "name": "3-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld Night",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 7 },
                        { "macro": "Floor", "width": 128 },
                        { "macro": "CastleSmall" },
                        { "macro": "Tree", "x": 144, "y": 24, "width": 40 },
                        { "macro": "Tree", "x": 176, "y": 48, "width": 48 },
                        { "thing": "Goomba", "x": 208, "y": 56 },
                        { "thing": "Platform", "x": 240, "y": 72, "width": 24, "sliding": true, "begin": 228, "end": 260 },
                        { "macro": "Tree", "x": 240, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 249, "y": 7, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 264, "y": 40, "width": 24, "sliding": true, "begin": 244, "end": 276 },
                        { "macro": "Tree", "x": 288, "y": 8, "width": 56 },
                        { "thing": "Coin", "x": 298, "y": 55 },
                        { "macro": "Fill", "thing": "Coin", "x": 337, "y": 55, "xnum": 3, "xwidth": 8 },
                        { "macro": "Tree", "x": 344, "y": 32, "width": 32 },
                        { "macro": "Tree", "x": 368, "y": 16, "width": 80 },
                        { "macro": "Tree", "x": 376, "y": 48, "width": 48 },
                        { "thing": "Block", "x": 392, "y": 80, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Coin", "x": 417, "y": 31, "xnum": 3, "xwidth": 8 },
                        { "thing": "Koopa", "x": 416, "y": 60, "smart": true },
                        { "thing": "Koopa", "x": 432, "y": 28, "smart": true },
                        { "macro": "Tree", "x": 440, "y": 80, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 449, "y": 87, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 482, "y": 56, "width": 24, "falling": true },
                        { "macro": "Tree", "x": 520, "width": 128 },
                        { "macro": "Tree", "x": 520, "y": 48, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 529, "y": 55, "xnum": 3, "xwidth": 32 },
                        { "macro": "Tree", "x": 552, "y": 48, "width": 24 },
                        { "thing": "Koopa", "x": 584, "y": 12, "smart": true },
                        { "macro": "Tree", "x": 584, "y": 48, "width": 24 },
                        { "macro": "Tree", "x": 616, "y": 72, "width": 24 },
                        { "thing": "Coin", "x": 625, "y": 79 },
                        { "macro": "Scale", "x": 660, "y": 86, "between": 56, "dropRight": 44 },
                        { "macro": "Tree", "x": 672, "y": 16, "width": 32 },
                        { "thing": "Platform", "x": 752, "y": 32, "width": 24, "falling": true },
                        { "thing": "Platform", "x": 768, "y": 64, "width": 24, "falling": true },
                        { "macro": "Tree", "x": 776, "y": 32, "width": 24 },
                        { "thing": "Platform", "x": 824, "y": 16, "width": 24, "falling": true },
                        { "macro": "Tree", "x": 832, "y": 64, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 841, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 856, "y": 16, "width": 40 },
                        { "thing": "Coin", "x": 865, "y": 23 },
                        { "macro": "Tree", "x": 864, "y": 48, "width": 24 },
                        { "thing": "Coin", "x": 873, "y": 55 },
                        { "thing": "Koopa", "x": 912, "y": 66, "smart": true, "jumping": true, "floating": true, "begin": 14, "end": 66 },
                        { "macro": "Tree", "x": 928, "width": 24 },
                        { "macro": "Tree", "x": 952, "y": 24, "width": 96 },
                        { "macro": "Fill", "thing": "Koopa", "x": 992, "y": 36, "xnum": 2, "xwidth": 14, "smart": true },
                        { "thing": "Platform", "x": 1056, "y": 56, "width": 24 },
                        { "macro": "Scale", "x": 1100, "y": 86, "between": 32, "dropRight": 48 },
                        { "macro": "Floor", "x": 1152, "width": 256 },
                        { "macro": "EndOutsideCastle", "x": 1204, "large": true, "walls": 15, "transport": { "map": "3-4" } }
                    ]
                }
            ]
        }, {
            "name": "3-4",
            "time": 300,
            "locations": [
                { "entry": "Castle" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle", "width": 128 },
                        { "thing": "Stone", "y": 88, "width": 128, "height": 24 },
                        { "thing": "Stone", "x": 128, "y": 88, "width": 896 },
                        { "thing": "Podoboo", "x": 128, "y": -32 },
                        { "macro": "Floor", "x": 144, "y": 24 },
                        { "macro": "Floor", "x": 152, "y": 8 },
                        { "macro": "Fill", "thing": "Stone", "x": 152, "y": 24, "xnum": 3, "xwidth": 40 },
                        { "macro": "Fill", "thing": "CastleBlock", "x": 152, "y": 16, "xnum": 3, "xwidth": 40, "fireballs": 6 },
                        { "macro": "Floor", "x": 160, "y": 24 },
                        { "macro": "Floor", "x": 184, "y": 24 },
                        { "macro": "Floor", "x": 192, "y": 8 },
                        { "macro": "Floor", "x": 200, "y": 24 },
                        { "thing": "Podoboo", "x": 208, "y": -32 },
                        { "macro": "Floor", "x": 224, "y": 24 },
                        { "macro": "Floor", "x": 232, "y": 8 },
                        { "macro": "Floor", "x": 240, "y": 24 },
                        { "macro": "Floor", "x": 264, "width": 104 },
                        { "thing": "Stone", "x": 264, "y": 24, "width": 16, "height": 24 },
                        { "thing": "Stone", "x": 280, "y": 80, "width": 88, "height": 16 },
                        { "thing": "Block", "x": 336, "y": 32 },
                        { "thing": "Block", "x": 344, "y": 32, "contents": "Mushroom" },
                        { "thing": "Block", "x": 352, "y": 32 },
                        { "macro": "Water", "x": 368, "width": 16 },
                        { "macro": "Floor", "x": 384, "width": 320 },
                        { "macro": "Fill", "thing": "Stone", "x": 424, "y": 8, "xnum": 2, "xwidth": 80, "width": 24 },
                        { "macro": "Fill", "thing": "Stone", "x": 424, "y": 80, "xnum": 2, "xwidth": 80, "width": 24, "height": 16 },
                        { "macro": "Fill", "thing": "CastleBlock", "x": 432, "y": 16, "xnum": 2, "xwidth": 80, "fireballs": 6, "direction": 1 },
                        { "macro": "Fill", "thing": "CastleBlock", "x": 432, "y": 64, "xnum": 2, "xwidth": 80, "fireballs": 6 },
                        { "thing": "Stone", "x": 632, "y": 8, "width": 24 },
                        { "thing": "Stone", "x": 632, "y": 80, "width": 24, "height": 16 },
                        { "thing": "CastleBlock", "x": 640, "y": 16, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 640, "y": 64, "fireballs": 6, "direction": 1 },
                        { "macro": "Fill", "thing": "Coin", "x": 649, "y": 55, "xnum": 3, "xwidth": 8 },
                        { "thing": "Podoboo", "x": 704, "y": -32 },
                        { "macro": "Water", "x": 704, "width": 16 },
                        { "macro": "Floor", "x": 720, "y": 24, "width": 48 },
                        { "thing": "Stone", "x": 720, "y": 80, "width": 48, "height": 16 },
                        { "macro": "Water", "x": 768, "width": 24 },
                        { "thing": "Podoboo", "x": 776, "y": -32 },
                        { "macro": "Floor", "x": 792, "y": 24, "width": 24 },
                        { "macro": "Water", "x": 816, "width": 24 },
                        { "thing": "Podoboo", "x": 824, "y": -32 },
                        { "macro": "Floor", "x": 840, "y": 24, "width": 24 },
                        { "macro": "Water", "x": 864, "width": 24 },
                        { "thing": "Podoboo", "x": 872, "y": -32 },
                        { "macro": "Floor", "x": 888, "width": 136 },
                        { "thing": "Stone", "x": 888, "y": 24, "width": 40, "height": 24 },
                        { "thing": "Stone", "x": 888, "y": 80, "width": 136, "height": 16 },
                        { "thing": "Stone", "x": 944, "y": 24, "width": 80, "height": 24 },
                        { "macro": "EndInsideCastle", "x": 1024 , "transport": { "map": "4-1" }},
                        { "macro": "Fill", "thing": "Brick", "x": 1056, "y": 64, "xnum": 2, "ynum": 3 },
                        { "thing": "Platform", "x": 1104, "y": 56, "width": 16 }
                    ]
                }
            ]
        }, {
            "name": "4-1",
            "locations": [
                { "entry": "Plain" }, { "entry": "PipeVertical" }, { "area": 1 }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Floor", "width": 256 },
                        { "macro": "CastleLarge", "x": -16 },
                        { "macro": "Pattern", "pattern": "BackRegular", "repeat": 5 },
                        { "macro": "Pipe", "x": 168, "height": 24, "piranha": true },
                        { "thing": "Block", "x": 200, "y": 32, "contents": "Mushroom" },
                        { "thing": "Block", "x": 200, "y": 64 },
                        { "thing": "Lakitu", "x": 212, "y": 84 },
                        { "macro": "Floor", "x": 272, "width": 352 },
                        { "macro": "Fill", "thing": "Coin", "x": 329, "y": 31, "xnum": 2, "xwidth": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 337, "y": 39, "xnum": 2, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Block", "x": 512, "y": 32, "xnum": 2, "ynum": 2, "xwidth": 24, "yheight": 32 },
                        { "macro": "Floor", "x": 656, "width": 536 },
                        { "macro": "Fill", "thing": "Block", "x": 720, "y": 32, "xnum": 4 },
                        { "thing": "Block", "x": 736, "y": 64, "contents": "Mushroom1Up", "hidden": true },
                        { "thing": "Stone", "x": 824, "y": 24, "height": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 841, "y": 55, "xnum": 4, "xwidth": 8 },
                        { "macro": "Pipe", "x": 928, "height": 32, "piranha": true },
                        { "macro": "Fill", "thing": "Coin", "x": 953, "y": 55, "xnum": 4, "xwidth": 8 },
                        { "macro": "Pipe", "x": 1056, "height": 32, "piranha": true, "transport": 2 },
                        { "macro": "Fill", "thing": "Coin", "x": 1081, "y": 55, "xnum": 4, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Block", "x": 1168, "y": 32, "xnum": 2 },
                        { "thing": "Block", "x": 1184, "y": 32, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Block", "x": 1184, "y": 64, "xnum": 4 },
                        { "macro": "Fill", "thing": "Brick", "x": 1192, "y": 32, "xnum": 2 },
                        { "macro": "Fill", "thing": "Block", "x": 1208, "y": 32, "xnum": 3 },
                        { "macro": "Floor", "x": 1208, "width": 184 },
                        { "macro": "Pipe", "x": 1304, "height": 16, "piranha": true, "entrance": 1 },
                        { "macro": "Floor", "x": 1416, "width": 24 },
                        { "macro": "Floor", "x": 1456, "width": 64 },
                        { "thing": "Stone", "x": 1512, "y": 24, "height": 24 },
                        { "macro": "Floor", "x": 1536, "width": 384 },
                        { "macro": "LakituStop", "x": 1664 },
                        { "thing": "Stone", "x": 1664, "y": 8 },
                        { "thing": "Stone", "x": 1672, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1680, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1688, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1696, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1704, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1712, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1720, "y": 64, "width": 16, "height": 64 },
                        { "thing": "Brick", "x": 1760, "y": 32, "contents": "Coin" },
                        { "macro": "EndOutsideCastle", "x": 1796, "transport": { "map": "4-2" } }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 24, "y": 16, "ynum": 3 },
                        { "macro": "Fill", "thing": "Brick", "x": 24, "y": 80, "xnum": 12 },
                        { "macro": "Fill", "thing": "Coin", "x": 25, "y": 39, "xnum": 8, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 25, "y": 7, "xnum": 10, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 32, "xnum": 6 },
                        { "macro": "Fill", "thing": "Brick", "x": 80, "y": 16, "ynum": 3 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "transport": 1 },
                        { "thing": "Brick", "x": 104, "y": 32, "contents": "Mushroom" },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }
            ]
        }, {
            "name": "4-2",
            "locations": [
                { "entry": "Walking" }, 
                { "area": 1 }, 
                { "area": 1, "entry": "PipeVertical" }, 
                { "area": 2 }, 
                { "area": 3, "entry": "PipeVertical" }, 
                { "area": 4, "entry": "Vine" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 1 },
                        { "macro": "Floor", "width": 192 },
                        { "macro": "CastleSmall" },
                        { "thing": "PipeHorizontal", "x": 80, "y": 16, "transport": 1 },
                        { "macro": "Pipe", "x": 96, "height": 32 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 1 },
                        { "macro": "Floor", "width": 88 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Ceiling", "x": 48, "width": 408 },
                        { "macro": "Floor", "x": 104, "width": 16 },
                        { "macro": "Floor", "x": 136 },
                        { "macro": "Fill", "thing": "Brick", "x": 160, "y": 64, "xnum": 23, "ynum": 3 },
                        { "macro": "Floor", "x": 168, "width": 288 },
                        { "macro": "Fill", "thing": "Brick", "x": 176, "y": 16, "xnum": 5, "ynum": 3 },
                        { "thing": "Brick", "x": 216, "y": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 217, "y": 7, "xnum": 3, "xwidth": 8, "xwidth": 8 },
                        { "thing": "Brick", "x": 224, "y": 32, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Brick", "x": 240, "y": 8, "xnum": 18, "ynum": 4 },
                        { "macro": "Fill", "thing": "Goomba", "x": 344, "y": 40, "xnum": 3, "xwidth": 12 },
                        { "thing": "Brick", "x": 344, "y": 64 },
                        { "thing": "Brick", "x": 344, "y": 72, "contents": "Coin" },
                        { "thing": "Brick", "x": 344, "y": 80 },
                        { "macro": "Fill", "thing": "Brick", "x": 352, "y": 64, "xnum": 4, "ynum": 3 },
                        { "macro": "Fill", "thing": "Block", "x": 400, "y": 32, "xnum": 2, "ynum": 2, "yheight": 32 },
                        { "macro": "Fill", "thing": "Block", "x": 432, "y": 32, "xnum": 2, "xwidth": 16 },
                        { "thing": "Block", "x": 440, "y": 32, "contents": "Mushroom" },
                        { "macro": "PlatformGenerator", "x": 470, "width": 24 },
                        { "macro": "Floor", "x": 504, "width": 336 },
                        { "thing": "Block", "x": 504, "y": 40, "hidden": true },
                        { "thing": "Block", "x": 512, "y": 48, "hidden": true },
                        { "thing": "Brick", "x": 512, "y": 64, "contents": ["Vine", { "transport": 5 }] },
                        { "thing": "Block", "x": 520, "y": 40, "hidden": true },
                        { "macro": "Fill", "thing": "Brick", "x": 520, "y": 64, "xnum": 2 },
                        { "thing": "Block", "x": 528, "y": 32, "hidden": true },
                        { "macro": "Ceiling", "x": 536, "width": 360 },
                        { "macro": "Pipe", "x": 576, "height": 24, "piranha": true },
                        { "thing": "Brick", "x": 608, "y": 32 },
                        { "thing": "Brick", "x": 616, "y": 32, "contents": "Coin" },
                        { "thing": "Koopa", "x": 616, "y": 12 },
                        { "macro": "Pipe", "x": 624, "height": 56, "piranha": true },
                        { "thing": "Brick", "x": 640, "y": 32 },
                        { "thing": "Brick", "x": 648, "y": 32, "contents": "Star" },
                        { "thing": "Beetle", "x": 664, "y": 8.5 },
                        { "macro": "Pipe", "x": 672, "height": 24, "piranha": true, "transport": 3 },
                        { "thing": "Brick", "x": 696, "y": 40 },
                        { "thing": "Beetle", "x": 704, "y": 8.5 },
                        { "macro": "Pipe", "x": 712, "height": 24 },
                        { "macro": "Fill", "thing": "Koopa", "x": 800, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "thing": "Stone", "x": 824, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 832, "y": 24, "height": 24 },
                        { "macro": "Floor", "x": 856, "width": 16 },
                        { "macro": "Pipe", "x": 856, "height": 32 },
                        { "macro": "Floor", "x": 888, "width": 16 },
                        { "thing": "Stone", "x": 888, "y": 24, "width": 16, "height": 24 },
                        { "macro": "PlatformGenerator", "x": 918, "width": 24 },
                        { "macro": "Floor", "x": 952, "width": 32 },
                        { "macro": "Fill", "thing": "Brick", "x": 952, "y": 32, "xnum": 4 },
                        { "thing": "Brick", "x": 952, "y": 64 },
                        { "macro": "Ceiling", "x": 952, "width": 32 },
                        { "thing": "Brick", "x": 960, "y": 64, "contents": "Mushroom" },
                        { "thing": "Brick", "x": 968, "y": 64 },
                        { "macro": "PlatformGenerator", "x": 992, "width": 24 },
                        { "macro": "Ceiling", "x": 1024, "width": 216 },
                        { "macro": "Floor", "x": 1032, "width": 120 },
                        { "macro": "Pipe", "x": 1048, "height": 16, "entrance": 2 },
                        { "thing": "Koopa", "x": 1096, "y": 12 },
                        { "macro": "Pipe", "x": 1104, "height": 24, "piranha": true },
                        { "macro": "Pipe", "x": 1136, "height": 32, "piranha": true },
                        { "macro": "Floor", "x": 1168, "width": 72 },
                        { "thing": "Stone", "x": 1216, "y": 8 },
                        { "thing": "Stone", "x": 1224, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1232, "y": 24, "height": 24 },
                        { "thing": "Beetle", "x": 1232, "y": 32.5 },
                        { "macro": "PlatformGenerator", "x": 1246, "width": 24 },
                        { "macro": "Floor", "x": 1280, "width": 184 },
                        { "macro": "Fill", "thing": "Brick", "x": 1280, "y": 48, "ynum": 2 },
                        { "macro": "Fill", "thing": "Brick", "x": 1280, "y": 64, "xnum": 16, "ynum": 3 },
                        { "macro": "Ceiling", "x": 1280, "width": 232 },
                        { "thing": "Brick", "x": 1288, "y": 32, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Brick", "x": 1296, "y": 32, "xnum": 10 },
                        { "macro": "Fill", "thing": "Coin", "x": 1297, "y": 39, "xnum": 10, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1344, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "thing": "Stone", "x": 1384, "y": 8 },
                        { "thing": "Stone", "x": 1392, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1400, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1408, "y": 32, "height": 32 },
                        { "thing": "Beetle", "x": 1432, "y": 8.5 },
                        { "macro": "Pipe", "x": 1440, "height": 56, "piranha": true },
                        { "macro": "Floor", "x": 1480, "width": 312 },
                        { "macro": "Fill", "thing": "Brick", "x": 1480, "y": 8, "xnum": 24, "ynum": 3 },
                        { "thing": "PipeHorizontal", "x": 1496, "y": 40, "entrance": 4 },
                        { "thing": "PipeVertical", "x": 1512, "y": 88, "height": 64 },
                        { "macro": "Fill", "thing": "Brick", "x": 1528, "y": 32, "xnum": 18, "ynum": 7 },
                        { "macro": "Ceiling", "x": 1528, "width": 184 },
                        { "macro": "Fill", "thing": "Brick", "x": 1616, "y": 32, "xnum": 7, "ynum": 7 },
                        { "thing": "ScrollEnabler", "x": 1512, "y": 184, "height": 96, "width": 16 },
                        { "thing": "ScrollBlocker", "x": 1528 },
                        { "macro": "Ceiling", "x": 1616, "width": 136 },
                        { "macro": "WarpWorld", "x": 1672, "warps": [5] },
                        { "macro": "Fill", "thing": "Brick", "x": 1776, "y": 8, "xnum": 2, "ynum": 11 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 3 },
                        { "macro": "Ceiling", "x": 32, "width": 56 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 48, "xnum": 7 }, 
                        { "thing": "Brick", "x": 32, "y": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 42, "y": 55, "xnum": 5, "ynum": 2, "xwidth": 8, "yheight": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 80, "y": 56, "ynum": 4 },
                        { "macro": "Fill", "thing": "Brick", "x": 88, "y": 56, "xnum": 2 },
                        { "thing": "Brick", "x": 112, "y": 48, "contents": "Coin" },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "transport": 2 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }, {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 4 },
                        { "macro": "Pattern", "pattern": "BackRegular", "x": 104 },
                        { "macro": "Floor", "width": 464 },
                        { "macro": "Pipe", "height": 16, "piranha": true, "entrance": 4 },
                        { "thing": "Stone", "x": 16, "y": 8 },
                        { "thing": "Stone", "x": 24, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 32, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 40, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 48, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 56, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 64, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 72, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 148 }
                    ]
                }, {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 5 },
                        { "macro": "Pattern", "pattern": "BackCloud", "x": -384, "y": 4, "repeat": 3 },
                        { "macro": "Floor", "width": 32 },
                        { "macro": "Floor", "x": 40, "width": 472 },
                        { "macro": "Shroom", "x": 96, "y": 32, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 97, "y": 39, "xnum": 3, "xwidth": 8 },
                        { "macro": "Shroom", "x": 128, "y": 64, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 129, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "macro": "Shroom", "x": 144, "y": 16, "width": 24 },
                        { "macro": "Shroom", "x": 176, "y": 16, "width": 40 },
                        { "macro": "Shroom", "x": 176, "y": 64, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 177, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "macro": "Shroom", "x": 208, "y": 48, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 209, "y": 55, "xnum": 3, "xwidth": 8 },
                        { "macro": "Shroom", "x": 240, "y": 72, "width": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 241, "y": 79, "xnum": 5, "xwidth": 8 },
                        { "macro": "Shroom", "x": 248, "y": 24, "width": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 281, "y": 31, "xnum": 2, "xwidth": 8 },
                        { "thing": "Stone", "x": 320, "y": 8 },
                        { "thing": "Stone", "x": 328, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 336, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 344, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 352, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 360, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 368, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 376, "y": 64, "height": 64 },
                        { "thing": "Stone", "x": 384, "y": 72, "height": 72 },
                        { "thing": "Stone", "x": 392, "y": 72, "width": 88 },
                        { "macro": "WarpWorld", "x": 392, "warps": [8, 7, 6], "textHeight": 0 },
                        { "thing": "Stone", "x": 496, "y": 88, "width": 16, "height": 88 },
                        { "thing": "ScrollBlocker", "x": 512, "y": 88 }
                    ]
                }
            ]
        }, {
            "name": "4-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackCloud", "x": 0, "y": 4, "repeat": 3 },
                        { "macro": "Floor", "x": 0, "y": 0, "width": 120 },
                        { "macro": "CastleSmall" },
                        { "macro": "Shroom", "x": 128, "width": 40 },
                        { "macro": "Shroom", "x": 152, "y": 64, "width": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 161, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "macro": "Shroom", "x": 184, "y": 32, "width": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 193, "y": 39, "xnum": 4, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Koopa", "x": 224, "y": 44, "xnum": 2, "smart": true },
                        { "macro": "Shroom", "x": 256, "y": 72, "width": 24 },
                        { "macro": "Shroom", "x": 288, "y": 8, "width": 56 },
                        { "thing": "Koopa", "x": 288, "y": 84, "smart": true, "floating": true, "begin": 32, "end": 88 },
                        { "thing": "Coin", "x": 302, "y": 15 },
                        { "thing": "Koopa", "x": 312, "y": 20, "smart": true },
                        { "macro": "Shroom", "x": 312, "y": 64, "width": 40 },
                        { "thing": "Coin", "x": 321, "y": 15 },
                        { "thing": "Block", "x": 344, "y": 88, "contents": "Mushroom" },
                        { "macro": "Shroom", "x": 352, "y": 32, "width": 24 },
                        { "thing": "Coin", "x": 385, "y": 47 },
                        { "macro": "Scale", "x": 396, "y": 86 },
                        { "macro": "Shroom", "x": 408, "y": 40, "width": 24 },
                        { "thing": "Platform", "x": 464, "y": 20, "width": 24, "floating": true, "begin": 32, "end": 88 },
                        { "thing": "Platform", "x": 496, "y": 66, "width": 24, "floating": true, "begin": 32, "end": 88 },
                        { "macro": "Shroom", "x": 520, "width": 40 },
                        { "macro": "Shroom", "x": 536, "y": 48, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 537, "y": 55, "xnum": 3, "xwidth": 8 },
                        { "thing": "Koopa", "x": 544, "y": 12, "smart": true },
                        { "macro": "Shroom", "x": 560, "y": 80, "width": 24 },
                        { "macro": "Coin", "x": 561, "y": 87, "xnum": 3 },
                        { "macro": "Shroom", "x": 576, "y": 32, "width": 24 },
                        { "thing": "Coin", "x": 585, "y": 39 },
                        { "macro": "Shroom", "x": 592, "y": 64, "width": 40 },
                        { "thing": "Koopa", "x": 624, "y": 76, "smart": true },
                        { "macro": "Scale", "x": 652, "y": 86 },
                        { "macro": "Scale", "x": 740, "y": 86 },
                        { "thing": "Coin", "x": 770, "y": 47 },
                        { "macro": "Shroom", "x": 792, "y": 16, "width": 24 },
                        { "macro": "Scale", "x": 828, "y": 86 },
                        { "macro": "Shroom", "x": 904, "y": 32, "width": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 905, "y": 39, "xnum": 5, "xwidth": 8 },
                        { "macro": "Shroom", "x": 936, "y": 56, "width": 24 },
                        { "macro": "Shroom", "x": 968, "width": 56 },
                        { "macro": "Shroom", "x": 1040, "y": 24, "width": 40 },
                        { "thing": "Platform", "x": 1088, "y": 67, "width": 24, "floating": true, "begin": 8, "end": 88 },
                        { "macro": "Floor", "x": 1128, "width": 152 },
                        { "macro": "EndOutsideCastle", "x": 1172, "large": true, "walls": 3 }
                    ]
                }
            ]
        }, {
            "name": "4-4",
            "time": 300,
            "locations": [
                { "entry": "Castle" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle", "width": 48 },
                        { "thing": "Stone", "y": 88, "width": 48, "height": 24 },
                        { "macro": "Floor", "x": 48, "y": 24 },
                        { "thing": "Stone", "x": 48, "y": 88, "width": 80 },
                        { "macro": "Water", "x": 56, "width": 16 },
                        { "macro": "Floor", "x": 72, "y": 24, "width": 16 },
                        { "macro": "Water", "x": 88, "width": 16 },
                        { "macro": "Floor", "x": 104, "y": 24, "width": 24 },
                        { "macro": "Section", "x": 128, "section": 0 }
                    ],
                    "sections": [
                        {
                            "before": {
                                "width": 400,
                                "creation": [
                                    { "macro": "Floor", "width": 400 },
                                    { "thing": "Stone", "y": 88, "width": 400 },
                                    { "thing": "Stone", "x": 16, "y": 56, "width": 48, "height": 32 },
                                    { "macro": "Fill", "thing": "Stone", "x": 72, "y": 56, "xnum": 5, "xwidth": 16, "height": 32 },
                                    { "thing": "Stone", "x": 152, "y": 56, "width": 24, "height": 32 },
                                    { "thing": "Stone", "x": 176, "y": 56, "width": 48 },
                                    { "macro": "Pipe", "x": 192, "height": 24, "piranha": true },
                                    { "thing": "Stone", "x": 224, "y": 56, "width": 136, "height": 32 },
                                    { "thing": "CastleBlock", "x": 296, "y": 56, "fireballs": 6, "hidden": true },
                                    { "thing": "CastleBlock", "x": 352, "y": 32, "fireballs": 6, "hidden": true },
                                    { "macro": "SectionFail", "x": 384, "y": 24, "width": 40, "height": 24 },
                                    { "macro": "SectionPass", "x": 394, "y": 80, "width": 40, "height": 24 },
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "thing": "Stone", "y": 56, "height": 32 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 40,
                                "creation": [
                                    { "macro": "Floor", "width": 40 },
                                    { "thing": "Stone", "y": 88, "width": 40 },
                                    { "thing": "Stone", "x": 16, "y": 80, "width": 24, "height": 24 },
                                    { "thing": "Stone", "x": 16, "y": 24, "width": 24, "height": 24 },
                                    { "macro": "SectionDecider", "x": 40, "pass": 1, "fail": 0 }
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 320,
                                "creation": [
                                    { "macro": "Floor", "width": 64 },
                                    { "thing": "Stone", "y": 88, "width": 336 },
                                    { "thing": "Stone", "x": 48, "y": 24, "width": 16 },
                                    { "macro": "Water", "x": 64, "width": 16 },
                                    { "thing": "Stone", "x": 72, "y": 40, "width": 16 },
                                    { "macro": "Floor", "x": 80, "y": 16 },
                                    { "thing": "Stone", "x": 80, "y": 24, "width": 40 },
                                    { "macro": "Water", "x": 88, "width": 32 },
                                    { "thing": "Stone", "x": 104, "y": 48 },
                                    { "thing": "Stone", "x": 112, "y": 40, "height": 16 },
                                    { "macro": "Floor", "x": 120, "width": 216 },
                                    { "thing": "Stone", "x": 120, "y": 56, "height": 16 },
                                    { "thing": "Stone", "x": 128, "y": 24, "width": 208 },
                                    { "thing": "Stone", "x": 128, "y": 56, "width": 16 },
                                    { "thing": "Stone", "x": 160, "y": 56, "width": 32 },
                                    { "thing": "Stone", "x": 200, "y": 48, "height": 24 },
                                    { "thing": "Stone", "x": 200, "y": 56, "width": 24 },
                                    { "thing": "Stone", "x": 240, "y": 56, "width": 96 },
                                    { "thing": "CastleBlock", "x": 280, "y": 56, "fireballs": 6, "hidden": true },
                                    { "thing": "CastleBlock", "x": 328, "y": 24, "fireballs": 6, "hidden": true },
                                    { "macro": "SectionPass", "x": 360, "y": 16, "width": 40, "height": 16 },
                                    { "macro": "SectionFail", "x": 360, "y": 48, "width": 40, "height": 24 },
                                    { "macro": "SectionFail", "x": 360, "y": 80, "width": 40, "height": 24 }
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "thing": "Stone", "y": 24 },
                                    { "thing": "Stone", "y": 56 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 136,
                                "creation": [
                                    { "macro": "Floor", "width": 80 },
                                    { "thing": "Stone", "y": 64, "height": 40 },
                                    { "thing": "Stone", "y": 88 },
                                    { "thing": "Stone", "x": 8, "y": 88, "width": 16, "height": 24 },
                                    { "macro": "Floor", "x": 72, "y": 24, "width": 32 },
                                    { "thing": "Stone", "x": 72, "y": 88, "width": 64 },
                                    { "macro": "Floor", "x": 96, "width": 32 },
                                    { "macro": "Floor", "x": 120, "y": 24, "width": 16 },
                                    { "macro": "SectionDecider", "x": 136, "pass": 2 }
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 256,
                                "creation": [ 
                                    { "macro": "EndInsideCastle" }
                                ]
                            }
                        }
                    ]
                }
            ]
        }, {
            "name": "5-1",
            "locations": [
                { "entry": "Plain" }, { "entry": "PipeVertical" }, { "area": 1 }
            ],
            "areas": [
                {
                    "setting": "Overworld Alt",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackFence", "x": -384, "repeat": 6 },
                        { "macro": "Floor", "width": 392 },
                        { "macro": "CastleLarge", "x": -16 },
                        { "thing": "Koopa", "x": 128, "y": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 152, "y": 8, "xnum": 3, "xwidth": 21 },
                        { "macro": "Fill", "thing": "Goomba", "x": 240, "y": 8, "xnum": 3, "xwidth": 21 },
                        { "macro": "Fill", "thing": "Goomba", "x": 328, "y": 12, "xnum": 2, "xwidth": 21 },
                        { "macro": "Pipe", "x": 352, "height": 24, "piranha": true },
                        { "macro": "Floor", "x": 408, "width": 328 },
                        { "macro": "Pipe", "x": 408, "height": 24, "piranha": true },
                        { "thing": "Koopa", "x": 488, "y": 32, "jumping": true },
                        { "thing": "Goomba", "x": 520, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Goomba", "x": 608, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Koopa", "x": 696, "y": 16, "jumping": true },
                        { "thing": "Stone", "x": 712, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 712, "y": 32, "width": 40 },
                        { "macro": "Fill", "thing": "Brick", "x": 720, "y": 64, "xnum": 2, "xwidth": 16 },
                        { "thing": "Brick", "x": 728, "y": 64, "contents": "Star" },
                        { "macro": "Floor", "x": 768, "width": 324 },
                        { "macro": "Fill", "thing": "Goomba", "x": 824, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Cannon", "x": 888, "y": 16, "height": 16 },
                        { "macro": "Floor", "x": 928, "width": 288 },
                        { "thing": "Stone", "x": 928, "y": 24, "height": 24 },
                        { "macro": "Fill", "thing": "Goomba", "x": 968, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Koopa", "x": 1016, "y": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 1080, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1152, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "thing": "Stone", "x": 1176, "y": 32, "width": 32 },
                        { "thing": "Block", "x": 1184, "y": 32, "contents": "Mushroom1Up", "hidden": true },
                        { "macro": "Fill", "thing": "Brick", "x": 1192, "y": 32, "xnum": 2 },
                        { "macro": "Floor", "x": 1240, "width": 552 },
                        { "thing": "Stone", "x": 1248, "y": 32, "width": 16 },
                        { "macro": "Pipe", "x": 1248, "y": 32, "height": 16, "piranha": true, "entrance": 2 },
                        { "thing": "Cannon", "x": 1272, "y": 16, "height": 16 },
                        { "macro": "Pipe", "x": 1304, "height": 16, "piranha": true, "exit": 1 },
                        { "thing": "Cannon", "x": 1360, "y": 16, "height": 16 },
                        { "thing": "Koopa", "x": 1424, "y": 12, "jumping": true },
                        { "thing": "Stone", "x": 1456, "y": 8 },
                        { "thing": "Brick", "x": 1456, "y": 44 },
                        { "thing": "Stone", "x": 1464, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1472, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1480, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1488, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1512, "y": 64, "width": 16, "height": 48 },
                        { "macro": "EndOutsideCastle", "x": 1588 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Ceiling", "x": 32, "width": 56 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 48, "xnum": 7 },
                        { "thing": "Brick", "x": 32, "y": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 41, "y": 55, "xnum": 5, "ynum": 2, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 80, "y": 56, "ynum": 4 },
                        { "thing": "Brick", "x": 88, "y": 56, "xnum": 2 },
                        { "thing": "Brick", "x": 112, "y": 48, "contents": "Coin" },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "entrance": 1 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }
            ]
        }, {
            "name": "5-2",
            "locations": [
                { "entry": "Plain" }, 
                { "entry": "PipeVertical" }, 
                { "x": 1032 },
                { "area": 1 }, 
                { "area": 2, "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld Alt",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackFence", "x": -384, "repeat": 4 },
                        { "macro": "Floor", "width": 208 },
                        { "macro": "CastleSmall" },
                        { "thing": "Stone", "x": 96, "y": 8 },
                        { "thing": "Stone", "x": 104, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 112, "y": 24, "width": 16, "height": 24 },
                        { "thing": "Stone", "x": 120, "y": 32, "width": 32 },
                        { "thing": "Cannon", "x": 136, "y": 48, "height": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 169, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "thing": "Koopa", "x": 184, "y": 12 },
                        { "thing": "Springboard", "x": 200, "y": 14.5 },
                        { "macro": "Floor", "x": 232, "width": 296 },
                        { "macro": "Fill", "thing": "Brick", "x": 232, "y": 32, "xnum": 6 },
                        { "macro": "Fill", "thing": "Brick", "x": 232, "y": 64, "xnum": 5 },
                        { "macro": "Fill", "thing": "Coin", "x": 233, "y": 39, "xnum": 3, "xwidth": 8 },
                        { "thing": "Brick", "x": 272, "y": 64, "contents": "Mushroom" },
                        { "thing": "Koopa", "x": 320, "y": 32, "jumping": true },
                        { "thing": "Stone", "x": 352, "y": 8 },
                        { "thing": "Stone", "x": 360, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 368, "y": 24, "height": 24 },
                        { "thing": "HammerBro", "x": 368, "y": 36 },
                        { "thing": "Stone", "x": 376, "y": 32, "width": 16, "height": 32 },
                        { "thing": "Stone", "x": 392, "y": 16, "height": 16 },
                        { "macro": "Pipe", "x": 440, "height": 24, "piranha": true, "entrance": 3 },
                        { "thing": "Stone", "x": 496, "y": 8 },
                        { "thing": "Stone", "x": 504, "y": 16, "height": 16 },
                        { "thing": "Goomba", "x": 504, "y": 24 },
                        { "thing": "Stone", "x": 512, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 520, "y": 32, "height": 32 },
                        { "thing": "Goomba", "x": 520, "y": 40 },
                        { "macro": "Floor", "x": 544, "width": 192 },
                        { "thing": "Stone", "x": 544, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 552, "y": 48, "width": 16, "height": 48 },
                        { "macro": "Fill", "thing": "Block", "x": 624, "y": 32, "xnum": 5 },
                        { "thing": "HammerBro", "x": 648, "y": 46 },
                        { "thing": "Block", "x": 672, "y": 32, "hidden": true },
                        { "thing": "Brick", "x": 680, "y": 64, "contents": ["Vine", { "entrance": 4 }] },
                        { "macro": "Fill", "thing": "Brick", "x": 688, "y": 64, "xnum": 2 },
                        { "macro": "Fill", "thing": "Coin", "x": 689, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 712, "y": 40, "xnum": 3 },
                        { "macro": "Fill", "thing": "Coin", "x": 713, "y": 7, "xnum": 2, "xwidth": 8 },
                        { "macro": "Floor", "x": 768, "width": 248 },
                        { "thing": "Koopa", "x": 848, "y": 32, "jumping": true },
                        { "thing": "Cannon", "x": 856, "y": 16, "height": 16 },
                        { "macro": "Pipe", "x": 920, "height": 16, "piranha": true, "exit": 1 },
                        { "macro": "Fill", "thing": "Brick", "x": 944, "y": 32, "xnum": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 944, "y": 64, "xnum": 7 },
                        { "thing": "HammerBro", "x": 960, "y": 44 },
                        { "thing": "HammerBro", "x": 992, "y": 76 },
                        { "thing": "Brick", "x": 1000, "y": 64, "contents": "Star" },
                        { "macro": "Floor", "x": 1032, "width": 120 },
                        { "thing": "Stone", "x": 1032, "y": 24, "height": 24 },
                        { "macro": "Fill", "thing": "Beetle", "x": 1088, "y": 8.5, "xnum": 3, "xwidth": 8.5 },
                        { "thing": "Brick", "x": 1128, "y": 16, "contents": "Coin" },
                        { "thing": "Brick", "x": 1136, "y": 16, "contents": "Mushroom" },
                        { "macro": "Pattern", "pattern": "BackFence", "x": 1142, "repeat": 2 },
                        { "macro": "Fill", "thing": "Brick", "x": 1176, "y": 32, "xnum": 3 },
                        { "macro": "Floor", "x": 1208, "width": 152 },
                        { "macro": "Fill", "thing": "Brick", "x": 1124, "y": 64, "xnum": 5 },
                        { "macro": "Fill", "thing": "Goomba", "x": 1240, "y": 8, "xnum": 2, "xwidth": 12 },
                        { "thing": "Koopa", "x": 1256, "y": 76, "smart": true },
                        { "thing": "Koopa", "x": 1304, "y": 28, "jumping": true },
                        { "thing": "Koopa", "x": 1328, "y": 20, "jumping": true },
                        { "thing": "Block", "x": 1344, "y": 32, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Brick", "x": 1376, "y": 64, "xnum": 4 },
                        { "macro": "Fill", "thing": "Coin", "x": 1377, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "macro": "Floor", "x": 1384, "width": 16 },
                        { "macro": "Pipe", "x": 1384, "height": 16 },
                        { "macro": "Floor", "x": 1416, "width": 64 },
                        { "thing": "Stone", "x": 1464, "y": 8 },
                        { "thing": "Stone", "x": 1472, "y": 16, "height": 16 },
                        { "thing": "SceneryBlocker", "x": 1480, "y": 8 },
                        { "macro": "Floor", "x": 1488, "width": 16 },
                        { "thing": "Stone", "x": 1488, "y": 32, "height": 32 },
                        { "thing": "Koopa", "x": 1488, "y": 64, "jumping": true },
                        { "thing": "Stone", "x": 1496, "y": 40, "height": 40 },
                        { "macro": "Floor", "x": 1512, "width": 280 },
                        { "thing": "Stone", "x": 1512, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1520, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 1596 }
                    ]
                }, {
                    "setting": "Underwater",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 3 },
                        { "macro": "Floor", "width": 176 },
                        { "thing": "Stone", "x": 88, "y": 56, "height": 40 },
                        { "thing": "Coral", "x": 96, "y": 24, "height": 24 },
                        { "thing": "Coral", "x": 120, "y": 72, "height": 16 },
                        { "thing": "Blooper", "x": 136, "y": 24 },
                        { "thing": "Coral", "x": 160, "y": 32, "height": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 177, "y": 47, "xnum": 10 },
                        { "macro": "PlatformGenerator", "x": 182, "width": 24 },
                        { "macro": "Floor", "x": 208, "y": 24, "width": 16 },
                        { "thing": "Stone", "x": 208, "y": 88, "width": 16, "height": 24 },
                        { "thing": "CheepCheep", "x": 220, "y": 60 },
                        { "macro": "PlatformGenerator", "x": 230, "width": 24 },
                        { "macro": "Floor", "x": 256, "y": 24, "width": 16 },
                        { "thing": "Stone", "x": 256, "height": 88, "width": 16, "height": 24 },
                        { "macro": "Floor", "x": 272, "width": 32 },
                        { "thing": "Blooper", "x": 272, "y": 24 },
                        { "thing": "Coral", "x": 304, "y": 64, "height": 32 },
                        { "thing": "Stone", "x": 304, "y": 72, "width": 48 },
                        { "thing": "CheepCheep", "x": 312, "y": 20 },
                        { "macro": "Floor", "x": 320, "width": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 32, "y": 7, "xnum": 2 },
                        { "thing": "Coral", "x": 344, "y": 64, "height": 32 },
                        { "thing": "Blooper", "x": 348, "y": 22 },
                        { "macro": "Floor", "x": 352, "width": 168 },
                        { "thing": "Coral", "x": 368, "y": 16, "height": 16 },
                        { "thing": "CheepCheep", "x": 388, "y": 40, "smart": true },
                        { "thing": "Stone", "x": 400, "y": 32, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 401, "y": 39, "xnum": 4 },
                        { "thing": "CheepCheep", "x": 424, "y": 84 },
                        { "thing": "Stone", "x": 432, "y": 56, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 433, "y": 63, "xnum": 4 },
                        { "thing": "Stone", "x": 472, "y": 8 },
                        { "thing": "Stone", "x": 480, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 488, "y": 32, "width": 16, "height": 40 },
                        { "thing": "Stone", "x": 488, "y": 88, "width": 16, "height": 40 },
                        { "thing": "PipeHorizontal", "x": 496, "y": 48, "entrance": 1 },
                        { "thing": "Stone", "x": 504, "y": 88, "width": 16, "height": 88 }
                    ]
                }, {
                    "setting": "Sky",
                    "blockBoundaries": true,
                    "exit": 2,
                    "creation": [
                        { "location": 4 },
                        { "thing": "Stone", "width": 32 },
                        { "thing": "Stone", "x": 40, "width": 576 },
                        { "thing": "Platform", "x": 120, "y": 32, "width": 16, "transport": true },
                        { "macro": "Fill", "thing": "Coin", "x": 120, "y": 64, "xnum": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 256, "y": 80, "xnum": 3 },
                        { "macro": "Fill", "thing": "Coin", "x": 288, "y": 72, "xnum": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 424, "y": 80, "xnum": 3 }
                    ]
                }
            ]
        }, {
            "name": "5-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackCloud", "x": 0, "y": 4, "repeat": 5 },
                        { "macro": "Floor", "x": 0, "y": 0, "width": 128 },
                        { "macro": "CastleSmall" },
                        { "macro": "BulletBillsStart", "width": 128 },
                        { "macro": "Tree", "x": 144, "y": 8, "width": 32 },
                        { "macro": "Tree", "x": 192, "y": 32, "width": 64, "solidTrunk": true },
                        { "macro": "Tree", "x": 208, "y": 64, "width": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 217, "y": 71, "xnum": 3, "xwidth": 8 },
                        { "thing": "Koopa", "x": 240, "y": 76, "smart": true },
                        { "macro": "Tree", "x": 256, "y": 8, "width": 24 },
                        { "thing": "Coin", "x": 266, "y": 15 },
                        { "macro": "Tree", "x": 280, "y": 40, "width": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 297, "y": 87, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 320, "y": 72, "width": 56 },
                        { "macro": "Fill", "thing": "Goomba", "x": 352, "y": 80, "xnum": 2, "xwidth": 16 },
                        { "macro": "Tree", "x": 400, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 402, "y": 55, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 440, "y": 56, "width": 16, "floating": true, "begin": -4, "end": 56 },
                        { "macro": "Tree", "x": 472, "width": 40 },
                        { "thing": "Block", "x": 472, "y": 24, "contents": "Mushroom" },
                        { "macro": "Tree", "x": 480, "y": 64, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 482, "y": 71, "xnum": 4, "xwidth": 8 },
                        { "macro": "Tree", "x": 520, "width": 40 },
                        { "macro": "Tree", "x": 560, "y": 32, "width": 24 },
                        { "thing": "Koopa", "x": 592, "y": 76, "smart": true, "jumping": true, "floating": true, "begin": 16, "end": 88 },
                        { "macro": "Tree", "x": 608, "y": 56, "width": 48 },
                        { "thing": "Goomba", "x": 640, "y": 64 },
                        { "macro": "Fill", "thing": "Coin", "x": 681, "y": 63, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 672, "y": 40, "width": 20, "sliding": true, "begin": 660, "end": 720 },
                        { "macro": "Fill", "thing": "Coin", "x": 745, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 756, "y": 32, "width": 20, "sliding": true, "begin": 708, "end": 776 },
                        { "macro": "Fill", "thing": "Coin", "x": 777, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 784, "y": 16, "width": 32 },
                        { "macro": "Tree", "x": 832, "y": 48, "width": 64, "solidTrunk": true },
                        { "thing": "Koopa", "x": 880, "y": 60, "smart": true },
                        { "macro": "Tree", "x": 904, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 906, "y": 7, "xnum": 3, "xwidth": 8 },
                        { "thing": "Koopa", "x": 912, "y": 68, "smart": true, "jumping": true, "floating": true, "begin": 4, "end": 76 },
                        { "macro": "Tree", "x": 928, "y": 32, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 963, "y": 63, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 976, "y": 32, "width": 32, "solidTrunk": true },
                        { "macro": "Floor", "x": 1032, "width": 368 },
                        { "thing": "Platform", "x": 1052, "y": 56, "width": 20, "sliding": true, "begin": 1008, "end": 1076 },
                        { "thing": "Koopa", "x": 1064, "y": 12, "smart": true },
                        { "thing": "Stone", "x": 1104, "y": 32, "width": 16, "height": 32 },
                        { "thing": "Stone", "x": 1120, "y": 48, "width": 16, "height": 48 },
                        { "thing": "Stone", "x": 1136, "y": 64, "width": 16, "height": 64 },
                        { "macro": "BulletBillsStop", "x": 1152 },
                        { "macro": "EndOutsideCastle", "x": 1220, "large": true, "walls": 12 }
                    ]
                }
            ]
        }, {
            "name": "5-4",
            "time": 300,
            "locations": [
                { "entry": "Castle" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle", "width": 128 },
                        { "thing": "Stone", "y": 88, "width": 128, "height": 24 },
                        { "thing": "Podoboo", "x": 128, "y": -32 },
                        { "macro": "Water", "x": 128, "width": 128 },
                        { "thing": "Stone", "x": 144, "y": 32, "width": 16 },
                        { "thing": "Podoboo", "x": 160, "y": -24 },
                        { "thing": "Stone", "x": 176, "y": 48 },
                        { "thing": "CastleBlock", "x": 184, "y": 48, "fireballs": 12, "direction": 1 },
                        { "thing": "Block", "x": 184, "y": 80, "contents": "Mushroom" },
                        { "thing": "Stone", "x": 192, "y": 48 },
                        { "thing": "Stone", "x": 216, "y": 32, "width": 16 },
                        { "thing": "Podoboo", "x": 240, "y": -32 },
                        { "macro": "Floor", "x": 256, "y": -8, "width": 416 },
                        { "thing": "Stone", "x": 256, "y": 24, "width": 16, "height": 32 },
                        { "thing": "Stone", "x": 272, "y": 88, "width": 392, "height": 24 },
                        { "thing": "Stone", "x": 272, "y": 64, "width": 168 },
                        { "thing": "Stone", "x": 272, "width": 72 },
                        { "thing": "Stone", "x": 296, "y": 32, "width": 96 },
                        { "thing": "CastleBlock", "x": 344, "fireballs": 6, "direction": 1 },
                        { "thing": "Stone", "x": 352, "width": 88 },
                        { "thing": "CastleBlock", "x": 392, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 400, "y": 32, "width": 88 },
                        { "thing": "CastleBlock", "x": 440, "y": 64, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 440, "fireballs": 6, "direction": 1 },
                        { "thing": "Stone", "x": 448, "width": 88 },
                        { "thing": "Stone", "x": 448, "y": 64, "width": 216 },
                        { "thing": "CastleBlock", "x": 488, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 496, "y": 32, "width": 88 },
                        { "thing": "CastleBlock", "x": 536, "fireballs": 6, "direction": 1 },
                        { "thing": "Stone", "x": 544, "width": 96 },
                        { "thing": "CastleBlock", "x": 584, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 640, "y": 24, "width": 32, "height": 32 },
                        { "thing": "CastleBlock", "x": 656, "y": 56, "fireballs": 6 },
                        { "macro": "PlatformGenerator", "x": 686, "width": 12, "direction": -1 },
                        { "macro": "PlatformGenerator", "x": 710, "width": 12 },
                        { "macro": "Floor", "x": 736, "y": 16 },
                        { "thing": "CastleBlock", "x": 736, "y": 24, "fireballs": 6, "direction": 1 },
                        { "macro": "Floor", "x": 744, "y": 24, "width": 48 },
                        { "thing": "Stone", "x": 744, "y": 88, "width": 48, "height": 24 },
                        { "macro": "Floor", "x": 792, "width": 80 },
                        { "macro": "Fill", "thing": "Coin", "x": 817, "y": 7, "xnum": 3, "ynum": 2, "xwidth": 8, "yheight": 32 },
                        { "thing": "CastleBlock", "x": 824, "y": 16, "fireballs": 6, "direction": 1 },
                        { "thing": "Stone", "x": 864, "y": 24, "height": 24 },
                        { "macro": "Water", "x": 872, "width": 16 },
                        { "thing": "Podoboo", "x": 872, "y": -32 },
                        { "thing": "Stone", "x": 864, "y": 24, "height": 24 },
                        { "macro": "Floor", "x": 888, "y": 24, "width": 16 },
                        { "macro": "Water", "x": 904, "width": 32 },
                        { "thing": "Podoboo", "x": 904, "y": -32 },
                        { "macro": "Floor", "x": 920, "width": 104 },
                        { "thing": "Stone", "x": 920, "y": 24, "width": 40, "height": 24 },
                        { "thing": "Stone", "x": 920, "y": 88, "width": 104, "height": 24 },
                        { "macro": "Fill", "thing": "Stone", "x": 976, "y": 24, "xnum": 2, "xwidth": 32, "width": 16, "height": 24 },
                        { "macro": "Fill", "thing": "Brick", "x": 1024, "y": 64, "xnum": 6 },
                        { "macro": "EndInsideCastle", "x": 1024 },
                        { "thing": "Podoboo", "x": 1048, "y": -40 },
                        { "thing": "Platform", "x": 1084, "y": 56, "width": 16 }
                    ]
                }
            ]
        }, {
            "name": "6-1",
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld Night",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Floor", "width": 160 },
                        { "macro": "CastleLarge", "x": -16 },
                        { "macro": "Pattern", "pattern": "BackRegular", "repeat": 4 },
                        { "thing": "Lakitu", "x": 184, "y": 84 },
                        { "macro": "Fill", "thing": "Block", "x": 128, "y": 32, "xnum": 2 },
                        { "macro": "Floor", "x": 176, "width": 72 },
                        { "thing": "Stone", "x": 208, "y": 8, "width": 48 },
                        { "thing": "Stone", "x": 232, "y": 16, "width": 40 },
                        { "thing": "Stone", "x": 256, "y": 24, "width": 32 },
                        { "thing": "Stone", "x": 280, "y": 32, "width": 24 },
                        { "thing": "Brick", "x": 288, "y": 64, "contents": "Mushroom" },
                        { "macro": "Floor", "x": 296, "width": 16 },
                        { "thing": "Brick", "x": 296, "y": 64 },
                        { "macro": "Floor", "x": 328, "width": 128 },
                        { "macro": "Fill", "thing": "Brick", "x": 328, "y": 32, "xnum": 2 },
                        { "thing": "Brick", "x": 344, "y": 32, "contents": "Coin" },
                        { "macro": "Floor", "x": 472, "width": 120 },
                        { "macro": "Fill", "thing": "Coin", "x": 497, "y": 31, "xnum": 3, "xwidth": 8 },
                        { "thing": "Stone", "x": 552, "y": 8 },
                        { "thing": "Stone", "x": 560, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 568, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 576, "y": 32, "width": 16, "height": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 609, "y": 47, "xnum": 2, "xwidth": 8 },
                        { "macro": "Floor", "x": 616, "width": 128 },
                        { "thing": "Stone", "x": 672, "y": 16 },
                        { "thing": "Stone", "x": 680, "y": 24, "height": 16 },
                        { "thing": "Stone", "x": 696, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 704, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 712, "y": 56, "height": 56 },
                        { "thing": "Block", "x": 720, "y": 40, "contents": "Mushroom1Up", "hidden": true },
                        { "macro": "Fill", "thing": "Brick", "x": 720, "y": 56, "xnum": 3 },
                        { "macro": "Fill", "thing": "Brick", "x": 736, "y": 24, "xnum": 3 },
                        { "macro": "Floor", "x": 768, "width": 248 },
                        { "macro": "Pipe", "x": 816, "height": 24, "piranha": true },
                        { "macro": "Fill", "thing": "Coin", "x": 841, "y": 39, "xnum": 3, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Block", "x": 904, "y": 32, "ynum": 2, "yheight": 32, "hidden": true },
                        { "thing": "Stone", "x": 976, "y": 8 },
                        { "thing": "Stone", "x": 984, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 992, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1000, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1008, "y": 40, "height": 40 },
                        { "macro": "Fill", "thing": "Brick", "x": 1016, "y": 40, "xnum": 2 },
                        { "macro": "Fill", "thing": "Brick", "x": 1040, "y": 8, "xnum": 5 },
                        { "thing": "Brick", "x": 1048, "y": 40 },
                        { "macro": "Floor", "x": 1072, "width": 16 },
                        { "macro": "Floor", "x": 1096, "width": 96 },
                        { "thing": "Stone", "x": 1144, "y": 8 },
                        { "thing": "Stone", "x": 1152, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1160, "y": 16, "height": 24 },
                        { "thing": "Stone", "x": 1168, "y": 16, "height": 32 },
                        { "thing": "Stone", "x": 1176, "y": 16, "height": 40 },
                        { "thing": "Stone", "x": 1184, "y": 16, "height": 48 },
                        { "macro": "Fill", "thing": "Brick", "x": 1192, "y": 48, "xnum": 2 },
                        { "thing": "Brick", "x": 1208, "y": 32 },
                        { "macro": "Fill", "thing": "Brick", "x": 1216, "y": 16, "xnum": 3 },
                        { "thing": "Brick", "x": 1216, "y": 32, "contents": "Coin" },
                        { "macro": "Floor", "x": 1240, "width": 72 },
                        { "macro": "Floor", "x": 1336, "width": 56 },
                        { "thing": "Stone", "x": 1352, "y": 8 },
                        { "thing": "Stone", "x": 1360, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1368, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1376, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1384, "y": 40, "height": 40 },
                        { "macro": "Floor", "x": 1408, "width": 240 },
                        { "macro": "LakituStop", "x": 1408 },
                        { "thing": "Stone", "x": 1408, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 1484 }
                    ]
                }
            ]
        }, {
            "name": "6-2",
            "locations": [
                { "entry": "Plain" }, 
                { "entry": "PipeVertical" }, 
                { "entry": "PipeVertical" },
                { "xloc": 1304 }, 
                { "entry": "PipeVertical" },
                { "area": 1 }, { "area": 2 }, 
                { "area": 3, "entry": "Vine" },
                { "area": 4 }
            ],
            "areas": [
                {
                    "setting": "Overworld Night",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Floor", "width": 984 },
                        { "macro": "CastleSmall" },
                        { "macro": "Pattern", "pattern": "BackRegular", "repeat": 5 },
                        { "macro": "Fill", "thing": "Brick", "x": 80, "y": 32, "xnum": 3 },
                        { "macro": "Pipe", "x": 152, "height": 32, "piranha": true, "entrance": 5 },
                        { "thing": "Brick", "x": 184, "y": 64 },
                        { "thing": "Block", "x": 192, "y": 32, "hidden": true },
                        { "thing": "Brick", "x": 192, "y": 64, "contents": "Coin" },
                        { "thing": "Brick", "x": 200, "y": 64 },
                        { "thing": "Koopa", "x": 208, "y": 12 },
                        { "macro": "Pipe", "x": 224, "height": 32, "piranha": true },
                        { "thing": "Stone", "x": 256, "y": 40, "width": 16 },
                        { "macro": "Pipe", "x": 256, "y": 40, "height": 16, "piranha": true },
                        { "macro": "Pipe", "x": 280, "height": 16, "piranha": true, "exit": 1 },
                        { "macro": "Pipe", "x": 296, "height": 16, "piranha": true },
                        { "thing": "Koopa", "x": 344, "y": 32, "jumping": true },
                        { "macro": "Pipe", "x": 368, "height": 32, "piranha": true },
                        { "thing": "Brick", "x": 408, "y": 32 },
                        { "thing": "Brick", "x": 416, "y": 32, "contents": "Mushroom" },
                        { "thing": "Beetle", "x": 432, "y": 8.5 },
                        { "macro": "Pipe", "x": 448, "height": 40, "piranha": true, "transport": 6 },
                        { "thing": "Stone", "x": 496, "y": 32, "width": 16 },
                        { "macro": "Pipe", "x": 496, "y": 32, "height": 16, "piranha": true },
                        { "macro": "Pipe", "x": 536, "height": 16, "piranha": true },
                        { "macro": "Fill", "thing": "Brick", "x": 616, "y": 64, "xnum": 4 },
                        { "macro": "Pipe", "x": 640, "height": 24, "piranha": true },
                        { "thing": "Block", "x": 656, "y": 32, "hidden": true },
                        { "thing": "Brick", "x": 648, "y": 64, "contents": [ "Vine", { "transport": 7 } ] },
                        { "macro": "Pipe", "x": 672, "height": 16, "piranha": true },
                        { "macro": "Pipe", "x": 696, "height": 48, "piranha": true },
                        { "thing": "Beetle", "x": 736, "y": 8.5 },
                        { "macro": "Pipe", "x": 752, "height": 24, "piranha": true },
                        { "macro": "Pipe", "x": 816, "height": 32 },
                        { "macro": "Pipe", "x": 840, "height": 16, "piranha": true },
                        { "macro": "Fill", "thing": "Brick", "x": 880, "y": 32, "xnum": 2, "xwidth": 24 },
                        { "thing": "Stone", "x": 888, "y": 32, "width": 16 },
                        { "macro": "Pipe", "x": 888, "y": 32, "height": 24, "piranha": true },
                        { "macro": "Pipe", "x": 920, "height": 16, "piranha": true, "entrance": 2 },
                        { "thing": "Brick", "x": 920, "y": 64 },
                        { "macro": "Fill", "thing": "Brick", "x": 952, "y": 64, "xnum": 9 },
                        { "thing": "Beetle", "x": 950, "y": 72.5 },
                        { "macro": "Floor", "x": 1032, "width": 96 },
                        { "macro": "Pipe", "x": 1048, "height": 16, "piranha": true },
                        { "macro": "Pipe", "x": 1080, "height": 16, "piranha": true },
                        { "macro": "Fill", "thing": "Brick", "x": 1104, "y": 40, "xnum": 2 },
                        { "thing": "Brick", "x": 1120, "y": 64, "contents": "Star" },
                        { "thing": "Brick", "x": 1128, "y": 64 },
                        { "macro": "Floor", "x": 1136 },
                        { "macro": "Floor", "x": 1152, "width": 64 },
                        { "macro": "Fill", "thing": "Brick", "x": 1152, "y": 32, "xnum": 3 },
                        { "macro": "Fill", "thing": "Brick", "x": 1160, "y": 64, "xnum": 2 },
                        { "thing": "Stone", "x": 1192, "y": 8 },
                        { "thing": "Stone", "x": 1200, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1208, "y": 24, "height": 24 },
                        { "macro": "Floor", "x": 1224, "width": 696 },
                        { "macro": "Pipe", "x": 1224, "height": 24, "piranha": true, "transport": 8 },
                        { "thing": "Stone", "x": 1248, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1256, "y": 16, "height": 16 },
                        { "macro": "Fill", "thing": "Brick", "x": 1280, "y": 32, "xnum": 3, "ynum": 2, "yheight": 32 },
                        { "thing": "Beetle", "x": 1304, "y": 8.5 },
                        { "thing": "Stone", "x": 1336, "y": 32, "width": 16 },
                        { "macro": "Pipe", "x": 1336, "y": 32, "height": 24, "piranha": true },
                        { "thing": "Goomba", "x": 1352, "y": 8 },
                        { "macro": "Pipe", "x": 1392, "height": 32, "piranha": true },
                        { "macro": "Pipe", "x": 1432, "height": 16, "piranha": true, "entrance": 4 },
                        { "macro": "Pipe", "x": 1448, "height": 24, "piranha": true },
                        { "macro": "Pipe", "x": 1464, "height": 32, "piranha": true },
                        { "macro": "Pipe", "x": 1512, "height": 24, "piranha": true },
                        { "thing": "Stone", "x": 1592, "y": 8 },
                        { "thing": "Stone", "x": 1600, "y": 16, "height": 16 },
                        { "macro": "Pipe", "x": 1608, "height": 32, "piranha": true },
                        { "thing": "Stone", "x": 1624, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1632, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1640, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1648, "y": 64, "height": 64 },
                        { "thing": "Koopa", "x": 1648, "y": 84, "jumping": true },
                        { "macro": "EndOutsideCastle", "x": 1724 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 5 },
                        { "macro": "Ceiling", "x": 32, "width": 56 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 48, "xnum": 7 },
                        { "thing": "Brick", "x": 32, "y": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 42, "y": 55, "xnum": 5, "ynum": 2, "xwidth": 8, "yheight": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 80, "y": 56, "ynum": 4 },
                        { "macro": "Fill", "thing": "Brick", "x": 112, "y": 48, "contents": "Coin" },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }, {
                    "setting": "Underwater",
                    "blockBoundaries": true,
                    "underwater": true,
                    "creation": [
                        { "location": 6 },
                        { "macro": "Floor", "width": 176 },
                        { "thing": "Stone", "x": 88, "y": 56, "width": 40 },
                        { "thing": "Coral", "x": 96, "y": 24, "height": 24 },
                        { "thing": "Coral", "x": 1220, "y": 72, "height": 16 },
                        { "thing": "Blooper", "x": 136, "y": 24 },
                        { "thing": "Coral", "x": 160, "y": 32, "height": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 177, "y": 47, "xnum": 10, "xwidth": 8 },
                        { "macro": "PlatformGenerator", "x": 186, "width": 16 },
                        { "macro": "Floor", "x": 208, "y": 24, "width": 16 },
                        { "thing": "Stone", "x": 208, "y": 88, "width": 16, "height": 24 },
                        { "thing": "CheepCheep", "x": 220, "y": 60 },
                        { "macro": "PlatformGenerator", "x": 234, "width": 16 },
                        { "macro": "Floor", "x": 256, "y": 24, "width": 16 },
                        { "thing": "Stone", "x": 256, "y": 88, "width": 16, "height": 24 },
                        { "macro": "Floor", "x": 272, "width": 32 },
                        { "thing": "Blooper", "x": 272, "y": 24 },
                        { "thing": "Coral", "x": 304, "y": 64, "height": 32 },
                        { "thing": "Stone", "x": 304, "y": 72, "width": 48 },
                        { "thing": "CheepCheep", "x": 312, "y": 20 },
                        { "macro": "Floor", "x": 320, "width": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 321, "y": 7, "xnum": 2, "xwidth": 8 },
                        { "thing": "Coral", "x": 344, "y": 64, "height": 32 },
                        { "thing": "Blooper", "x": 348, "y": 22 },
                        { "macro": "Floor", "x": 352, "width": 168 },
                        { "thing": "Coral", "x": 368, "y": 16, "height": 16 },
                        { "thing": "CheepCheep", "x": 388, "y": 40, "smart": true },
                        { "thing": "Stone", "x": 400, "y": 32, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 401, "y": 39, "xnum": 4, "xwidth": 8 },
                        { "thing": "CheepCheep", "x": 424, "y": 84 },
                        { "thing": "Stone", "x": 432, "y": 56, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 433, "y": 63, "xnum": 4, "xwidth": 8 },
                        { "thing": "Stone", "x": 472, "y": 8 },
                        { "thing": "Stone", "x": 480, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 488, "y": 32, "width": 16, "height": 32 },
                        { "thing": "Stone", "x": 488, "y": 88, "width": 16, "height": 32 },
                        { "thing": "PipeHorizontal", "x": 496, "y": 48, "width": 16 },
                        { "thing": "Stone", "x": 504, "y": 88, "width": 16, "height": 88, "width": 16 }
                    ]
                }, {
                    "setting": "Sky Night",
                    "blockBoundaries": true,
                    "exit": 3,
                    "creation": [
                        { "location": 7 },
                        { "thing": "Stone", "width": 32 },
                        { "thing": "Stone", "x": 40, "width": 624 },
                        { "thing": "Platform", "x": 128, "y": 24, "width": 24, "transport": true },
                        { "macro": "Fill", "thing": "Coin", "x": 121, "y": 55, "xnum": 16, "xwidth": 8 },
                        { "thing": "Stone", "x": 256, "y": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 273, "y": 55, "xnum": 16, "xwidth": 8 },
                        { "thing": "Stone", "x": 408, "y": 48, "height": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 425, "y": 63, "xnum": 7, "xwidth": 8 },
                        { "thing": "Stone", "x": 488, "y": 48, "height": 16 },
                        { "thing": "Stone", "x": 536, "y": 56, "width": 16 },
                        { "macro": "Fill", "thing": "Stone", "x": 568, "y": 56, "xnum": 5, "xwidth": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 569, "y": 63, "xnum": 10, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 681, "y": 15, "xnum": 3, "xwidth": 8 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 8 },
                        { "macro": "Ceiling", "x": 32, "width": 88 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "x": 24, "y": 16, "ynum": 3 },
                        { "macro": "Fill", "thing": "Coin", "x": 25, "y": 39, "xnum": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 25, "y": 7, "xnum": 10 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 32, "xnum": 6 },
                        { "macro": "Fill", "thing": "Brick", "x": 80, "y": 16, "ynum": 3 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "width": 32 },
                        { "thing": "Brick", "x": 104, "y": 32, "contents": "Mushroom" },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }
            ]
        }, {
            "name": "6-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld Night Alt2",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "CastleSmall" },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 4 },
                        { "macro": "Floor", "width": 128 },
                        { "macro": "CastleSmall" },
                        { "macro": "Tree", "x": 144, "width": 24 },
                        { "macro": "Tree", "x": 168, "y": 32, "width": 24 },
                        { "macro": "Tree", "x": 192, "width": 24 },
                        { "thing": "Platform", "x": 224, "width": 16, "floating": true, "begin": 0, "end": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 226, "y": 87, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 248, "y": 32, "width": 32 },
                        { "macro": "Tree", "x": 296, "width": 24 },
                        { "thing": "Springboard", "x": 304, "y": 14.5 },
                        { "macro": "Tree", "x": 344, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 345, "y": 71, "xwidth": 7, "xwidth": 8 },
                        { "thing": "Platform", "x": 348, "y": 64, "width": 16, "sliding": true, "begin": 312, "end": 364 },
                        { "thing": "Platform", "x": 388, "y": 47, "width": 16, "sliding": true, "begin": 356, "end": 400 },
                        { "macro": "Tree", "x": 392, "y": 16, "width": 32 },
                        { "thing": "Block", "x": 440, "y": 80, "contents": "Mushroom" },
                        { "thing": "Platform", "x": 444, "y": 56, "width": 16, "sliding": true, "begin": 408, "end": 464 },
                        { "thing": "Platform", "x": 480, "y": 7, "width": 16, "floating": true, "begin": -8, "end": 52 },
                        { "macro": "Tree", "x": 520, "y": 32, "width": 40 },
                        { "macro": "Scale", "x": 572, "y": 86 },
                        { "macro": "Scale", "x": 636, "y": 86 },
                        { "macro": "Tree", "x": 680, "y": 24, "width": 40 },
                        { "macro": "Tree", "x": 680, "y": 80, "width": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 681, "y": 87, "xnum": 3, "xwidth": 8 },
                        { "macro": "Tree", "x": 720, "y": 40, "width": 24 },
                        { "macro": "Tree", "x": 744, "y": 0, "width": 24 },
                        { "macro": "Tree", "x": 776, "y": 0, "width": 32 },
                        { "macro": "Fill", "thing": "Coin", "x": 801, "y": 39, "xnum": 4, "xwidth": 8 },
                        { "macro": "Tree", "x": 824, "width": 24 },
                        { "macro": "Tree", "x": 856, "y": 32, "width": 40 },
                        { "macro": "Tree", "x": 904, "width": 40 },
                        { "thing": "Springboard", "x": 928, "y": 14.5 },
                        { "thing": "Platform", "x": 972, "y": 63, "width": 32, "sliding": true, "begin": 940, "end": 992 },
                        { "macro": "Tree", "x": 984, "width": 24 },
                        { "macro": "Scale", "x": 1020, "y": 86 },
                        { "macro": "Tree", "x": 1056, "width": 32 },
                        { "macro": "Tree", "x": 1056, "y": 64, "width": 24 },
                        { "macro": "Tree", "x": 1080, "y": 32, "width": 32 },
                        { "thing": "Platform", "x": 1128, "y": 47, "xnum": 2, "xwidth": 8 },
                        { "thing": "Platform", "x": 1192, "y": 39, "width": 16, "falling": true },
                        { "thing": "Platform", "x": 1223, "y": 47, "width": 16, "falling": true },
                        { "macro": "Fill", "thing": "Coin", "x": 1233, "y": 79, "xnum": 2, "xwidth": 8 },
                        { "macro": "Tree", "x": 1238, "y": 64, "width": 24 },
                        { "macro": "Floor", "x": 1280, "width": 256 },
                        { "macro": "EndOutsideCastle", "x": 1332, "large": true, "walls": 15 }
                    ]
                }
            ]
        }, {
            "name": "6-4",
            "time": 300,
            "locations": [
                { "entry": "Castle" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle" },
                        { "thing": "Stone", "y": 88, "width": 192, "height": 24 },
                        { "macro": "Floor", "x": 40, "y": 24, "width": 64 },
                        { "macro": "Water", "x": 104, "y": 8, "width": 16 },
                        { "macro": "Floor", "x": 120, "y": 24, "width": 88 },
                        { "thing": "Stone", "x": 184, "y": 64 },
                        { "thing": "CastleBlock", "x": 184, "y": 56, "fireballs": 6 },
                        { "thing": "Stone", "x": 192, "y": 88, "width": 1088 },
                        { "macro": "Water", "x": 208, "width": 24 },
                        { "thing": "Podoboo", "x": 216, "y": -32 },
                        { "macro": "Floor", "x": 232, "y": 24, "width": 24 },
                        { "thing": "CastleBlock", "x": 240, "y": 24, "fireballs": 6 },
                        { "thing": "Block", "x": 240, "y": 56, "contents": "Mushroom" },
                        { "macro": "Water", "x": 256, "width": 24 },
                        { "thing": "Podoboo", "x": 264, "y": -32 },
                        { "thing": "Stone", "x": 280, "y": 32, "width": 296 },
                        { "thing": "Stone", "x": 280, "y": 24, "width": 552, "height": 24 },
                        { "macro": "Floor", "x": 280, "width": 744 },
                        { "thing": "Stone", "x": 296, "y": 80, "width": 280, "height": 24 },
                        { "thing": "CastleBlock", "x": 296, "y": 56, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 392, "y": 56, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 480, "y": 56, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 536, "y": 56, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 608, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 640, "y": 80 },
                        { "thing": "CastleBlock", "x": 640, "y": 72, "fireballs": 6 },
                        { "thing": "CastleBlock", "x": 672, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 704, "y": 80 },
                        { "thing": "CastleBlock", "x": 704, "y": 72, "fireballs": 6, "direction": 1 },
                        { "thing": "CastleBlock", "x": 736, "y": 32, "fireballs": 6 },
                        { "thing": "Stone", "x": 776, "y": 80, "width": 56, "height": 16 },
                        { "macro": "Fill", "thing": "Block", "x": 848, "y": 32, "xnum": 3, "xwidth": 24, "contents": "Coin", "hidden": true },
                        { "macro": "Fill", "thing": "Block", "x": 856, "y": 64, "xnum": 3, "xwidth": 24, "contents": "Coin", "hidden": true },
                        { "thing": "Stone", "x": 928, "y": 24, "width": 32, "height": 24 },
                        { "thing": "Stone", "x": 984, "y": 24, "width": 40, "height": 24 },
                        { "thing": "Stone", "x": 984, "y": 80, "width": 40, "height": 16 },
                        { "macro": "EndInsideCastle", "x": 1024 }
                    ]
                }
            ]
        }, {
            "name": "7-1",
            "locations": [
                { "entry": "Plain" }, { "entry": "PipeVertical" }, { "area": 1 }
            ],
            "areas": [
                {
                    "setting": "Overworld Alt",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "CastleLarge", "x": -16 },
                        { "macro": "Pattern", "pattern": "BackFence", "repeat": 6 },
                        { "macro": "Floor", "width": 584 },
                        { "thing": "Cannon", "x": 152, "y": 16, "height": 16 },
                        { "thing": "Koopa", "x": 208, "y": 22, "flying": true },
                        { "thing": "Brick", "x": 216, "y": 64, "contents": "Mushroom" },
                        { "thing": "Cannon", "x": 224, "y": 8 },
                        { "thing": "Cannon", "x": 224, "y": 24, "height": 16 },
                        { "macro": "Fill", "thing": "Brick", "x": 224, "y": 64, "xnum": 2 },
                        { "thing": "Cannon", "x": 288, "y": 16, "height": 16 },
                        { "macro": "Fill", "thing": "Block", "x": 312, "y": 32, "xnum": 4 },
                        { "thing": "Koopa", "x": 352, "y": 28, "flying": true },
                        { "thing": "Cannon", "x": 368, "y": 24, "height": 24 },
                        { "thing": "Koopa", "x": 424, "y": 22, "flying": true },
                        { "thing": "Cannon", "x": 448, "y": 8 },
                        { "thing": "Cannon", "x": 448, "y": 24, "height": 16 },
                        { "macro": "Fill", "thing": "Brick", "x": 496, "y": 32, "xnum": 2 },
                        { "thing": "Stone", "x": 512, "y": 32 },
                        { "thing": "Cannon", "x": 512, "y": 48, "height": 16 },
                        { "thing": "Koopa", "x": 520, "y": 16, "flying": true },
                        { "thing": "Brick", "x": 520, "y": 32, "contents": "Coin" },
                        { "thing": "Brick", "x": 528, "y": 32 },
                        { "thing": "Cannon", "x": 544, "y": 16, "height": 16 },
                        { "macro": "Floor", "x": 600, "width": 616 },
                        { "macro": "Pipe", "x": 608, "height": 24, "piranha": true },
                        { "macro": "Fill", "thing": "Brick", "x": 656, "y": 32, "xnum": 7, "ynum": 2, "yheight": 23 },
                        { "thing": "HammerBro", "x": 680, "y": 44 },
                        { "thing": "HammerBro", "x": 692, "y": 76 },
                        { "macro": "Pipe", "x": 744, "height": 24, "piranha": true, "transport": 2 },
                        { "thing": "Block", "x": 744, "y": 64, "contents": "Mushroom1Up", "hidden": true },
                        { "thing": "Cannon", "x": 832, "Y": 16, "height": 16 },
                        { "macro": "Pipe", "x": 872, "height": 24, "piranha": true },
                        { "thing": "Koopa", "x": 912, "y": 12 },
                        { "macro": "Pipe", "x": 920, "height": 16, "piranha": true, "entrance": 1 },
                        { "thing": "Cannon", "x": 976, "y": 16, "height": 16 },
                        { "macro": "Pipe", "x": 1024, "height": 16, "piranha": true },
                        { "macro": "Fill", "thing": "Brick", "x": 1072, "y": 32, "xnum": 5, "ynum": 2, "yheight": 32 },
                        { "thing": "HammerBro", "x": 1080, "y": 12 },
                        { "thing": "HammerBro", "x": 1096, "y": 44 },
                        { "thing": "Stone", "x": 1128, "y": 24 },
                        { "thing": "Cannon", "x": 1168, "y": 24, "height": 16 },
                        { "macro": "Fill", "thing": "Brick", "x": 1192, "y": 40, "xnum": 2 },
                        { "thing": "Springboard", "x": 1208, "y": 14.5 },
                        { "thing": "Brick", "x": 1208, "y": 88, "contents": "Mushroom" },
                        { "macro": "Floor", "x": 1224, "width": 400 },
                        { "thing": "Stone", "x": 1224, "y": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 1224, "y": 56, "xnum": 2 },
                        { "thing": "Stone", "x": 1232, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1240, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1248, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1256, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1264, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1296, "y": 8 },
                        { "thing": "Stone", "x": 1304, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1312, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1320, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1328, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1336, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1344, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1352, "y": 64, "height": 64 },
                        { "thing": "Beetle", "x": 1352, "y": 72.5 },
                        { "macro": "EndOutsideCastle", "x": 1428 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Ceiling", "x": 32, "width": 56 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 8, "xnum": 7, "ynum": 3 },
                        { "macro": "Fill", "thing": "Coin", "x": 33, "y": 31, "xnum": 7, "ynum": 2, "xwidth": 8, "yheight": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 41, "y": 63, "xnum": 5, "xwidth": 8 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }
            ]
        }, {
            "name": "7-2",
            "locations": [
                { "entry": "Walking" },
                { "area": 1 }, 
                { "area": 2, "entry": "PipeVertical" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "CastleSmall" },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 2 },
                        { "macro": "Floor", "width": 192 },
                        { "macro": "CastleSmall" },
                        { "thing": "PipeHorizontal", "x": 80, "y": 16, "transport": 1 },
                        { "macro": "Pipe", "x": 96, "height": 32 }
                    ]
                }, {
                    "setting": "Underwater",
                    "blockBoundaries": true,
                    "underwater": true,
                    "creation": [
                        { "location": 1 },
                        { "macro": "Floor", "width": 536 },
                        { "thing": "Coral", "x": 96, "y": 24, "height": 24 },
                        { "macro": "Fill", "thing": "Coin", "x": 120, "y": 7, "xnum": 2, "xwidth": 8 },
                        { "thing": "Stone", "x": 152, "y": 32, "width": 24 },
                        { "thing": "Blooper", "x": 184, "y": 16 },
                        { "thing": "Blooper", "x": 208, "y": 46 },
                        { "macro": "Fill", "thing": "Coin", "x": 224, "y": 64, "xnum": 3, "xwidth": 8 },
                        { "thing": "Coral", "x": 272, "y": 40, "height": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 296, "y": 7, "xnum": 3, "xwidth": 8 },
                        { "thing": "Stone", "x": 344, "y": 32, "width": 16 },
                        { "thing": "Blooper", "x": 376, "y": 32 },
                        { "thing": "Coral", "x": 408, "y": 32, "height": 32 },
                        { "thing": "Blooper", "x": 424, "y": 46 },
                        { "thing": "Blooper", "x": 448, "y": 24 },
                        { "thing": "Stone", "x": 520, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 528, "y": 40, "height": 40 },
                        { "macro": "Fill", "thing": "Coin", "x": 546, "y": 23, "xnum": 3, "xwidth": 8 },
                        { "macro": "Floor", "x": 576, "y": 480 },
                        { "thing": "Stone", "x": 576, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 584, "y": 24, "height": 24 },
                        { "thing": "CheepCheep", "x": 616, "y": 24 },
                        { "thing": "Stone", "x": 632, "y": 24, "width": 16, "height": 24 },
                        { "thing": "Stone", "x": 532, "y": 88, "width": 16, "height": 24 },
                        { "thing": "Blooper", "x": 624, "y": 54 },
                        { "thing": "CheepCheep", "x": 640, "y": 48 },
                        { "thing": "CheepCheep", "x": 656, "y": 16 },
                        { "thing": "Stone", "x": 664, "y": 64, "height": 24 },
                        { "thing": "Blooper", "x": 672, "y": 40 },
                        { "thing": "Coral", "x": 672, "y": 80, "height": 16 },
                        { "thing": "Coral", "x": 720, "y": 24, "height": 24 },
                        { "thing": "Blooper", "x": 728, "y": 16 },
                        { "thing": "Blooper", "x": 760, "y": 80 },
                        { "thing": "CheepCheep", "x": 760, "y": 56 },
                        { "thing": "CheepCheep", "x": 784, "y": 80, "smart": true },
                        { "macro": "Fill", "thing": "Coin", "x": 816, "y": 15, "xnum": 3, "xwidth": 8 },
                        { "thing": "CheepCheep", "x": 816, "y": 24 },
                        { "thing": "Stone", "x": 824, "y": 32, "width": 16 },
                        { "thing": "Coral", "x": 824, "y": 64, "height": 32 },
                        { "thing": "Blooper", "x": 848, "y": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 912, "y": 55, "xnum": 3, "xwidth": 8 },
                        { "thing": "Stone", "x": 928, "y": 40, "width": 16 },
                        { "thing": "CheepCheep", "x": 944, "y": 72 },
                        { "thing": "Coral", "x": 968, "y": 32, "height": 32 },
                        { "thing": "CheepCheep", "x": 1032, "y": 24, "smart": true },
                        { "thing": "Stone", "x": 1040, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1048, "y": 16, "height": 16 },
                        { "thing": "CheepCheep", "x": 1056, "y": 16 },
                        { "thing": "Stone", "x": 1056, "y": 88, "height": 24 },
                        { "thing": "Stone", "x": 1064, "y": 72, "width": 64 },
                        { "thing": "Coin", "x": 1072, "y": 15 },
                        { "macro": "Fill", "thing": "Coin", "x": 1080, "y": 7, "xnum": 3, "xwidth": 8 },
                        { "thing": "Coin", "x": 1104, "y": 15 },
                        { "thing": "CheepCheep", "x": 1100, "y": 40 },
                        { "macro": "Floor", "x": 1128, "width": 136 },
                        { "thing": "Stone", "x": 1128, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1136, "y": 32, "height": 32 },
                        { "thing": "CheepCheep", "x": 1160, "y": 32 },
                        { "thing": "Coral", "x": 1184, "y": 16, "height": 16 },
                        { "thing": "Coral", "x": 1200, "y": 24, "height": 24 },
                        { "thing": "CheepCheep", "x": 1206, "y": 56, "smart": true },
                        { "thing": "Blooper", "x": 1208, "y": 38 },
                        { "thing": "Stone", "x": 1256, "y": 64, "height": 64 },
                        { "thing": "Stone", "x": 1264, "y": 64, "width": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 1281, "y": 32, "xnum": 3, "ynum": 2, "xwidth": 8, "yheight": -24 },
                        { "thing": "Stone", "x": 1304, "y": 64, "width": 16 },
                        { "macro": "Floor", "x": 1320, "width": 320 },
                        { "thing": "Stone", "x": 1320, "y": 64, "height": 64 },
                        { "thing": "CheepCheep", "x": 1320, "y": 80 },
                        { "thing": "CheepCheep", "x": 1344, "y": 16, "smart": true },
                        { "macro": "Fill", "thing": "Stone", "x": 1384, "y": 32, "ynum": 2, "yheight": 32, "width": 40 },
                        { "thing": "Blooper", "x": 1392, "y": 14 },
                        { "thing": "Coral", "x": 1392, "y": 80, "height": 16 },
                        { "thing": "CheepCheep", "x": 1408, "y": 40 },
                        { "thing": "Blooper", "x": 1440, "y": 14 },
                        { "macro": "Fill", "thing": "Stone", "x": 1448, "y": 32, "yum": 2, "Yheight": 32, "width": 32 },
                        { "thing": "CheepCheep", "x": 1472, "y": 72, "smart": true },
                        { "thing": "CheepCheep", "x": 1496, "y": 48, "smart": true },
                        { "thing": "Stone", "x": 1488, "y": 8, "width": 40 },
                        { "thing": "Stone", "x": 1496, "y": 16, "width": 32 },
                        { "thing": "Stone", "x": 1504, "y": 24, "width": 24 },
                        { "thing": "Stone", "x": 1512, "y": 32, "width": 16 },
                        { "thing": "Stone", "x": 1512, "y": 88, "width": 88 },
                        { "thing": "PipeHorizontal", "x": 1520, "y": 48, "width": 16 },
                        { "thing": "Stone", "x": 1528, "y": 88, "width": 112, "height": 88 }
                    ]
                }, {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Pattern", "pattern": "BackRegular", "x": 104 },
                        { "macro": "Floor", "width": 336 },
                        { "macro": "Pipe", "height": 16, "piranha": true, "entrance": 2 },
                        { "thing": "Stone", "x": 16, "y": 8 }, 
                        { "thing": "Stone", "x": 24, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 32, "y": 24, "height": 32 },
                        { "thing": "Stone", "x": 40, "y": 32, "height": 48 },
                        { "thing": "Stone", "x": 48, "y": 40, "height": 56 },
                        { "thing": "Stone", "x": 56, "y": 48, "height": 64 },
                        { "thing": "Stone", "x": 64, "y": 56, "height": 72 },
                        { "thing": "Stone", "x": 72, "y": 64, "height": 80 },
                        { "thing": "Stone", "x": 80, "y": 64, "height": 80 },
                        { "macro": "EndOutsideCastle", "x": 148 }
                    ]
                }
            ]
        }, {
            "name": "7-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Floor", "width": 56 },
                        { "macro": "CastleSmall" },
                        { "macro": "Pattern", "pattern": "BackCloud", "y": 4, "repeat": 5 },
                        { "macro": "CheepsStart", "x": 64 },
                        { "macro": "Tree", "x": 64, "width": 64 },
                        { "thing": "Stone", "x": 80, "y": 8 },
                        { "thing": "Stone", "x": 88, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 96, "y": 24, "height": 24, "width": 24 },
                        { "macro": "Bridge", "x": 120, "y": 24, "width": 136, "end": true },
                        { "macro": "Bridge", "x": 256, "y": 24, "width": 128, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 290, "y": 63, "xnum": 4, "xwidth": 8 },
                        { "thing": "Koopa", "x": 312, "y": 36 },
                        { "macro": "Bridge", "x": 384, "y": 24, "width": 128, "end": true },
                        { "thing": "Koopa", "x": 416, "y": 44, "flying": true },
                        { "macro": "Fill", "thing": "Coin", "x": 441, "y": 63, "xnum": 3, "xwidth": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 449, "y": 55, "xnum": 2, "xwidth": 16 },
                        { "macro": "Bridge", "x": 544, "y": 24, "width": 96, "begin": true, "end": true },
                        { "thing": "Koopa", "x": 632, "y": 36, "jumping": true },
                        { "macro": "Bridge", "x": 672, "y": 24, "width": 96, "begin": true, "end": true },
                        { "thing": "Koopa", "x": 760, "y": 36, "jumping": true },
                        { "macro": "Fill", "thing": "Coin", "x": 777, "y": 63, "xnum": 3 },
                        { "macro": "Bridge", "x": 792, "y": 32, "width": 56, "begin": true, "end": true },
                        { "thing": "Block", "x": 816, "y": 64, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Coin", "x": 865, "y": 63, "xnum": 3, "xwidth": 8 },
                        { "macro": "Tree", "x": 896, "width": 64 },
                        { "thing": "Koopa", "x": 952, "y": 12, "jumping": true },
                        { "macro": "Bridge", "x": 976, "y": 24, "width": 24 },
                        { "macro": "Bridge", "x": 1016, "y": 24, "width": 136, "begin": true, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 1064, "y": 63, "xnum": 6, "xwidth": 8 },
                        { "thing": "Koopa", "x": 1120, "y": 52, "flying": true },
                        { "macro": "Bridge", "x": 1168, "y": 8, "width": 80, "begin": true, "end": true },
                        { "macro": "Fill", "thing": "Coin", "x": 1193, "y": 39, "xnum": 4, "xwidth": 8 },
                        { "macro": "Bridge", "x": 1272, "y": 24, "width": 80, "begin": true, "end": true },
                        { "thing": "Koopa", "x": 1248, "y": 36, "flying": true },
                        { "macro": "Bridge", "x": 1368, "y": 24, "width": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 1385, "y": 55, "xnum": 6, "xwidth": 8 },
                        { "macro": "Bridge", "x": 1400, "y": 24, "width": 16 },
                        { "macro": "Bridge", "x": 1432, "y": 24, "width": 16 },
                        { "macro": "Bridge", "x": 1464, "y": 24, "width": 80, "begin": true },
                        { "macro": "Tree", "x": 1536, "width": 104 },
                        { "thing": "Stone", "x": 1544, "y": 24, "width": 16, "height": 24 },
                        { "thing": "Stone", "x": 1560, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1568, "y": 8 },
                        { "macro": "CheepsStop" },
                        { "macro": "Floor", "x": 1656, "width": 280 },
                        { "thing": "Stone", "x": 1664, "y": 8 },
                        { "thing": "Stone", "x": 1672, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1680, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 1688, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1696, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 1704, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 1712, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 1720, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 1796, "large": true, "walls": 7 }
                    ]
                }
            ]
        }, {
            "name": "7-4",
            "locations": [
                { "entry": "Castle" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle" },
                        { "thing": "Stone", "y": 88, "width": 128, "height": 24 },
                        { "macro": "Floor", "x": 40, "y": 24, "width": 88 },
                        { "macro": "Water", "x": 128, "width": 88 },
                        { "thing": "Stone", "x": 128, "y": 88, "width": 128 },
                        { "thing": "Platform", "x": 144, "y": 48, "width": 16, "falling": true },
                        { "thing": "Podoboo", "x": 160, "y": -32 },
                        { "thing": "Platform", "x": 176, "y": 40, "width": 16, "falling": true },
                        { "macro": "Floor", "x": 216, "y": 24, "width": 40 },
                        { "thing": "Stone", "x": 224, "y": 80, "width": 32, "height": 16 },
                        { "macro": "Section", "x": 256 }
                    ],
                    "sections": [
                        {
                            "before": {
                                "width": 48,
                                "creation": [
                                    { "macro": "Floor", "width": 48 },
                                    { "thing": "Stone", "y": 88, "width": 48 },
                                    { "thing": "Stone", "x": 16, "y": 32, "width": 32 },
                                    { "thing": "Stone", "x": 32, "y": 40, "width": 16 },
                                    { "thing": "Stone", "x": 40, "y": 48, "width": 8 },
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "macro": "SectionPass", "y": 24, "height": 24 },
                                    { "thing": "Stone", "y": 56, "height": 32 },
                                    { "macro": "SectionFail", "y": 80, "height": 24 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 24,
                                "creation": [
                                    { "macro": "Floor", "width": 24 },
                                    { "thing": "Stone", "y": 88, "width": 24 },
                                    { "macro": "Section", "x": 24, "section": 1 }
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "thing": "Stone", "y": 24 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "macro": "SectionFail", "y": 16, "height": 16 },
                                    { "thing": "Stone", "y": 24 },
                                    { "macro": "SectionPass", "y": 48, "height": 24 },
                                    { "thing": "Stone", "y": 56 },
                                    { "macro": "SectionFail", "y": 80, "height": 24 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 32,
                                "creation": [
                                    { "macro": "Floor", "width": 32 },
                                    { "thing": "Stone", "y": 24 },
                                    { "thing": "Stone", "y": 88, "width": 32 },
                                    { "macro": "Section", "x": 32, "section": 2 }
                                ]
                            }
                        },
                        {
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "macro": "SectionFail", "y": 24, "height": 24 },
                                    { "thing": "Stone", "y": 56, "height": 32 },
                                    { "macro": "SectionPass", "y": 80, "height": 24 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 80,
                                "creation": [
                                    { "macro": "Floor", "width": 80 },
                                    { "thing": "Stone", "y": 40 },
                                    { "thing": "Stone", "y": 48, "width": 16 },
                                    { "thing": "Stone", "y": 56, "width": 32 },
                                    { "thing": "Stone", "y": 88, "width": 80 },
                                    { "thing": "Stone", "x": 40, "y": 24, "width": 24, "height": 24 },
                                    { "macro": "SectionDecider", "x": 80, "pass": 3, "fail": 0 }
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 136,
                                "creation": [
                                    { "macro": "Floor", "y": 24, "width": 24 },
                                    { "thing": "Stone", "y": 88, "width": 136 },
                                    { "macro": "Floor", "x": 24, "width": 32 },
                                    { "thing": "Stone", "x": 48, "y": 56, "width": 16 },
                                    { "macro": "Water", "x": 56, "width": 24 },
                                    { "thing": "Stone", "x": 72, "y": 56, "width": 24 },
                                    { "macro": "Floor", "x": 80 },
                                    { "thing": "CastleBlock", "x": 80, "y": 48, "fireballs": 6, "direction": 1 },
                                    { "macro": "Water", "x": 88, "width": 24 },
                                    { "thing": "Stone", "x": 104, "y": 56, "width": 32 },
                                    { "macro": "Floor", "x": 112, "width": 24 }
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "SectionFail", "y": 24, "height": 24 },
                                    { "macro": "SectionPass", "y": 80, "height": 24 },
                                    { "macro": "Floor" },
                                    { "thing": "Stone", "y": 56, "height": 32 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 80,
                                "creation": [
                                    { "macro": "Section", "section": 4 }
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 64,
                                "creation": [
                                    { "macro": "Floor", "width": 64 },
                                    { "thing": "Stone", "y": 88, "width": 64 },
                                    { "thing": "Stone", "x": 16, "y": 56, "width": 24 },
                                    { "thing": "Stone", "x": 24, "y": 24, "width": 24 },
                                    { "thing": "Stone", "x": 56, "y": 56 }
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "thing": "Stone", "y": 24 },
                                    { "thing": "Stone", "y": 56 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 64,
                                "creation": [
                                    { "macro": "Floor", "width": 64 },
                                    { "thing": "Stone", "y": 24 },
                                    { "thing": "Stone", "y": 88, "width": 64 },
                                    { "thing": "Stone", "x": 24, "y": 56, "width": 24 },
                                    { "thing": "Stone", "x": 32, "y": 24, "width": 24 },
                                    { "macro": "Section", "x": 64, "section": 5 }
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 32,
                                "creation": [
                                    { "macro": "Floor", "width": 16 },
                                    { "thing": "Stone", "y": 56, "height": 32 },
                                    { "thing": "Stone", "y": 88, "width": 32 },
                                    { "thing": "Stone", "x": 8, "y": 56, "width": 24 },
                                    { "macro": "Floor", "x": 16, "y": 8 },
                                    { "macro": "Floor", "x": 24, "y": 16 },
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor", "y": 24 },
                                    { "macro": "SectionPass", "y": 80, "height": 24 },
                                    { "thing": "Stone", "y": 56 },
                                    { "macro": "SectionFail", "y": 48, "height": 24 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 56,
                                "creation": [
                                    { "macro": "Floor", "y": 24, "width": 56 },
                                    { "thing": "Stone", "y": 88, "width": 56 },
                                    { "macro": "SectionDecider", "x": 56, "y": 80, "height": 56, "pass": 6, "fail": 3 },
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 272,
                                "creation": [
                                    { "macro": "Floor", "width": 24 },
                                    { "thing": "Stone", "y": 88, "width": 272 },
                                    { "macro": "Floor", "x": 24, "y": 24, "width": 24 },
                                    { "macro": "Floor", "x": 48, "width": 16 },
                                    { "macro": "Floor", "x": 64, "y": 24, "width": 64 },
                                    { "macro": "Floor", "x": 128, "width": 16 },
                                    { "macro": "Floor", "x": 144, "y": 24, "width": 16 },
                                    { "macro": "Floor", "x": 160, "width": 16 },
                                    { "macro": "Floor", "x": 176, "y": 24, "width": 16 },
                                    { "macro": "Floor", "x": 192, "width": 16 },
                                    { "macro": "Floor", "x": 208, "y": 24, "width": 64 },
                                    { "macro": "EndInsideCastle", "x": 272 }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "8-1",
            "time": 300,
            "locations": [
                { "entry": "Plain" }, { "entry": "PipeVertical" }, { "area": 1 }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackFence", "repeat": 10 },
                        { "macro": "CastleLarge", "x": -16 },
                        { "macro": "Floor", "width": 368 },
                        { "thing": "Beetle", "x": 144, "y": 8.5 },
                        { "macro": "Fill", "thing": "Goomba", "x": 184, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 240, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Pipe", "x": 280, "height": 32, "piranha": true },
                        { "macro": "Fill", "thing": "Koopa", "x": 344, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "macro": "Floor", "x": 376 },
                        { "macro": "Floor", "x": 392, "width": 16 },
                        { "macro": "Floor", "x": 416, "width": 16 },
                        { "macro": "Floor", "x": 440, "width": 16 },
                        { "macro": "Floor", "x": 464, "width": 888 },
                        { "thing": "Koopa", "x": 488, "y": 12 },
                        { "thing": "Coin", "x": 513, "y": 39 },
                        { "macro": "Fill", "thing": "Goomba", "x": 552, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Pipe", "x": 608, "height": 32, "piranha": true },
                        { "thing": "Block", "x": 640, "y": 40, "contents": "Mushroom1Up", "hidden": true },
                        { "thing": "Beetle", "x": 648, "y": 8.5 },
                        { "macro": "Pipe", "x": 656, "height": 24, "piranha": true },
                        { "thing": "Coin", "x": 713, "y": 39 },
                        { "macro": "Pipe", "x": 752, "height": 32, "piranha": true },
                        { "thing": "Coin", "x": 786, "y": 39 },
                        { "macro": "Pipe", "x": 832, "height": 32, "piranha": true, "transport": 2 },
                        { "macro": "Fill", "thing": "Goomba", "x": 864, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Coin", "x": 873, "y": 71, "xnum": 2, "xwidth": 8 },
                        { "macro": "Pipe", "x": 920, "height": 16, "piranha": true, "entrance": 1 },
                        { "thing": "Koopa", "x": 952, "y": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 992, "y": 12, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1040, "y": 12, "xnum": 3, "xwidth": 12 },
                        { "macro": "Pipe", "x": 1120, "height": 24, "piranha": true },
                        { "macro": "Fill", "thing": "Goomba", "x": 1184, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "thing": "Stone", "x": 1224, "y": 32, "height": 32 },
                        { "macro": "Fill", "thing": "Brick", "x": 1232, "y": 64, "xnum": 4 },
                        { "thing": "Block", "x": 1264, "y": 32, "hidden": true },
                        { "thing": "Brick", "x": 1264, "y": 64, "contents": "Mushroom" },
                        { "macro": "Fill", "thing": "Brick", "x": 1272, "y": 64, "xnum": 3 },
                        { "thing": "Koopa", "x": 1288, "y": 32, "jumping": true },
                        { "thing": "Stone", "x": 1304, "y": 32, "height": 32 },
                        { "macro": "Floor", "x": 1360 },
                        { "macro": "Floor", "x": 1376, "width": 16 },
                        { "thing": "Koopa", "x": 1376, "y": 32, "jumping": true },
                        { "macro": "Floor", "x": 1400 },
                        { "macro": "Floor", "x": 1416, "width": 16 },
                        { "thing": "Koopa", "x": 1416, "y": 28, "jumping": true },
                        { "macro": "Floor", "x": 1416, "width": 16 },
                        { "macro": "Floor", "x": 1440, "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "x": 1472, "y": 40, "xnum": 2 },
                        { "thing": "Brick", "x": 1488, "y": 40, "contents": "Star" },
                        { "macro": "Fill", "thing": "Brick", "x": 1496, "y": 40, "xnum": 5 },
                        { "macro": "Floor", "x": 1584 },
                        { "macro": "Floor", "x": 1600 },
                        { "macro": "Floor", "x": 1616, "width": 152 },
                        { "macro": "Fill", "thing": "Koopa", "x": 1656, "y": 12, "xnum": 2, "xwidth": 12 },
                        { "thing": "Stone", "x": 1680, "y": 16, "height": 16 },
                        { "macro": "Fill", "thing": "Coin", "x": 1785, "y": 39, "xnum": 2, "xwidth": 8 },
                        { "macro": "Floor", "x": 1816, "width": 80 },
                        { "macro": "Fill", "thing": "Goomba", "x": 1856, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Floor", "x": 1904, "width": 16 },
                        { "macro": "Pipe", "x": 1904, "height": 24, "piranha": true },
                        { "macro": "Floor", "x": 1936, "height": 32, "piranha": true },
                        { "macro": "Floor", "x": 1968, "width": 1408 },
                        { "macro": "Pipe", "x": 1968, "height": 40 },
                        { "thing": "Beetle", "x": 2032, "y": 8.5 },
                        { "macro": "Fill", "thing": "Goomba", "x": 2056, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 2112, "y": 8, "xnum": 3, "xwidth": 12 },
                        { "macro": "Fill", "thing": "Goomba", "x": 2176, "y": 8, "xnum": 2, "xwidth": 12 },
                        { "thing": "Stone", "x": 2200, "y": 8 },
                        { "thing": "Stone", "x": 2208, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 2216, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 2224, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 2232, "y": 40, "height": 40 },
                        { "thing": "Stone", "x": 2240, "y": 48, "height": 48 },
                        { "thing": "Beetle", "x": 2264, "y": 8.5 },
                        { "macro": "Fill", "thing": "Coin", "x": 2265, "y": 39, "xnum": 2, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 2329, "y": 39, "xnum": 2, "xwidth": 40 },
                        { "macro": "Floor", "x": 2344, "width": 16 },
                        { "macro": "Floor", "x": 2384, "width": 128 },
                        { "macro": "Fill", "thing": "Stone", "x": 2424, "y": 16, "xnum": 2, "xwidth": 32, "height": 16 },
                        { "thing": "Koopa", "x": 2440, "y": 12 },
                        { "macro": "Fill", "thing": "Coin", "x": 2592, "y": 39, "xnum": 2, "xwidth": 8 },
                        { "thing": "Koopa", "x": 2656, "y": 12 },
                        { "macro": "Fill", "thing": "Koopa", "x": 2712, "y": 12, "xnum": 3, "xwidth": 12 },
                        { "macro": "Pipe", "x": 2752, "height": 24, "piranha": true },
                        { "macro": "Pipe", "x": 2840, "height": 16, "piranha": true },
                        { "macro": "Floor", "x": 2880 },
                        { "thing": "Stone", "x": 2880, "y": 16, "height": 16 },
                        { "macro": "Floor", "x": 2986 },
                        { "thing": "Stone", "x": 2896, "y": 32, "height": 32 },
                        { "macro": "Floor", "x": 2912 },
                        { "thing": "Stone", "x": 2912, "y": 48, "height": 48 },
                        { "macro": "Floor", "x": 2928, "width": 272 },
                        { "thing": "Stone", "x": 2928, "y": 64, "width": 16, "height": 64 },
                        { "macro": "EndOutsideCastle", "x": 3004 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 24, "y": 32, "xnum": 9 },
                        { "macro": "Fill", "thing": "Brick", "x": 24, "y": 64, "xnum": 10, "ynum": 4 },
                        { "macro": "Fill", "thing": "Coin", "x": 25, "y": 7, "xnum": 9, "xwidth": 8 },
                        { "macro": "Fill", "thing": "Coin", "x": 33, "y": 39, "xnum": 8, "xwidth": 8 },
                        { "thing": "Brick", "x": 96, "y": 32, "contents": "Coin" },
                        { "macro": "Fill", "thing": "Brick", "x": 104, "y": 24, "xnum": 2, "ynum": 9 },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "transport": 1 },
                        { "thing": "PipeVertical", "x": 120, "y": 100, "height": 100 }
                    ]
                }
            ]
        }, {
            "name": "8-2",
            "locations": [
                { "entry": "Plain" }, { "entry": "PipeVertical" }, { "area": 1 }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackFenceMin2", "repeat": 5 },
                        { "macro": "CastleSmall" },
                        { "macro": "Floor", "width": 120 },
                        { "macro": "Floor", "x": 128, "width": 40 },
                        { "thing": "Lakitu", "x": 128, "y": 84 },
                        { "thing": "Stone", "x": 136, "y": 8 },
                        { "thing": "Stone", "x": 144, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 152, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 160, "y": 32, "height": 32 },
                        { "macro": "Floor", "x": 176, "width": 112 },
                        { "thing": "Stone", "x": 176, "y": 48, "height": 48 },
                        { "thing": "Stone", "x": 184, "y": 56, "height": 56 },
                        { "thing": "Stone", "x": 192, "y": 64, "width": 16, "height": 64 },
                        { "macro": "Fill", "thing": "Block", "x": 232, "y": 32, "xnum": 4 },
                        { "macro": "Floor", "x": 296, "width": 64 },
                        { "thing": "Brick", "x": 344, "y": 64 },
                        { "thing": "Springboard", "x": 352, "y": 14.5 },
                        { "thing": "Brick", "x": 352, "y": 64, "contents": "Mushroom1Up" },
                        { "macro": "Fill", "thing": "Brick", "x": 360, "y": 64, "xnum": 31 },
                        { "macro": "Floor", "x": 368, "width": 32 },
                        { "macro": "Floor", "x": 408 },
                        { "macro": "Floor", "x": 424, "width": 24 },
                        { "macro": "Floor", "x": 456, "width": 48 },
                        { "thing": "Koopa", "x": 456, "y": 26, "jumping": true },
                        { "macro": "Floor", "x": 512, "width": 112 },
                        { "macro": "Fill", "thing": "Brick", "x": 616, "y": 32, "xnum": 2 },
                        { "thing": "PlantLarge", "x": 552, "y": 23 },
                        { "macro": "Floor", "x": 640, "width": 32 },
                        { "macro": "Floor", "x": 680, "width": 424 },
                        { "thing": "Cannon", "x": 680, "y": 16, "height": 16 },
                        { "thing": "Koopa", "x": 736, "y": 32, "jumping": true },
                        { "thing": "Cannon", "x": 744, "y": 8, "nofire": true },
                        { "thing": "Koopa", "x": 760, "y": 24, "jumping": true },
                        { "thing": "Brick", "x": 792, "y": 32 },
                        { "thing": "Brick", "x": 800, "y": 32, "contents": "Mushroom" },
                        { "thing": "Cannon", "x": 840, "y": 16, "height": 16 },
                        { "macro": "Brick", "x": 880, "y": 32, "xnum": 8 },
                        { "thing": "Fence", "x": 888, "y": 8 },
                        { "thing": "Beetle", "x": 888, "y": 8.5 },
                        { "thing": "Cannon", "x": 920, "y": 8 },
                        { "thing": "Brick", "x": 944, "y": 32 },
                        { "thing": "PlantLarge", "x": 936, "y": 23 },
                        { "thing": "Stone", "x": 952, "y": 32 },
                        { "thing": "Cannon", "x": 952, "y": 40 },
                        { "thing": "Brick", "x": 960, "y": 32, "contents": "Mushroom" },
                        { "thing": "Beetle", "x": 968, "y": 8.5 },
                        { "thing": "Beetle", "x": 984, "y": 8.5 },
                        { "thing": "Cannon", "x": 1000, "y": 24, "height": 24 },
                        { "macro": "Pipe", "x": 1048, "height": 16, "piranha": true },
                        { "macro": "Floor", "x": 1112, "width": 40 },
                        { "thing": "Koopa", "x": 1112, "y": 12, "jumping": true },
                        { "macro": "Pipe", "x": 1136, "height": 16, "piranha": true },
                        { "macro": "Floor", "x": 1160 },
                        { "macro": "Floor", "x": 1176 },
                        { "macro": "Floor", "x": 232, "width": 160 },
                        { "thing": "Fence", "x": 1272, "y": 8 },
                        { "macro": "Pipe", "x": 1248, "height": 32, "piranha": true, "transport": 2 },
                        { "macro": "Pipe", "x": 1304, "height": 16, "piranha": true, "entrance": 1 },
                        { "thing": "PlantLarge", "x": 1320, "y": 23 },
                        { "thing": "Koopa", "x": 1360, "y": 32, "jumping": true },
                        { "thing": "Koopa", "x": 1376, "y": 24, "jumping": true },
                        { "macro": "Floor", "x": 1400 },
                        { "thing": "Cannon", "x": 1400, "y": 16, "height": 16 },
                        { "thing": "Koopa", "x": 1400, "y": 48, "jumping": true },
                        { "macro": "Floor", "x": 1432, "width": 184 },
                        { "thing": "Stone", "x": 1456, "y": 8 },
                        { "thing": "Stone", "x": 1464, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1472, "y": 24, "height": 24 },
                        { "thing": "Goomba", "x": 1472, "y": 32 },
                        { "thing": "Stone", "x": 1480, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 1488, "y": 40, "height": 40 },
                        { "thing": "Goomba", "x": 1488, "y": 48 },
                        { "thing": "Beetle", "x": 1512, "y": 8.5 },
                        { "thing": "Cannon", "x": 1528, "y": 8, "nofire": true },
                        { "thing": "Cannon", "x": 1528, "y": 24, "height": 16 },
                        { "thing": "Stone", "x": 1592, "y": 8 },
                        { "thing": "Stone", "x": 1600, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1608, "y": 24, "height": 24 },
                        { "macro": "Floor", "x": 1624 },
                        { "thing": "Stone", "x": 1624, "y": 40, "height": 40 },
                        { "thing": "Koopa", "x": 1624, "y": 72, "jumping": true },
                        { "thing": "SceneryBlocker", "x": 1640, "y": 24, "width": 8, "height": 24 },
                        { "macro": "Floor", "x": 1648, "width": 320 },
                        { "macro": "LakituStop", "x": 1648 },
                        { "thing": "Stone", "x": 1648, "y": 64, "width": 16, "height": 80 },
                        { "thing": "PlantLarge", "x": 1704, "y": 32 },
                        { "macro": "EndOutsideCastle", "x": 1724 }
                    ]
                }, {
                    "setting": "Underworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 2 },
                        { "macro": "Ceiling", "x": 32, "width": 7 },
                        { "macro": "Floor", "width": 136 },
                        { "macro": "Fill", "thing": "Brick", "y": 8, "ynum": 11 },
                        { "macro": "Fill", "thing": "Brick", "x": 32, "y": 48, "xnum": 7 },
                        { "thing": "Brick", "x": 32, "y": 56 },
                        { "macro": "Fill", "thing": "Coin", "x": 42, "y": 55, "xnum": 5, "ynum": 2, "xwidth": 8, "yheight": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 80, "y": 56, "ynum": 4 },
                        { "macro": "Fill", "thing": "Brick", "x": 88, "y": 56, "xnum": 2 },
                        { "thing": "Brick", "x": 112, "y": 48, "contents": "Coin" },
                        { "thing": "PipeHorizontal", "x": 104, "y": 16, "transport": 1 },
                        { "thing": "PipeVertical", "x": 120, "y": 88, "height": 88 }
                    ]
                }
            ]
        }, {
            "name": "8-3",
            "time": 300,
            "locations": [
                { "entry": "Plain" }
            ],
            "areas": [
                {
                    "setting": "Overworld",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pattern", "pattern": "BackFenceMin3", "repeat": 3 },
                        { "macro": "CastleSmall" },
                        { "macro": "Floor", "width": 552 },
                        { "thing": "Fence", "x": 120, "y": 8, "width": 24 },
                        { "thing": "Cannon", "x": 144, "y": 16, "height": 16 },
                        { "thing": "CastleWall", "x": 192, "y": 48, "width": 64 },
                        { "thing": "Koopa", "x": 240, "y": 32, "jumping": true },
                        { "thing": "Cannon", "x": 272, "y": 24, "height": 24 },
                        { "thing": "CastleWall", "x": 296, "y": 48, "width": 112 },
                        { "macro": "Pipe", "x": 424, "height": 23, "piranha": true },
                        { "macro": "Fill", "thing": "Brick", "x": 480, "y": 32, "xnum": 8 },
                        { "macro": "Fill", "thing": "Brick", "x": 480, "y": 64, "xnum": 6 },
                        { "thing": "HammerBro", "x": 504, "y": 12 },
                        { "thing": "Fence", "x": 504, "y": 8, "width": 24 },
                        { "thing": "HammerBro", "x": 520, "y": 44 },
                        { "thing": "Brick", "x": 528, "y": 64, "contents": "Mushroom" },
                        { "thing": "Brick", "x": 536, "y": 64 },
                        { "macro": "Floor", "x": 568, "width": 32 },
                        { "thing": "Stone", "x": 568, "y": 32, "height": 32 },
                        { "thing": "Stone", "x": 576, "y": 24, "height": 24 },
                        { "thing": "Stone", "x": 584, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 592, "y": 8 },
                        { "macro": "Floor", "x": 616, "width": 376 },
                        { "thing": "CastleWall", "x": 632, "y": 48, "width": 48 },
                        { "thing": "Cannon", "x": 688, "y": 16, "height": 16 },
                        { "thing": "Fence", "x": 696, "y": 8 },
                        { "thing": "CastleWall", "x": 704, "y": 48, "width": 48 },
                        { "thing": "Koopa", "x": 744, "y": 24, "jumping": true },
                        { "thing": "Stone", "x": 760, "y": 24, "height": 24 },
                        { "thing": "CastleWall", "x": 776, "y": 48, "width": 80 },
                        { "thing": "Stone", "x": 872, "y": 32, "width": 16, "height": 32 },
                        { "thing": "Fence", "x": 888, "y": 8, "width": 24 },
                        { "macro": "Fill", "thing": "Brick", "x": 920, "y": 32, "xnum": 8 },
                        { "thing": "Brick", "x": 920, "y": 64 },
                        { "thing": "Brick", "x": 928, "y": 64, "contents": "Mushroom" },
                        { "thing": "HammerBro", "x": 936, "y": 44 },
                        { "macro": "Fill", "thing": "Brick", "x": 936, "y": 64, "xnum": 6 },
                        { "thing": "HammerBro", "x": 952, "y": 12 },
                        { "macro": "Floor", "x": 1008, "width": 16 },
                        { "macro": "Pipe", "x": 1008, "height": 23, "piranha": true },
                        { "macro": "Floor", "x": 1040, "width": 536 },
                        { "thing": "CastleWall", "x": 1056, "y": 48, "width": 272 },
                        { "thing": "Koopa", "x": 1096, "y": 12 },
                        { "thing": "HammerBro", "x": 1168, "y": 12 },
                        { "thing": "HammerBro", "x": 1270, "y": 12 },
                        { "thing": "Cloud1", "x": 1296, "y": 80 },
                        { "thing": "PlantSmall", "x": 1336, "y": 16 },
                        { "macro": "Pipe", "x": 1344, "height": 24, "piranha": true },
                        { "thing": "Cloud1", "x": 1372, "y": 88 },
                        { "thing": "CastleWall", "x": 1376, "y": 48, "width": 160 },
                        { "thing": "Cloud2", "x": 1396, "y": 80 },
                        { "thing": "HammerBro", "x": 1416, "y": 12 },
                        { "thing": "HammerBro", "x": 1480, "y": 12 },
                        { "thing": "Cloud1", "x": 1516, "y": 88 },
                        { "thing": "Brick", "x": 1520, "y": 32, "contents": "Coin" },
                        { "thing": "Cloud2", "x": 1540, "y": 80 },
                        { "thing": "Stone", "x": 1560, "y": 16, "height": 16 },
                        { "thing": "Stone", "x": 1584, "y": 16 },
                        { "thing": "Stone", "x": 1600, "y": 32 },
                        { "thing": "Stone", "x": 1616, "y": 48 },
                        { "thing": "Stone", "x": 1632, "y": 64, "width": 16 },
                        { "macro": "Floor", "x": 1664, "width": 256 },
                        { "thing": "Fence", "x": 1664, "y": 8, "width": 16 },
                        { "thing": "Cloud1", "x": 1684, "y": 80 },
                        { "thing": "PlantLarge", "x": 1704, "y": 23 },
                        { "macro": "EndOutsideCastle", "x": 1712, "castleDistance": 48, "large": true, "walls": 13 },
                        { "thing": "PlantSmall", "x": 1720, "y": 15 },
                        { "thing": "PlantSmall", "x": 1728, "y": 15 },
                        { "thing": "Cloud1", "x": 1756, "y": 88 },
                        { "thing": "Cloud1", "x": 1900, "y": 88 }
                    ]
                }
            ]
        }, {
            "name": "8-4",
            "locations": [
                { "entry": "Castle" }, { "entry": "PipeVertical" }, { "area": 1, "entry": "PipeVertical" }, { "area": 2, "entry": "PipeVertical" }, { "area": 3, "entry": "PipeVertical", "x": 24 },
                // { "area": 4, "entry": "PipeVertical" }
            ],
            "areas": [
                {
                    "setting": "Castle",
                    "creation": [
                        { "location": 0 },
                        { "macro": "StartInsideCastle" },
                        { "thing": "Stone", "y": 88, "width": 256 },
                        { "macro": "Floor", "x": 40, "y": 24 },
                        { "macro": "Water", "x": 48, "width": 40 },
                        { "macro": "Floor", "x": 88, "width": 64 },
                        { "macro": "Pipe", "x": 152, "y": 16, "height": "Infinity", "piranha": true, "entrance": 1 },
                        { "macro": "Floor", "x": 168, "width": 88 },
                        { "macro": "Section", "x": 256 }
                    ],
                    "sections": [
                        {
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "thing": "Stone", "y": 88 },
                                    { "macro": "SectionFail", "y": 80, "height": 80 },
                                ]
                            },
                            "after": {
                                "width": 424,
                                "creation": [
                                    { "macro": "Pipe", "y": 16, "height": "Infinity", "piranha": true, "transport": 1 },
                                    { "macro": "Floor", "x": 16, "width": 72 },
                                    { "macro": "Fill", "thing": "Goomba", "x": 36, "y": 8, "xnum": 3, "xwidth": 12 },
                                    { "macro": "Floor", "x": 88, "y": 24, "width": 32 },
                                    { "macro": "Water", "x": 120, "width": 136 },
                                    { "thing": "Platform", "x": 152, "width": 16, "sliding": true, "begin": 140, "end": 232, "speed": 2 },
                                    { "macro": "Floor", "x": 256, "y": 24, "width": 48 },
                                    { "thing": "Stone", "x": 264, "y": 56, "width": 32 },
                                    { "macro": "Pipe", "x": 304, "y": 40, "height": "Infinity", "piranha": true, "transport": 2 },
                                    { "macro": "Floor", "x": 320, "y": 24, "width": 56 },
                                    { "macro": "Pipe", "x": 376, "y": 48, "height": "Infinity", "piranha": true },
                                    { "macro": "Floor", "x": 392, "y": 24, "width": 32 },
                                ]
                            }
                        },
                    ]
                }, {
                    "setting": "Castle",
                    "creation": [
                        { "location": 2 },
                        { "macro": "Section" }
                    ],
                    "sections": [
                        {
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor" },
                                    { "thing": "Stone", "y": 88 },
                                ]
                            },
                            "after": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Section" }
                                ]
                            }
                        },
                        {
                            "before": {
                                "width": 256,
                                "creation": [
                                    { "macro": "SectionFail", "y": 80, "width": 40, "height": 80 },
                                    { "macro": "Pipe", "y": 16, "height": "Infinity", "piranha": true, "entrance": 2 },
                                    { "thing": "Stone", "y": 88, "width": 45 },
                                    { "macro": "Floor", "x": 16, "width": 40 },
                                    { "macro": "Pipe", "x": 56, "y": 24, "height": "Infinity", "piranha": true },
                                    { "macro":" Floor", "x": 72, "width": 64 },
                                    { "macro": "Fill", "thing": "Beetle", "x": 104, "y": 8.5, "xnum": 2, "xwidth": 16 },
                                    { "macro": "Pipe", "x": 136, "y": 16, "height": "Infinity", "piranha": true, "transport": 1 },
                                    { "macro": "Floor", "x": 152, "width": 64 },
                                    { "thing": "Koopa", "x": 192, "y": 32, "jumping": true },
                                    { "thing": "Koopa", "x": 208, "y": 24, "jumping": true },
                                    { "macro": "Pipe", "x": 216, "y": 24, "height": "Infinity", "piranha": true },
                                    { "macro": "Water", "x": 232, "width": 24 },
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "thing": "Stone", "y": 88 },
                                    { "macro": "Floor" }
                                ]
                            },
                            "after": {
                                "width": 348,
                                "creation": [
                                    { "macro": "Floor", "width": 104 },
                                    { "thing": "Block", "x": 280, "y": 32, "hidden": true },
                                    { "thing": "Stone", "x": 296, "y": 32, "width": 16 },
                                    { "macro": "Pipe", "x": 296, "y": 32, "height": 24, "piranha": true, "transport": 3 },
                                    { "thing": "Koopa", "x": 320, "y": 20, "jumping": true },
                                    { "thing": "Koopa", "x": 336, "y": 24, "jumping": true },
                                ]
                            }
                        },
                    ]
                }, {
                    "setting": "Castle",
                    "creation": [
                        { "location": 3 },
                        { "macro": "Floor", "width": 24 },
                        { "thing": "Stone", "y": 88, "width": 24 },
                        { "macro": "Section", "x": 24 }
                    ],
                    "sections": [
                        {
                            "before": {
                                "width": 280,
                                "creation": [
                                    { "macro": "SectionFail", "y": 80, "width": 40, "height": 80 },
                                    { "macro": "Pipe", "y": 16, "height": "Infinity", "piranha": true, "entrance": 3 },
                                    { "thing": "Stone", "y": 88, "width": 38 },
                                    { "macro": "Floor", "x": 16 },
                                    { "macro": "Floor", "x": 24, "y": 24, "width": 48 },
                                    { "macro": "Pipe", "x": 72, "y": 40, "height": "Infinity", "piranha": true },
                                    { "macro": "CheepsStart", "x": 88, "y": 24, "width": 48 },
                                    { "macro": "Pipe", "x": 136, "y": 48, "height": "Infinity", "piranha": true, "transport": 1 },
                                    { "macro": "Floor", "x": 152, "y": 24, "width": 48 },
                                    { "macro": "Water", "x": 200, "width": 32 },
                                    { "macro": "Floor", "x": 232, "y": 24, "width": 32 },
                                    { "macro": "Pipe", "x": 264, "y": 40, "height": "Infinity", "piranha": true, "transport": 4 },
                                ]
                            },
                            "stretch": {
                                "width": 8,
                                "creation": [
                                    { "macro": "Floor", "y": 24 },
                                    { "thing": "Stone", "y": 88 }
                                ]
                            },
                            "after": {
                                "width": 24,
                                "creation": [
                                    { "macro": "Floor", "width": 24 }
                                ]
                            }
                        }
                    ]
                }, {
                    "setting": "Underwater Castle",
                    "blockBoundaries": true,
                    "underwater": true,
                    "creation": [
                        { "location": 4 },
                        { "macro": "Floor", "y": 88, "width": 16 },
                        { "macro": "Floor", "x": 16 },
                        { "macro": "Pipe", "x": 24, "y": 16, "height": "Infinity", "entrance": 4 },
                        { "macro": "Floor", "x": 40, "width": 536 },
                        { "thing": "Stone", "x": 48, "y": 24, "width": 40, "height": 24 },
                        { "thing": "Stone", "x": 48, "y": 80, "width": 40, "height": 16 },
                        { "thing": "Stone", "x": 48, "y": 88, "width": 528 },
                        { "thing": "Stone", "x": 88, "y": 32, "width": 56, "height": 32 },
                        { "thing": "Stone", "x": 88, "y": 80, "width": 56, "height": 24 },
                        { "thing": "CastleBlock", "x": 160, "y": 46, "fireballs": 6, "hidden": true },
                        { "thing": "Blooper", "x": 224, "y": 16 },
                        { "thing": "CastleBlock", "x": 248, "y": 22, "fireballs": 6, "hidden": true },
                        { "thing": "Stone", "x": 312, "y": 24, "width": 24, "height": 24 },
                        { "thing": "Stone", "x": 312, "y": 80, "width": 24, "height": 24 },
                        { "thing": "CastleBlock", "x": 320, "y": 54, "fireballs": 6, "hidden": true },
                        { "thing": "Blooper", "x": 408, "y": 24 },
                        { "thing": "Blooper", "x": 424, "y": 56 },
                        { "thing": "CastleBlock", "x": 446, "y": 38, "fireballs": 6, "hidden": true },
                        { "thing": "CastleBlock", "x": 512, "y": 44, "fireballs": 6, "hidden": true },
                        { "thing": "Stone", "x": 536, "y": 32, "width": 40, "height": 32 },
                        { "thing": "Stone", "x": 536, "y": 80, "width": 40, "height": 24 },
                        { "thing": "PipeHorizontal", "x": 544, "y": 48, "width": 40 },
                        { "thing": "Stone", "x": 552, "y": 56, "width": 24, "height": 24 }
                    ]
                }, {
                    "setting": "Castle",
                    "blockBoundaries": true,
                    "creation": [
                        { "location": 5 },
                        { "macro": "Pipe", "y": 16, "height": "Infinity", "piranha": true, "entrance": 5 },
                        { "thing": "Stone", "y": 88, "width": 224 },
                        { "macro": "Floor", "x": 16, "width": 40 },
                        { "macro": "Pipe", "x": 56, "y": 16, "height": "Infinity", "piranha": true },
                        { "macro": "Floor", "x": 72, "width": 72 },
                        { "thing": "HammerBro", "x": 112, "y": 12 },
                        { "macro": "Water", "x": 128, "width": 56 },
                        { "thing": "Podoboo", "x": 160, "y": -32 },
                        { "macro": "Floor", "x": 184, "y": 24, "width": 48 },
                        { "thing": "Stone", "x": 184, "y": 80, "width": 48, "height": 16 },
                        { "macro": "EndInsideCastle", "x": 232 }
                    ]
                }
            ]
        }, {
            "name": "Random",
            "locations": {
                "0": { "entry": "Plain", "area": "Overworld" },
                "Overworld": { "entry": "Plain", "area": "Overworld" },
                "OverworldFromSky": { "area": "Overworld" },
                "OverworldFromPipe": { "entry": "PipeVertical", "area": "OverworldWithPipe" },
                "Underworld": { "area": "Underworld" },
                "Sky": { "entry": "Vine", "area": "Sky" },
                "Castle": { "entry": "Castle", "area": "Castle" }
            },
            "areas": {
                "Overworld": {
                    "setting": "Overworld",
                    "random": true,
                    "creation": [
                        { "location": 0 },
                        { "thing": "RandomSpawner", "x": 0, "y": 0, "randomization": "Overworld", "randomTop": 80, "randomWidth": 2800, "randomBottom": -8 }
                    ]
                },
                "OverworldWithPipe": {
                    "setting": "Overworld",
                    "random": true,
                    "creation": [
                        { "location": 0 },
                        { "macro": "Pipe", "entrance": "OverworldFromPipe", "height": 16 },
                        { "thing": "RandomSpawner", "x": 0, "y": 0, "randomization": "Overworld", "randomTop": 80, "randomWidth": 1520, "randomBottom": -8 }
                    ]
                },
                "Underworld": {
                    "setting": "Underworld",
                    "random": true,
                    "creation": [
                        { "location": 0 },
                        { "thing": "RandomSpawner", "x": 0, "y": 0, "randomization": "Underworld", "randomTop": 80, "randomWidth": 2800, "randomBottom": -8 }
                    ]
                },
                "Sky": {
                    "setting": "Sky",
                    "random": true,
                    "exit": "OverworldFromSky",
                    "creation": [
                        { "location": 0 },
                        { "thing": "RandomSpawner", "x": 0, "y": 0, "randomization": "Sky", "randomTop": 80, "randomWidth": 2800, "randomBottom": -8 }
                    ]
                },
                "Castle": {
                    "setting": "Castle",
                    "random": true,
                    "creation": [
                        { "location": 0 },
                        { "thing": "RandomSpawner", "x": 0, "y": 0, "randomization": "Castle", "randomTop": 80, "randomWidth": 2000, "randomBottom": -8 }
                    ]
                }
            }
        }
    ])
};
FullScreenMario.prototype.settings.mods = {
    "storeLocally": true,
    "prefix": "FullScreenMario::Mods::",
    "mods": [
        {
            "name": "Bouncy Bounce",
            "description": "Mario landing causes him to jump.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onPlayerLanding": function (mod) {
                    var player = this.player;
                    
                    // Don't trigger during cutscenes or small landings
                    if (
                        player.EightBitter.MapScreener.nokeys
                        || Math.abs(player.yvel) < player.EightBitter.unitsize / 4
                    ) {
                        return;
                    }
                    
                    if (player.resting.actionTop) {
                        player.resting.actionTop(player, player.resting);
                    }
                    
                    player.jumpcount = 0;
                    player.resting = undefined;
                    player.yvel = -3 * player.EightBitter.unitsize;
                },
                "onPlayerActionLeft": function (mod, player, other) {
                    other.actionLeft(player, other, true);
                }
            },
        }, {
            "name": "Earthquake!",
            "description": "Mario landing causes everything else to jump.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onPlayerLanding": (function () {
                    var shiftLevels = [2, 1.5, 1, .5, 0, -.5, -1, -1.5, -2],
                        shiftCount = 0,
                        shiftAll = function (EightBitter, solids, scenery, characters) {
                            var dy = shiftLevels[shiftCount];
                            
                            if (dy < 0) {
                                EightBitter.shiftVert(EightBitter.player, dy);
                            }
                            
                            EightBitter.shiftThings(solids, 0, dy);
                            EightBitter.shiftThings(scenery, 0, dy);
                            EightBitter.shiftThings(characters, 0, dy);
                            
                            shiftCount += 1;
                            if (shiftCount >= shiftLevels.length) {
                                shiftCount = 0;
                                return true;
                            }
                        };
                    
                    return function (mod) {
                        var characters = this.GroupHolder.getCharacterGroup(),
                            player = this.player,
                            character, i;
                    
                        // Don't trigger during cutscenes or small landings
                        if (
                            player.EightBitter.MapScreener.nokeys
                            || Math.abs(player.yvel) < player.EightBitter.unitsize / 4
                        ) {
                            return;
                        }
                        
                        this.AudioPlayer.play("Bump");
                        
                        for (i = 0; i < characters.length; i += 1) {
                            character = characters[i];
                            if (character.player || character.nofall || !character.resting) {
                                continue;
                            }
                            
                            character.resting = undefined;
                            character.yvel = player.EightBitter.unitsize * -1.4;
                        }
                        
                        // A copy of each group is made because new Things 
                        // added in shouldn't start being moved in the middle
                        if (shiftCount === 0) {
                            this.TimeHandler.addEventInterval(
                                shiftAll, 1, Infinity, this,
                                this.GroupHolder.getSolidGroup().slice(),
                                this.GroupHolder.getSceneryGroup().slice(),
                                this.GroupHolder.getCharacterGroup().slice()
                            );
                        }
                    }
                })()
            }
        }, {
            "name": "Gradient Skies",
            "description": "Skies fade out to black in the heavens above.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function (mod) {
                    if (this.MapsHandler.getMap()) {
                        mod.events.onSetLocation.call(this, mod);
                    }
                },
                "onModDisable": function (mod) {
                    var area = this.MapsHandler.getArea();
                    
                    area.background = mod.settings.backgroundOld;
                    this.PixelDrawer.setBackground(area.background);
                },
                "onSetLocation": (function (gradients) {
                    return function (mod) { 
                        var area = this.MapsHandler.getArea(),
                            setting = area.setting,
                            context = this.canvas.getContext("2d"),
                            background = context.createLinearGradient(
                                0, 0,
                                this.MapScreener.width,
                                this.MapScreener.height
                            ), gradient, i;
                        
                        for (i in gradients) {
                            if (setting.indexOf(i) !== -1) {
                                gradient = gradients[i]
                                break;
                            }
                        }
                        
                        if (!gradient) {
                            gradient = gradients["default"];
                        }
                        
                        for (i in gradient) {
                            background.addColorStop(i, gradient[i]);
                        }
                        
                        mod.settings.backgroundOld = area.background;
                        
                        area.background = background;
                        
                        this.PixelDrawer.setBackground(area.background);
                    };
                })({
                    "Underwater": {
                        "0": "#357749",
                        "1": "#2149CC"
                    },
                    "Night": {
                        "0": "#000000",
                        "0.49": "#000028",
                        "0.84": "#210028",
                        "1": "#210021"
                    },
                    "Underworld": {
                        "0.35": "#000000",
                        "1": "#003528"
                    },
                    "Castle": {
                        "0.21": "#000000",
                        "1": "#700000"
                    },
					"Womb": {
						"0.21": "#703521",
						".7": "#770014",
                        "1": "#AA0035"
					},
                    "default": {
                        ".21": "#5C94FC",
                        ".49": "#77AAFF",
                        "1": "#FFCCAA"
                    }
                })
            },
            "settings": {}
        }, {
            // http://www.themushroomkingdom.net/smb_breakdown.shtml#hard
            "name": "Hard Mode",
            "description": "Like in Super Mario Bros Deluxe!",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onAddThing": function (mod, thing) {
                    var spawn;
                    if (thing.title === "Goomba") {
                        spawn = thing.EightBitter.killReplace(
                            thing,
                            "Beetle", 
                            undefined,
                            [ "direction", "moveleft", "lookleft", "xvel", "yvel", "speed" ]
                        );
                        spawn.mod = "Hard Mode";
                    }
                    else if (thing.title === "Platform") {
                        thing.EightBitter.reduceWidth(thing, thing.EightBitter.unitsize * 8, true);
                        thing.EightBitter.shiftHoriz(thing, thing.EightBitter.unitsize * 4);
                    }
                    
                    if (thing.grouptype === "Character") {
                        thing.speed *= 1.4;
                    }
                },
                "onModEnable": function (mod) {
                    var EightBitter = EightBittr.ensureCorrectCaller(this),
                        characters = EightBitter.GroupHolder.getCharacterGroup(),
                        solids = EightBitter.GroupHolder.getSolidGroup(),
                        attributes = ["direction", "moveleft", "lookleft", "xvel", "yvel", "speed"],
                        spawn, thing, i;
                    
                    for (i = 0; i < characters.length; i += 1) {
                        thing = characters[i];
                        if (thing.title === "Goomba") {
                            spawn = thing.EightBitter.killReplace(
                                thing, 
                                "Beetle", 
                                undefined,
                                attributes
                            );
                            spawn.mod = "Hard Mode";
                            if (thing.xvel > 0) {
                                spawn.EightBitter.flipHoriz(spawn);
                            } else {
                                spawn.EightBitter.unflipHoriz(spawn);
                            }
                        }
                        thing.speed *= 1.4;
                    }
                    
                    for(i = 0; i < solids.length; i += 1) {
                        thing = solids[i];
                        if(thing.title === "Platform") {
                            thing.EightBitter.reduceWidth(thing, thing.EightBitter.unitsize * 8, true);
                            thing.EightBitter.shiftHoriz(thing, thing.EightBitter.unitsize * 4);
                        }
                    }
                },
                "onModDisable": function (mod) {
                    var EightBitter = EightBittr.ensureCorrectCaller(this),
                        characters = EightBitter.GroupHolder.getCharacterGroup(),
                        solids = EightBitter.GroupHolder.getSolidGroup(),
                        attributes = ["direction", "moveleft", "lookleft", "xvel", "yvel", "speed"],
                        thing, i;
                    
                    for (i = 0; i < characters.length; i += 1) {
                        thing = characters[i];
                        if (thing.title === "Beetle" && thing.mod === "Hard Mode") {
                            thing.EightBitter.killReplace(
                                thing, 
                                "Goomba", 
                                undefined,
                                attributes
                            );
                        } else {
                            thing.speed /= 1.4;
                        }
                    }
                    
                    for (i = 0; i < solids.length; i += 1) {
                        thing = solids[i];
                        if (thing.title === "Platform") {
                            thing.EightBitter.increaseWidth(thing, thing.EightBitter.unitsize * 8);
                            thing.EightBitter.shiftHoriz(thing, thing.EightBitter.unitsize * -4);
                        }
                    }
                }
            }
        }, {
            "name": "High Speed",
            "description": "Mario's maximum speed is quadrupled.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function (mod) {
                    var stats = this.ObjectMaker.getFunction("Player").prototype,
                        keyNames = mod.settings.keyNames,
                        multiplier = mod.settings.multiplier,
                        i;
                    
                    for (i = 0; i < keyNames.length; i += 1) {
                        mod.settings[keyNames[i]] = stats[keyNames[i]];
                        stats[keyNames[i]] *= multiplier;
                    }
                },
                "onModDisable": function (mod) {
                    var stats = this.ObjectMaker.getFunction("Player").prototype,
                        keyNames = mod.settings.keyNames,
                        i;
                    
                    for (i = 0; i < keyNames.length; i += 1) {
                        stats[keyNames[i]] = mod.settings[keyNames[i]];
                    }
                }
            },
            "settings": {
                "keyNames": ["maxspeedsave", "maxspeed", "scrollspeed"],
                "multiplier": 14
            }
        }, {
            "name": "Invincibility",
            "description": "Mario is constantly given star power.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function () {
                    if (this.player) {
                        this.playerStarUp(this.player, Infinity);
                    }
                },
                "onModDisable": function () {
                    this.playerStarDown(this.player);
                },
                "onSetLocation": function () {
                    this.playerStarUp(this.player, Infinity);
                }
            }
        }, {
            "name": "Parallax Clouds",
            "description": "Clouds in the sky scroll at about 63% the normal rate.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function () {
                    this.ObjectMaker.getFunction("Cloud").prototype.parallaxHoriz = .7;
                },
                "onModDisable": function () {
                    this.ObjectMaker.getFunction("Cloud").prototype.parallaxHoriz = undefined;
                }
            }
        }, {
            "name": "Low Gravity",
            "description": "I believe I can fly!",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function () {
                    this.ObjectMaker.getFunction("Player").prototype.gravity 
                            = this.ObjectMaker.getFunction("Area").prototype.gravity / 1.4
                },
                "onModDisable": function () {
                    this.ObjectMaker.getFunction("Player").prototype.gravity 
                            = this.ObjectMaker.getFunction("Area").prototype.gravity;
                }
            }
        }, {
            "name": "Luigi",
            "description": "The little brother who could!",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function () {
                    this.StatsHolder.set("luigi", true);
                    this.ObjectMaker.getFunction("Player").prototype.title = "Luigi";
                    
                    if (this.player) {
                        this.player.title = "Luigi";
                        this.PixelDrawer.setThingSprite(this.player);
                    }
                },
                "onModDisable": function () {
                    this.StatsHolder.set("luigi", false);
                    this.ObjectMaker.getFunction("Player").prototype.title = "Player";
                    
                    if (this.player) {
                        this.player.title = "Player";
                        this.PixelDrawer.setThingSprite(this.player);
                    }
                }
            }
        }, { 
            "name": "Tilt Gravity",
            "description": "Tilting your device pushes characters around",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onDeviceMotion": function (mod, event) {
                    var characters = this.GroupHolder.getCharacterGroup(),
                        acceleration = event.accelerationIncludingGravity,
                        diff = -acceleration.x * this.unitsize,
                        y = acceleration.y,
                        character, i;
                    
                    for (i = 0; i < characters.length; i += 1) {
                        character = characters[i];
                        if (!character.player && !character.grounded) {
                            this.shiftHoriz(character, diff);
                        }
                    }
                    
                    if (typeof mod.settings.y !== "undefined") {
                        diff = (y - mod.settings.y) * this.unitsize * 2;
                        if (diff > 0) {
                            for (i = 0; i < characters.length; i += 1) {
                                character = characters[i];
                                if (!character.grounded) {
                                    this.shiftVert(character, -diff);
                                    character.yvel = -diff;
                                    character.resting = undefined;
                                }
                            }
                        }
                    }
                    
                    mod.settings.y = y;
                }
            },
            "settings": {
                "y": undefined
            }
        }, {
            "name": "QCount",
            "description": "QQQQQQQ",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function (mod) {
                    var EightBitter = this,
                        characters = mod.settings.characters,
                        charactersEightBitter = EightBitter.GroupHolder.getCharacterGroup(),
                        level;
                    
                    this.InputWriter.addEvent("onkeydown", "q", function () {
                        mod.settings.qcount += 1;
                        
                        if (mod.settings.levels[mod.settings.qcount]) {
                            var level = mod.settings.levels[mod.settings.qcount];
                            mod.settings.events.push(EightBitter.TimeHandler.addEventInterval(function () {
                                if (charactersEightBitter.length < 210) {
                                    var num = Math.floor(Math.random() * level.length),
                                        lul = EightBitter.ObjectMaker.make.apply(EightBitter, level[num]);
                                    
                                    lul.yvel = Math.random() * EightBitter.unitsize / 4;
                                    lul.xvel = lul.speed = Math.random() * EightBitter.unitsize * 2;
                                    if (Math.floor(Math.random() * 2)) {
                                        lul.xvel *= -1;
                                    }
                                    
                                    characters.push(lul);
                                    EightBitter.addThing(
                                        lul, 
                                        (32 * Math.random() + 128) * EightBitter.unitsize,
                                        88 * Math.random() * EightBitter.unitsize
                                    );
                                }
                            }, 7, Infinity));
                        }
                    });
                    this.InputWriter.addAliasValues("q", [81]);
                },
                "onModDisable": function (mod) {
                    mod.settings.qcount = 0;
                    mod.settings.events.forEach(this.TimeHandler.cancelEvent);
                    this.InputWriter.removeEvent("onkeydown", 81, undefined);
                    this.InputWriter.removeEvent("onkeydown", "q", undefined);
                },
                "onSetLocation": function (mod) {
                    mod.settings.qcount = 0;
                }
            },
            "settings": {
                "qcount": 0,
                "characters": [],
                "events": [],
                "levels": {
                    "7": [ ["Goomba"] ],
                    "14": [ 
                        ["Koopa"],
                        ["Koopa", { "smart": true }],
                        ["Koopa", { "jumping": true }],
                        ["Koopa", { "smart": true, "jumping": true }],
                        ["Beetle"],
                        ["HammerBro"],
                        ["Lakitu"],
                        ["Blooper"]
                    ],
                    "21": [ ["Bowser"] ]
                }
            }
        }, {
            "name": "Super Fireballs",
            "description": "Fireballs blow up solids, and Mario has unlimited.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function (mod) {
                    this.ObjectMaker.getFunction("solid").prototype.nofire = 0;
                    this.ObjectMaker.getFunction("solid").prototype.firedeath = 1;
                },
                "onModDisable": function (mod) {
                    this.ObjectMaker.getFunction("solid").prototype.nofire = 2;
                    this.ObjectMaker.getFunction("solid").prototype.firedeath = 0;
                }
            }
        }, {
            "name": "Trip of Acid",
            "description": "Sprites aren't cleared from the screen each game tick.",
            "author": {
                "name": "Josh Goldberg",
                "email": "josh@fullscreenmario.com"
            },
            "enabled": false,
            "events": {
                "onModEnable": function (mod) {
                    this.TimeHandler.addEvent(function () {
                        this.PixelDrawer.setNoRefill(true);
                    }.bind(this), 3);
                },
                "onSetLocation": function (mod) {
                    this.PixelDrawer.setNoRefill(false);
                    this.TimeHandler.addEvent(function () {
                        this.PixelDrawer.setNoRefill(true);
                    }.bind(this), 3);
                },
                "onModDisable": function (mod) {
                    this.PixelDrawer.setNoRefill(false);
                }
            }
        }
    ]
};
(function () {
    FullScreenMario.prototype.settings.objects = {
        "onMake": "onMake",
        "indexMap": ["width", "height"],
        "doPropertiesFull": true,
        "inheritance": {
            "Quadrant": {},
            "Map": {},
            "Area": {},
            "Location": {},
            "Thing": {
                "character": {
                    "Player": {},
                    "enemy": {
                        "Goomba": {},
                        "Koopa": {},
                        "Beetle": {},
                        "Piranha": {},
                        "Blooper": {},
                        "CheepCheep": {},
                        "Podoboo": {},
                        "BulletBill": {},
                        "Lakitu": {},
                        "SpinyEgg": {},
                        "Spiny": {},
                        "HammerBro": {
                            "Bowser": {}
                        },
                        "Hammer": {},
                        "BowserFire": {},
                    },
                    "item": {
                        "Mushroom": {
                            "Mushroom1Up": {},
                            "MushroomDeathly": {}
                        },
                        "FireFlower": {},
                        "Fireball": {
                            "CastleFireball": {}
                        },
                        "Star": {},
                        "Shell": {
                            "BeetleShell": {}
                        },
                        "Vine": {}
                    },
                    "BrickShard": {},
                    "Bubble": {},
                    "Coin": {},
                    "Firework": {},
                },
                "solid": {
                    "Block": {},
                    "BridgeBase": {},
                    "Brick": {},
                    "DeadGoomba": {},
                    "Pipe": {},
                    "PipeHorizontal": {},
                    "PipeVertical": {},
                    "Platform": {},
                    "Stone": {
                        "RestingStone": {}
                    },
                    "Cannon": {},
                    "Springboard": {},
                    "Floor": {},
                    "TreeTop": {},
                    "ShroomTop": {},
                    "CastleAxe": {},
                    "CastleBlock": {},
                    "CastleBridge": {},
                    "CastleChain": {},
                    "Coral": {},
                    "WaterBlocker": {},
                    "detector": {
                        "DetectCollision": {
                            "ScrollEnabler": {},
                        },
                        "DetectWindow": {
                            "ScrollBlocker": {},
                            "RandomSpawner": {}
                        },
                        "DetectSpawn": {}
                    }
                },
                "scenery": {
                    "Blank": {},
                    "BrickHalf": {},
                    "BrickPlain": {},
                    "Bush1": {},
                    "Bush2": {},
                    "Bush3": {},
                    "CastleDoor": {},
                    "CastleFlag": {},
                    "CastleRailing": {},
                    "CastleRailingFilled": {},
                    "CastleTop": {},
                    "CastleWall": {},
                    "Cloud": {
                        "Cloud1": {},
                        "Cloud2": {},
                        "Cloud3": {},
                    },
                    "Fence": {},
                    "Flag": {},
                    "FlagPole": {},
                    "FlagTop": {},
                    "HillSmall": {},
                    "HillLarge": {},
                    "Peach": {},
                    "PlatformString": {},
                    "PlantSmall": {},
                    "PlantLarge": {},
                    "Railing": {},
                    "ShroomTrunk": {},
                    "String": {},
                    "StringCornerLeft": {},
                    "StringCornerRight": {},
                    "Toad": {},
                    "TreeTrunk": {},
                    "Water": {}
                },
                "Text": {
                    "DecorativeBack": {},
                    "DecorativeDot": {},
                    "TextA": {},
                    "TextB": {},
                    "TextC": {},
                    "TextD": {},
                    "TextE": {},
                    "TextF": {},
                    "TextG": {},
                    "TextH": {},
                    "TextI": {},
                    "TextJ": {},
                    "TextK": {},
                    "TextL": {},
                    "TextM": {},
                    "TextN": {},
                    "TextO": {},
                    "TextP": {},
                    "TextQ": {},
                    "TextR": {},
                    "TextS": {},
                    "TextT": {},
                    "TextU": {},
                    "TextV": {},
                    "TextW": {},
                    "TextX": {},
                    "TextY": {},
                    "TextZ": {},
                    "Text0": {},
                    "Text1": {},
                    "Text2": {},
                    "Text3": {},
                    "Text4": {},
                    "Text5": {},
                    "Text6": {},
                    "Text7": {},
                    "Text8": {},
                    "Text9": {},
                    "TextSpace": {},
                    "TextSlash": {},
                    "TextCharacters": {
                        "TextPeriod": {},
                        "TextExclamationMark": {},
                        "TextColon": {},
                    },
                    "TextColored": {
                        "TextColoredD": {},
                        "TextColoredE": {},
                        "TextColoredI": {},
                        "TextColoredN": {},
                        "TextColoredO": {},
                        "TextColoredT": {},
                        "TextColored1": {},
                        "TextColored5": {},
                        "TextColored8": {},
                        "TextColored9": {},
                        "TextColoredSpace": {},
                        "TextColoredCopyright": {}
                    },
                    "TextLarge": {
                        "TextLargeE": {},
                        "TextLargeP": {},
                        "TextLargeR": {},
                        "TextLargeS": {},
                        "TextLargeU": {}
                    },
                    "TextHuge": {
                        "TextHugeA": {},
                        "TextHugeB": {},
                        "TextHugeI": {},
                        "TextHugeM": {},
                        "TextHugeO": {},
                        "TextHugeR": {},
                        "TextHugeS": {},
                        "TextHugeSpace": {},
                        "TextHugePeriod": {}
                    },
                    "ScoreText": {
                        "Text100": {},
                        "Text200": {},
                        "Text400": {},
                        "Text500": {},
                        "Text800": {},
                        "Text1000": {},
                        "Text2000": {},
                        "Text4000": {},
                        "Text5000": {},
                        "Text8000": {},
                        "Text1Up": {},
                    },
                    "CustomText": {}
                }
            }
        },
        "properties": {
            "Quadrant": {
                "tolx": 0,
                "toly": 0
            },
            "Map": {
                "initialized": false
            },
            "Area": {
                "onMake": FullScreenMario.prototype.initializeArea,
                "floor": 104,
                "time": 400,
                "jumpmod": 1.056,
                "maxyvel": 7,
                "maxyvelinv": -14,
                "onPlayerDeathTimeout": 280,
                "onGameOverTimeout": 280,
                "gravity": FullScreenMario.gravity,
                "canscroll": true,
                "underwater": false,
                "notime": false,
                "nokeys": false,
                "onPlayerDeath": FullScreenMario.prototype.setMap,
                "onGameOver": FullScreenMario.prototype.gameOver,
                "attributes": {
                    "underwater": {
                        "gravity": FullScreenMario.gravity / 2.8,
                        "stretches": [
                            { "thing": "WaterBlocker", "y": 104, "height": 16 },
                            { "thing": "Water", "y": 88 }
                        ]
                    },
                    "blockBoundaries": {
                        "afters": [
                            { "thing": "ScrollBlocker" }
                        ]
                    },
                    "random": {
                        "onPlayerDeath": FullScreenMario.prototype.mapEntranceRespawn,
                        "onPlayerDeathTimeout": 140
                    }
                }
            },
            "Location": {
                "area": 0,
                "entry": "Normal"
            },
            Thing: {
                // Sizing
                width: 8,
                height: 8,
                tolx: 0,
                toly: FullScreenMario.unitsize / 8,
                // Velocity
                xvel: 0,
                yvel: 0,
                speed: 0,
                // Score amounts on death
                scoreStomp: 100,
                scoreFire: 200,
                scoreStar: 200,
                scoreBelow: 100,
                // Placement
                alive: true,
                placed: false,
                // Quadrants
                maxquads: 4,
                outerok: false,
                // Sprites
                sprite: "",
                spriteType: "neither",
                opacity: 1,
                // Triggered functions
                animate: FullScreenMario.prototype.animateEmerge,
                onMake: FullScreenMario.prototype.thingProcess,
                death: FullScreenMario.prototype.killNormal,
                collide: false,
                movement: false
            },
            character: {
                libtype: "characters",
                grouptype: "Character",
                character: true,
                lookleft: true,
                moveleft: true,
                firedeath: true,
                movement: FullScreenMario.prototype.moveSimple
            },
            Player: {
                player: 1,
                power: 1,
                canjump: 1,
                nofire: 1,
                nokillend: 1,
                numballs: 0,
                moveleft: 0,
                skidding: 0,
                star: 0,
                dying: 0,
                nofall: 0,
                maxvel: 0,
                paddling: 0,
                jumpers: 0,
                landing: 0,
                tolx: FullScreenMario.unitsize * 2,
                toly: 0,
                walkspeed: FullScreenMario.unitsize / 2,
                maxspeed: FullScreenMario.unitsize * 1.35, // Really only used for timed animations
                maxspeedsave: FullScreenMario.unitsize * 1.35,
                scrollspeed: FullScreenMario.unitsize * 1.75,
                running: '', // Evaluates to false for cycle checker
                fire: FullScreenMario.prototype.animatePlayerFire,
                movement: FullScreenMario.prototype.movePlayer,
                death: FullScreenMario.prototype.killPlayer,
                onResting: FullScreenMario.prototype.animatePlayerLanding,
                onRestingOff: FullScreenMario.prototype.animatePlayerRestingOff,
                type: "character",
                name: "player normal small still",
                getKeys: function () {
                    return {
                        "run": 0,
                        "crouch": 0,
                        "jump": 0,
                        "jumplev": 0,
                        "sprint": 0
                    };
                }
            },
            enemy: {
                type: "enemy",
                speed: FullScreenMario.unitsize * .21,
                collide: FullScreenMario.prototype.collideEnemy,
                death: FullScreenMario.prototype.killFlip
            },
            Goomba: {
                scoreFire: 100,
                scoreStar: 100,
                spawntype: "DeadGoomba",
                toly: FullScreenMario.unitsize,
                death: FullScreenMario.prototype.killGoomba,
                spriteCycleSynched: [
                    [FullScreenMario.prototype.unflipHoriz, FullScreenMario.prototype.flipHoriz]
                ]
            },
            Koopa: {
                height: 12,
                shellspawn: true,
                spawntype: "Shell",
                shelltype: "Shell",
                toly: FullScreenMario.unitsize * 2,
                death: FullScreenMario.prototype.killKoopa,
                spriteCycle: [
                    ["one", "two"]
                ],
                attributes: {
                    "smart": {
                        movement: FullScreenMario.prototype.moveSmart,
                        "spawnsettings": {
                            "smart": true
                        }
                    },
                    "jumping": {
                        movement: FullScreenMario.prototype.moveJumping,
                        jumpheight: FullScreenMario.unitsize * 1.17,
                        gravity: FullScreenMario.gravity / 2.8,
                        scoreStomp: 400
                    },
                    "floating": {
                        onThingAdded: FullScreenMario.prototype.spawnMoveFloating,
                        movement: FullScreenMario.prototype.moveFloating,
                        nofall: true,
                        yvel: FullScreenMario.unitsize / 8,
                        maxvel: FullScreenMario.unitsize / 4,
                        scoreStomp: 400
                    }
                }
            },
            Beetle: {
                speed: FullScreenMario.unitsize * .21,
                xvel: FullScreenMario.unitsize * .21,
                height: 8,
                nofire: 2,
                shellspawn: true,
                movement: FullScreenMario.prototype.moveSmart,
                death: FullScreenMario.prototype.killToShell,
                spawntype: "BeetleShell",
                shelltype: "BeetleShell",
                spriteCycle: [
                    ["one", "two"]
                ],
            },
            Piranha: {
                height: 12,
                toly: FullScreenMario.unitsize * 8,
                countermax: 49,
                // nofall: true,
                deadly: true,
                // nocollidesolid: true,
                grounded: true,
                death: FullScreenMario.prototype.killNormal,
                movement: FullScreenMario.prototype.movePiranha,
                onThingAdded: FullScreenMario.prototype.spawnPiranha,
                spriteCycleSynched: [
                    ["one", "two"]
                ]
            },
            Blooper: {
                height: 12,
                nofall: true,
                nocollidesolid: true,
                speed: FullScreenMario.unitsize / 2,
                onThingAdded: FullScreenMario.prototype.spawnBlooper,
                movement: FullScreenMario.prototype.moveBlooper,
                death: FullScreenMario.prototype.killFlip
            },
            CheepCheep: {
                nofall: true,
                nocollidesolid: true,
                nocollidechar: true,
                movement: FullScreenMario.prototype.moveCheepCheep,
                xvel: FullScreenMario.unitsize / -6,
                // yvel: FullScreenMario.unitsize / -32,
                yvel: FullScreenMario.unitsize / -1,
                death: FullScreenMario.prototype.killFlip,
                spriteCycleSynched: [
                    ["one", "two"]
                ],
                attributes: {
                    "red": {
                        xvel: FullScreenMario.unitsize / -4,
                        yvel: FullScreenMario.unitsize / -24
                    },
                    "flying": {
                        "movement": FullScreenMario.prototype.moveCheepFlying,
                        "gravity": FullScreenMario.gravity / 3.5
                    }
                }
            },
            Podoboo: {
                width: 7,
                speed: FullScreenMario.unitsize * 1.75,
                acceleration: FullScreenMario.unitsize / 24,
                jumpHeight: 28,
                frequency: 245,
                deadly: true,
                nofall: true,
                nofire: true,
                nocollidechar: true,
                nocollidesolid: true,
                grounded: true,
                movement: undefined,
                onThingAdded: FullScreenMario.prototype.spawnPodoboo
            },
            BulletBill: {
                height: 7,
                nofall: true,
                nofire: true,
                nocollidechar: true,
                nocollidesolid: true,
                grounded: true,
                movement: undefined,
                xvel: FullScreenMario.unitsize / 2,
            },
            Lakitu: {
                height: 12,
                nofall: true,
                noshiftx: true,
                nocollidesolid: true,
                grounded: true,
                onThingAdded: FullScreenMario.prototype.spawnLakitu,
                movement: FullScreenMario.prototype.moveLakituInitial
            },
            SpinyEgg: {
                width: 7,
                deadly: true,
                movement: undefined,
                onResting: FullScreenMario.prototype.animateSpinyEggHatching,
                spawntype: "Spiny",
                spriteCycleSynched: [
                    ["one", "two"]
                ]
            },
            Spiny: {
                deadly: true,
                moveleft: true,
                spriteCycle: [
                    ["one", "two"]
                ]
            },
            HammerBro: {
                height: 12,
                onThingAdded: FullScreenMario.prototype.spawnHammerBro,
                movement: FullScreenMario.prototype.moveHammerBro,
                spriteCycle: [
                    ["one", "two"]
                ]
            },
            Bowser: {
                width: 16,
                height: 16,
                speed: FullScreenMario.unitsize * .14,
                gravity: FullScreenMario.gravity / 2.8,
                spawntype: "Goomba",
                deadly: true,
                noflip: true,
                nofiredeath: true,
                nokillend: true,
                skipoverlaps: true,
                movement: FullScreenMario.prototype.moveBowser,
                killonend: FullScreenMario.prototype.animateBowserFreeze,
                death: FullScreenMario.prototype.killBowser,
                onThingAdded: FullScreenMario.prototype.spawnBowser,
                spriteCycle: [
                    ["one", "two"]
                ]
            },
            Hammer: {
                movement: undefined,
                nocollidesolid: true,
                nocollidechar: true,
                deadly: true,
                nofire: true,
                spriteCycle: [
                    ["one", "two", "three", "four"],
                    3
                ]
            },
            BowserFire: {
                width: 12,
                height: 4,
                nocollidesolid: true,
                nocollidechar: true,
                nofall: true,
                deadly: true,
                nofire: true,
                movement: FullScreenMario.prototype.moveBowserFire,
                xvel: FullScreenMario.unitsize * -.63,
                spriteCycle: [
                    [
                        FullScreenMario.prototype.flipVert,
                        FullScreenMario.prototype.unflipVert
                    ]
                ]
            },
            item: {
                group: "item",
                collide: FullScreenMario.prototype.collideFriendly,
                onCollideUp: FullScreenMario.prototype.collideUpItem,
                jump: FullScreenMario.prototype.itemJump,
                nofire: true
            },
            Mushroom: {
                action: FullScreenMario.prototype.playerShroom,
                speed: FullScreenMario.unitsize * .42
            },
            Mushroom1Up: {
                action: FullScreenMario.prototype.playerShroom1Up
            },
            MushroomDeathly: {
                action: FullScreenMario.prototype.killPlayer
            },
            FireFlower: {
                action: FullScreenMario.prototype.playerShroom,
                spriteCycle: [
                    ["one", "two", "three", "four"]
                ]
            },
            Fireball: {
                width: 4,
                height: 4,
                nofire: true,
                nostar: true,
                collidePrimary: true,
                grounded: true,
                animate: FullScreenMario.prototype.animateFireballEmerge,
                collide: FullScreenMario.prototype.collideFireball,
                death: FullScreenMario.prototype.animateFireballExplode,
                spriteCycleSynched: [
                    ["one", "two", "three", "four"], "spinning", 4
                ]
            },
            CastleFireball: {
                deadly: true,
                nocollidesolid: true,
                nocollidechar: true,
                nofall: true,
                outerok: true,
                collide: FullScreenMario.prototype.collideCastleFireball
            },
            Firework: {
                nocollide: true,
                nofall: true,
                animate: FullScreenMario.prototype.animateFirework
            },
            Star: {
                name: "star item", // Item class so player's star isn't confused with this
                width: 7,
                grounded: true,
                speed: FullScreenMario.unitsize * .56,
                action: FullScreenMario.prototype.collideStar,
                movement: FullScreenMario.prototype.moveJumping,
                jumpheight: FullScreenMario.unitsize * 1.17,
                gravity: FullScreenMario.gravity / 2.8,
                spriteCycle: [
                    ["one", "two", "three", "four"], 0, 7
                ]
            },
            Shell: {
                height: 7,
                speed: FullScreenMario.unitsize * 2,
                collidePrimary: true,
                nofire: false,
                moveleft: 0,
                xvel: 0,
                move: 0,
                shell: true,
                hitcount: 0,
                peeking: 0,
                counting: 0,
                landing: 0,
                enemyhitcount: 0,
                movement: FullScreenMario.prototype.moveShell,
                collide: FullScreenMario.prototype.collideShell,
                death: FullScreenMario.prototype.killFlip,
                spawntype: "Koopa",
                attributes: {
                    smart: {}
                }
            },
            BeetleShell: {
                height: 8,
                nofire: 2,
                spawntype: "Beetle"
            },
            Vine: {
                width: 7,
                topheight: 7,
                repeat: true,
                nofall: true,
                nocollide: true,
                nocollidesolid: true,
                grounded: true,
                speed: FullScreenMario.unitsize / 4,
                movement: FullScreenMario.prototype.moveVine,
                collide: FullScreenMario.prototype.collideVine,
                animate: FullScreenMario.prototype.animateEmergeVine
            },
            BrickShard: {
                width: 4,
                height: 4,
                nocollide: true,
                grounded: true,
                movement: undefined,
                spriteCycle: [
                    [FullScreenMario.prototype.unflipHoriz, FullScreenMario.prototype.flipHoriz]
                ]
            },
            Bubble: {
                width: 2,
                height: 2,
                nocollide: true,
                nofall: true,
                movement: FullScreenMario.prototype.moveBubble,
                yvel: FullScreenMario.unitsize / -4
            },
            Coin: {
                width: 5,
                spritewidth: 5,
                height: 7,
                nofall: true,
                nocollidechar: true,
                nocollidesolid: true,
                allowUpSolids: true,
                animate: FullScreenMario.prototype.animateEmergeCoin,
                onCollideUp: FullScreenMario.prototype.collideUpCoin,
                collide: FullScreenMario.prototype.collideCoin,
                spriteCycleSynched: [
                    ["one", "two", "three", "two", "one"]
                ]
            },
            solid: {
                type: "solid",
                libtype: "solids",
                grouptype: "Solid",
                spritewidth: 8,
                spriteheight: 8,
                repeat: true,
                solid: true,
                nocollidesolid: true,
                firedeath: 0,
                nofire: 2,
                collide: FullScreenMario.prototype.collideCharacterSolid,
            },
            Brick: {
                breakable: true,
                bottomBump: FullScreenMario.prototype.collideBottomBrick
            },
            Block: {
                unused: true,
                contents: "Coin",
                bottomBump: FullScreenMario.prototype.collideBottomBlock,
                spriteCycleSynched: [
                    ["one", "two", "three", "two", "one"]
                ]
            },
            BridgeBase: {
                height: 4,
                spritewidth: 4,
            },
            DeadGoomba: {
                height: 4,
                nocollide: true,
                onThingAdded: function (thing) {
                    thing.EightBitter.TimeHandler.addEvent(FullScreenMario.prototype.killNormal, 21, thing);
                }
            },
            Pipe: {
                width: 16,
                spritewidth: 16,
                actionTop: FullScreenMario.prototype.mapExitPipeVertical
            },
            PipeHorizontal: {
                height: 16,
                spriteheight: 16,
                width: 19.5,
                spritewidth: 19.5,
                actionLeft: FullScreenMario.prototype.mapExitPipeHorizontal,
                attributes: {
                    width: 8,
                    spritewidth: 8
                }
            },
            PipeVertical: {
                position: "beginning",
                width: 16,
                spritewidth: 16
            },
            Platform: {
                height: 4,
                spritewidth: 4,
                fallThresholdStart: FullScreenMario.unitsize * 2.8,
                fallThresholdEnd: FullScreenMario.unitsize * 2,
                acceleration: FullScreenMario.unitsize / 16,
                repeat: true,
                killonend: false,
                maxvel: FullScreenMario.unitsize / 4 * 1.5,
                attributes: {
                    "floating": {
                        onThingAdded: FullScreenMario.prototype.spawnMoveFloating,
                        movement: FullScreenMario.prototype.moveFloating,
                        yvel: FullScreenMario.unitsize / 4 * 1.5
                    },
                    "sliding": {
                        onThingAdded: FullScreenMario.prototype.spawnMoveSliding,
                        movement: FullScreenMario.prototype.moveSliding,
                        xvel: FullScreenMario.unitsize / 4 * 1.5
                    },
                    "transport": {
                        movement: undefined,
                        collide: FullScreenMario.prototype.collideTransport
                    },
                    "falling": {
                        movement: FullScreenMario.prototype.moveFalling
                    },
                    "scale": {
                        "movement": FullScreenMario.prototype.movePlatformScale
                    }
                }
            },
            RestingStone: {
                opacity: 0.01, // Why is opacity set to 1 when added?
                onRestedUpon: FullScreenMario.prototype.activateRestingStone
            },
            Cannon: {
                frequency: 280,
                onThingAdded: FullScreenMario.prototype.spawnCannon
            },
            Springboard: {
                height: 14.5,
                heightNormal: 14.5,
                spriteheight: 10,
                collide: FullScreenMario.prototype.collideSpringboard
            },
            CastleAxe: {
                collide: FullScreenMario.prototype.collideCastleAxe
            },
            CastleBlock: {
                onThingAdded: FullScreenMario.prototype.spawnCastleBlock,
                attributes: {
                    "fireballs": {
                        speed: 1
                    }
                }
            },
            CastleBridge: {
                height: 16,
                spriteheight: 16,
                spritewidth: 4,
                killonend: FullScreenMario.prototype.animateCastleBridgeOpen
            },
            CastleChain: {
                width: 7.5,
                spritewidth: 7.5,
                height: 8,
                nocollide: true,
                killonend: FullScreenMario.prototype.animateCastleChainOpen
            },
            Floor: {
                nofire: true // for the "Super Fireballs" mod
            },
            WaterBlocker: {
                hidden: true,
                collide: FullScreenMario.prototype.collideWaterBlocker
            },
            detector: {
                hidden: true,
                collideHidden: true
            },
            DetectCollision: {
                collide: FullScreenMario.prototype.collideDetector
            },
            ScrollEnabler: {
                activate: FullScreenMario.prototype.activateScrollEnabler
            },
            DetectWindow: {
                movement: FullScreenMario.prototype.activateWindowDetector
            },
            RandomSpawner: {
                activate: FullScreenMario.prototype.spawnRandomSpawner
            },
            ScrollBlocker: {
                activate: FullScreenMario.prototype.activateScrollBlocker
            },
            DetectSpawn: {
                movement: FullScreenMario.prototype.spawnDetector
            },
            scenery: {
                libtype: "scenery",
                grouptype: "Scenery",
                repeat: true,
                nocollide: true, // for when placed in Solid group
                noBoundaryStretch: true
            },
            // Blank: [0, 0],
            BrickHalf: [8, 4],
            BrickPlain: [8, 8],
            Bush1: [16, 8],
            Bush2: [24, 8],
            Bush3: [32, 8],
            CastleDoor: [8, 20],
            CastleFlag: [6.5, 10],
            CastleRailing: [8, 4],
            CastleRailingFilled: [8, 4],
            CastleTop: [12, 12],
            CastleWall: [8, 48],
            Cloud1: [16, 12],
            Cloud2: [24, 12],
            Cloud3: [32, 12],
            Flag: [8, 8],
            FlagPole: [1, 72],
            FlagTop: [4, 4],
            Fence: [8, 8],
            HillSmall: [24, 9.5],
            HillLarge: [40, 17.5],
            Peach: [13, 16],
            PlatformString: [1, 1],
            PlantSmall: [7, 15],
            PlantLarge: [8, 23],
            Railing: [4, 4],
            ShroomTrunk: [8, 8],
            String: [1, 1],
            StringCornerLeft: [5, 5],
            StringCornerRight: [5, 5],
            Toad: [8, 13],
            TreeTrunk: [4, 4],
            Water: {
                "width": 4,
                "height": 5,
                // spriteCycle: [
                    // ["one", "two", "three", "four"]
                // ]
            },
            "Text": {
                "width": 3.5,
                "height": 3.5,
                "libtype": "Text",
                "grouptype": "Text",
                "size": ""
            },
            "DecorativeBack": {
                "width": 88,
                "height": 44,
                "spritewidth": .5,
                "spriteheight": .5,
            },
            "DecorativeDot": {
                "width": 1.5,
                "height": 1.5
            },
            "TextSpace": {
                "hidden": true
            },
            "TextColored1": [3, 3.5],
            "TextColoredSpace": {
                "hidden": true
            },
            "TextColoredCopyright": [4, 4],
            "TextLarge": {
                "width": 7.5,
                "height": 14,
                "size": "Large"
            },
            "TextHuge": {
                "width": 7.5,
                "height": 22
            },
            "TextHugeI": {
                "width": 3.5
            },
            "TextHugeM": {
                "width": 11.5
            },
            "TextHugeSpace": {
                "width": 3.5,
                "hidden": true
            },
            "TextHugePeriod": {
                "width": 3.5
            },
            "ScoreText": {
                "libtype": "Text",
                "grouptype": "Text",
            },
            "TextCharacters": [2.5, 4],
            "TextCharagersHuge": [1, 1],
            "Text100": [6, 4],
            "Text200": [6, 4],
            "Text400": [6, 4],
            "Text500": [6, 4],
            "Text800": [6, 4],
            "Text1000": [8, 4],
            "Text2000": [8, 4],
            "Text4000": [8, 4],
            "Text5000": [8, 4],
            "Text8000": [8, 4],
            "Text1Up": [8, 4],
            "CustomText": {
                "hidden": true,
                "spacingHorizontal": .5,
                "spacingVertical": 8,
                "spacingVerticalBlank": 6,
                "onThingAdded": FullScreenMario.prototype.spawnCustomText
            }
        }
    };
})();
FullScreenMario.prototype.settings.quadrants = {
    "numRows": 5,
    "numCols": 6,
    "tolerance": FullScreenMario.unitsize / 2,
    "groupNames": ["Solid", "Character", "Scenery", "Text"],
    "thingGroupName": "grouptype"
}
FullScreenMario.prototype.settings.renderer = {
    "groupNames": ["Text", "Character", "Solid", "Scenery"],
    "spriteCacheCutoff": 2048
};
FullScreenMario.prototype.settings.runner = {
    "upkeepScheduler": setTimeout,
    "upkeepCanceller": clearTimeout,
    "interval": 1000 / 60,
    "adjustFramerate": true,
    "games": [
        function () {
            this.QuadsKeeper.determineAllQuadrants("Scenery", this.GroupHolder.getSceneryGroup());
            this.QuadsKeeper.determineAllQuadrants("Text", this.GroupHolder.getTextGroup());
        },
        function () {
            this.maintainSolids(this, this.GroupHolder.getSolidGroup());
        },
        function () {
            this.maintainCharacters(this, this.GroupHolder.getCharacterGroup());
        },
        function () {
            this.maintainPlayer(this, this.player);
        },
        function () {
            this.TimeHandler.handleEvents();
        },
        function () {
            this.PixelDrawer.refillGlobalCanvas(this.MapsHandler.getArea().background);
            // this.PixelDrawer.refillQuadrantGroups(
                // this.QuadsKeeper.getQuadrantRows(),
                // this.MapsHandler.getArea().background
            // );
        }
    ]
}
FullScreenMario.prototype.settings.sprites = {
    "spriteWidth": "spritewidthpixels",
    "spriteHeight": "spriteheightpixels",
    "palette": [
        [0, 0, 0, 0],
        // Grayscales (1-4)
        [255, 255, 255, 255],
        [0, 0, 0, 255],
        [188, 188, 188, 255],
        [116, 116, 116, 255],
        // Reds & Browns (5-11)
        [252, 216, 168, 255],
        [252, 152, 56, 255],
        [252, 116, 180, 255],
        [216, 40, 0, 255],
        [200, 76, 12, 255],
        [136, 112, 0, 255],
        [124, 7, 0, 255],
        // Greens (12-14, and 21)
        [168, 250, 188, 255],
        [128, 208, 16, 255],
        [0, 168, 0, 255],
        // Blues (15-20)
        [24, 60, 92, 255],
        [0, 128, 136, 255],
        [32, 56, 236, 255],
        [156, 252, 240, 255],
        [60, 188, 252, 255],
        [92, 148, 252, 255],
        // Green (21) for Luigi
        [0, 130, 0, 255],
        // Pinkish tan (22) for large decorative text
        [252, 188, 176, 255]
    ],
    "filters": {
        "Underworld": ["palette", {
            "05": "18",
            "09": "16"
        }],
        "UnderworldKoopa": ["palette", {
            "06": "09",
            "14": "16"
        }],
        "Castle": ["palette", {
            "02": "04",
            "05": "01",
            "09": "03"
        }],
        "Alt": ["palette", {
            "11": "01"
        }],
        "Alt2": ["palette", {
            "02": "04",
            "05": "01",
            "09": "03",
            "13": "01",
            "19": "08"
        }],
        "StarOne": ["palette", {}],
        "StarTwo": ["palette", {
            "06": "02",
            "08": "05",
            "10": "09"
        }],
        "StarThree": ["palette", {
            "06": "01",
            "08": "06",
            "10": "08"
        }],
        "StarFour": ["palette", {
            "06": "01",
            "08": "06",
            "10": "14"
        }],
        "Smart": ["palette", {
            "14": "08"
        }]
    },
    "library": {
        "characters": {
            "Beetle": {
                "normal": {
                    "normal": "p[0,2,5,8]x022,1111x010,x18,x07,x110,x05,x17,33111000x18,32311000x19,3311003333x111,001133x110,001113x110,011213x110,011113x110,011113x110,0011233x15,x35,00222331133322200222203333002222",
                    "two": "p[0,2,5,8]x07,111x010,x18,x07,x110,x05,x17,33111000x18,32311000x19,3311003333x111,001133x110,001113x110,011213x110,011113x110,011113x110,0011233x15,x35,00022331133322x05,22233330222x06,22x05,22000"
                },
                "Underworld": {
                    "normal": "p[0,15,16,18]x022,1111x010,x18,x07,x110,x05,x17,22111000x18,23211000x19,2211002222x111,001122x110,001112x110,011312x110,011112x110,011112x110,0011322x15,x25,00333221122233300333302222003333",
                    "two": "p[0,15,16,18]x07,111x010,x18,x07,x110,x05,x17,22111000x18,23211000x19,2211002222x111,001122x110,001112x110,011312x110,011112x110,011112x110,0011322x15,x25,00033221122233x05,33322220333x06,33x05,33000"
                },
                "Castle": {
                    "normal": "p[0,1,3,4]x022,3333x010,x38,x07,x310,x05,x37,22333000x38,21233000x39,2233002222x311,003322x310,003332x310,033132x310,033332x310,033332x310,0033122x35,x25,00111223322211100111102222001111",
                    "two": "p[0,1,3,4]x07,333x010,x38,x07,x310,x05,x37,22333000x38,21233000x39,2233002222x311,003322x310,003332x310,033132x310,033332x310,033332x310,0033122x35,x25,00011223322211x05,11122220111x06,11x05,11000"
                }
            },
            "BeetleShell": {
                "normal": "p[0,2,5,8]x06,1111x010,x18,x07,1111331111x05,1111322311110000x15,33x15,0000x112,000x114,00x114,00x114,00x114,00x114,00x114,00x114,0x35,x16,x35,000033311333x010,3333x06,",
                "Underworld": "p[0,15,16,18]x06,1111x010,x18,x07,1111221111x05,1111233211110000x15,22x15,0000x112,000x114,00x114,00x114,00x114,00x114,00x114,00x114,0x25,x16,x25,000022211222x010,2222x06,",
                "Castle": "p[0,1,3,4]x06,3333x010,x38,x07,3333223333x05,3333211233330000x35,22x35,0000x312,000x314,00x314,00x314,00x314,00x314,00x314,0x25,x36,x25,000022233222x010,2222x06,"
            },
            "Blooper": {
                "normal": {
                    "normal": "p[0,2,5,9]x06,2332x011,232232x09,23222232x07,2232222322x05,223x26,3220002223x26,322202223x28,32220003x28,3x06,x210,x06,2x18,2x06,1221111221x06,2112112112x06,2112112112x05,212211112212000022332222332200003x210,30000220x26,022000032032002302300002202200220220000320320023023x05,2022002202x06,2032002302x06,2002002002x09,2002x06,",
                    "squeeze": "p[0,2,5,9]x06,2332x011,232232x09,23222232x07,2232222322x05,223x26,3220002223x26,322202223x28,32220003x28,3x06,2x18,200003x25,11x25,30x216,32223x26,322232222022002202222032203200230223000222020020222x05,2202002022000"
                },
                "Underwater": {
                    "normal": "p[0,1,2,3]x06,1331x011,131131x09,13111131x07,1131111311x05,113x16,3110001113x16,311101113x18,31110003x18,3x06,x110,x06,1x28,1x06,2112222112x06,1221221221x06,1221221221x05,121122221121000011331111331100003x110,30000110x16,011000031031001301300001101100110110000310310013013x05,1011001101x06,1031001301x06,1001001001x09,1001x06,",
                    "squeeze": "p[0,1,2,3]x06,1331x011,131131x09,13111131x07,1131111311x05,113x16,3110001113x16,311101113x18,31110003x18,3x06,1x28,100003x15,22x15,30x116,31113x16,311131111011001101111031103100130113000111010010111x05,1101001011000",
                }
            },
            "Bowser": {
                "normal": {
                    "normal": "p[0,1,6,14]x012,111x025,331112x025,3331122x023,113333223x019,200311x37,x018,2023311x38,x017,2221113332x35,x017,222213332223333x017,122233221323333113331x012,1022223332333311331123x010,10113133123333113111223111x09,10003223331113312233112x013,12233111x39,2231x011,2233111x313,1x09,122233111x36,111x35,x010,220033x16,33112333111x015,33222113322333112x011,222001022211x37,22x010,2210222012231x39,1x09,220022220033133311133321x08,210x26,1331133112333x010,200x25,333311333223311x010,10x25,333311x37,111x011,12220x35,1333311322x017,x35,1133323323x018,x35,111x36,x019,x35,11113333x019,2x36,x17,x017,1122332222x15,x016,111x210,11x021,1122112222x021,1112111x25,0",
                    "two": "p[0,1,6,14]x012,111x025,331112x025,3331122x023,113333223x019,200311x37,x018,2023311x38,x017,2221113332x35,x017,222213332223333x017,122233221323333113331x012,1022223332333311331123x010,10113133123333113111223111x09,10003223331113312233112x013,12233111x39,2231x011,2233111x313,1x09,122233111x36,111x35,x010,220033x16,33112333111x015,33222113322333112x011,222001022211x37,22x010,2210222012231x39,1x09,220022220033133311133321x08,210x26,1331133112333x010,200x25,333311333223311x010,10x25,333311x37,111x011,12220x35,1333311322x017,x35,1133323323x018,x35,11x37,x019,x35,11113333x020,x36,x17,x019,22332222x15,x018,2222112211211x018,112211121112222x016,111x27,x06,"
                },
                "firing": {
                    "normal": "p[0,1,6,14]x012,111x025,331112x025,3331122x023,113333223x019,200311x37,x018,2023311x38,x017,2221113332x35,x017,222213332223333x017,112233221323333113331x012,1022223322333311331123x010,101030322x35,113111223111x06,x29,33331113312233112x07,x27,3333111x39,2231x07,x38,111x313,1x010,x35,111x36,111x35,x014,33x16,33112333111x015,33222113322333112x011,222001022211x37,22x010,2210222012231x39,1x09,220022220033133311133321x08,210x26,1331133112333x010,200x25,333311333223311x010,10x25,333311x37,111x011,12220x35,1333311322x017,x35,1133323323x018,x35,111x36,x019,x35,11113333x019,2x36,x17,x017,1122332222x15,x016,111x210,11x021,1122112222x021,1112111x25,0",
                    "two": "p[0,1,6,14]x012,111x025,331112x025,3331122x023,113333223x019,200311x37,x018,2023311x38,x017,2221113332x35,x017,222213332223333x017,112233221323333113331x012,1022223322333311331123x010,101030322x35,113111223111x06,x29,33331113312233112x07,x27,3333111x39,2231x07,x38,111x313,1x010,x35,111x36,111x35,x014,33x16,33112333111x015,33222113322333112x011,222001022211x37,22x010,2210222012231x39,1x09,220022220033133311133321x08,210x26,1331133112333x010,200x25,333311333223311x010,10x25,333311x37,111x011,12220x35,1333311322x017,x35,1133323323x018,x35,11x37,x019,x35,11113333x020,x36,x17,x019,22332222x15,x018,2222112211211x018,112211121112222x016,111x27,x06,"
                }
            },
            "BowserFire": "p[0,1,6,8]x010,x36,003x010,x316,x06,x35,22332222332222x315,x25,111133x05,3333x213,13000x313,2223333x05,x39,0x36,x09,3300333033003x06,",
            "BrickShard": {
                "normal": "p[0,2,9]0021200002221200212121202212221222212221022212220021212000022200",
                "Underworld": ["filter", ["characters", "BrickShard", "normal"], "Underworld"],
                "Castle": ["filter", ["characters", "BrickShard", "normal"], "Castle"]
            },
            "BulletBill": "p[0,2,5,8]110x17,x06,2201x25,1110000113x16,2111000112x19,2100113x19,22101131133x15,2121113132212111121111313x26,x17,3111x25,x17,31111222x15,0113x111,00113x110,000110x19,0000110x17,x06,",
            "Bubble": "p[0,1]0110100110010110",
            "CastleFireball": ["same", ["characters", "Fireball"]],
            "CheepCheep": {
                "normal": {
                    "normal": "p[0,1,3,6]0003333x013,x35,011x07,x26,11110000121122221111000x16,222111100012121122x15,0001212112211110000x16,221112x05,1211x27,0000333x210,0000233x29,00300233x28,3330023311x26,333033331112222333000x18,20333x05,x15,0000300",
                    "two": "p[0,1,3,6]0003333x013,x35,x010,x26,3x07,1211x25,x06,x16,x25,111001212112222x15,0121211222x16,0x16,22x16,0001211222x16,00333x210,0300233x29,33000233x28,3300023311x26,300033331112222330000x18,203x07,x15,x07,"
                },
                "red": {
                    "normal": "p[0,1,6,8]0002222x013,x25,x010,x36,2x07,1311x35,x06,x16,x35,111001313113333x15,0131311333x16,0x16,33x16,0001311333x16,00222x310,0200322x39,22000322x38,2200032211x36,200022221113333220000x18,302x07,x15,x07,",
                    "two": "p[0,1,6,8]0002222x013,x25,011x07,x36,11110000131133331111000x16,333111100013131133x15,0001313113311110000x16,331113x05,1311x37,0000222x310,0000322x39,00200322x38,2220032211x36,222022221113333222000x18,30222x05,x15,0000200"
                },
                "flying": ["same", ["characters", "CheepCheep", "red"]]
            },
            "Coin": {
                "normal": {
                    "normal": {
                        "normal": "p[0,2,6,8]00222211000x26,11002233221102232212211223221221122322122112232212211223221221122322122112232212211223221221102211221100x26,1100022221100",
                        "two": "p[0,2,8]00222211000x26,1100x26,110x25,12211x25,12211x25,12211x25,12211x25,12211x25,12211x25,12211x25,1221102211221100x26,1100022221100",
                        "three": "p[0,2,9,11]00333311000x36,11003322331103323313311332331331133233133113323313311332331331133233133113323313311332331331103311331100x36,1100033331100"
                    },
                    "Underworld": {
                        "normal": "p[0,6,9,16]00111133000x16,33001122113301121131133112113113311211311331121131133112113113311211311331121131133112113113301133113300x16,3300011113300",
                        "two": "p[0,9,16]00111122000x16,2200x16,220x15,21122x15,21122x15,21122x15,21122x15,21122x15,21122x15,21122x15,2112201122112200x16,2200011112200",
                        "three": "p[0,9,11,16]00222233000x26,33002211223302212232233221223223322122322332212232233221223223322122322332212232233221223223302233223300x26,3300022223300"
                    }
                },
                "anim": {
                    "normal": "p[0,1,7]000012x08,12x07,1112x06,1112x06,1112x06,1112x06,1112x06,1112x06,1112x06,1112x06,1112x06,1112x07,12x08,120000",
                    "anim2": "p[0,1,6,7]000022x07,2222x05,x26,000022132200022122322002212232200221223220022122322002212232200221223220002213220000x26,x05,2222x07,220000",
                    "anim3": "p[0,1,6,7]000023x08,23x07,2333x06,2333x06,2333x06,2333x06,1333x06,1333x06,2333x06,2333x06,2333x06,2333x07,23x08,230000",
                    "anim4": "p[0,1,6]x05,2x09,2x09,2x09,2x09,2x09,2x09,1x09,1x09,2x09,2x09,2x09,2x09,2x09,20000"
                }
            },
            "Fireball": {
                "normal": "p[0,1,6,8]0303330000303330300032330033322303322123032212330332233000333300",
                "two": "p[0,1,6,8]x05,3000333000333233030322230033212x36,2122330332233000333300",
                "three": "p[0,1,6,8]0033330003322330332122303212233032233300332300030333030000333030",
                "four": "p[0,1,6,8]0033330003322330332212x36,2123300322230303323330003330003x05,"
            },
            "FireFlower": {
                "normal": {
                    "normal": "p[0,1,6,8,14]0000x18,x06,x112,000111x28,111011222x36,2221111222x36,222110111x28,111000x112,x06,x18,x011,44x07,444000044000044404440004400044400444400440044440004444044044440000444404404444x05,x410,x09,4444x06,",
                    "two": "p[0,2,5,9,14]0000x28,x06,x212,000222x38,222022333x16,3332222333x16,333220222x38,222000x212,x06,x28,x011,44x07,444000044000044404440004400044400444400440044440004444044044440000444404404444x05,x410,x09,4444x06,",
                    "three": "p[0,6,8,10,14]0000x18,x06,x112,000111x38,111011333x26,3331111333x26,333110111x38,111000x112,x06,x18,x011,44x07,444000044000044404440004400044400444400440044440004444044044440000444404404444x05,x410,x09,4444x06,",
                    "four": "p[0,1,6,14]0000x18,x06,x112,000111x28,111011222x36,2221111222x36,222110111x28,111000x112,x06,x18,x011,33x07,333000033000033303330003300033300333300330033330003333033033330000333303303333x05,x310,x09,3333x06,"
                },
                "Underworld": {
                    "normal": "p[0,1,6,8,16]0000x18,x06,x112,000111x28,111011222x36,2221111222x36,222110111x28,111000x112,x06,x18,x011,44x07,444000044000044404440004400044400444400440044440004444044044440000444404404444x05,x410,x09,4444x06,",
                    "two": "p[0,15,16,18]0000x38,x06,x312,000333x28,333033222x16,2223333222x16,222330333x28,333000x312,x06,x38,x011,22x07,222000022000022202220002200022200222200220022220002222022022220000222202202222x05,x210,x09,2222x06,",
                    "three": "p[0,6,8,10,16]0000x18,x06,x112,000111x38,111011333x26,3331111333x26,333110111x38,111000x112,x06,x18,x011,44x07,444000044000044404440004400044400444400440044440004444044044440000444404404444x05,x410,x09,4444x06,",
                    "four": "p[0,5,9,16]0000x18,x06,x112,000111x28,111011222x36,2221111222x36,222110111x28,111000x112,x06,x18,x011,33x07,333000033000033303330003300033300333300330033330003333033033330000333303303333x05,x310,x09,3333x06,"
                }
            },
            "Firework": ["same", ["solids", "Firework"]],
            "Goomba": {
                "normal": "p[0,2,5,9]x06,3333x011,x36,x09,x38,x07,x310,x05,311x36,11300033321333312333003332x16,23330333321233212x38,22233222x320,03333x26,3333x05,x28,x06,11x28,x05,x15,x25,110000x16,222111x05,x15,001110000",
                "Underworld": "p[0,15,16,18]x06,2222x011,x26,x09,x28,x07,x210,x05,211x26,11200022231222213222002223x16,32220222231322313x28,33322333x220,02222x36,2222x05,x38,x06,11x38,x05,x15,x35,110000x16,333111x05,x15,001110000",
                "Castle": ["filter", ["characters", "Goomba", "normal"], "Castle"]
            },
            "Hammer": {
                "normal": "p[0,2,5,8]x08,2x014,12101x010,111101x09,1122232x09,1211131x08,x16,31x08,10011131x09,x15,01x012,2x015,2x015,2x015,2x015,2x015,2x015,2x015,2x07,",
                "two": "p[0,2,5,8]x073,11x013,10111x011,101211x010,11112110x28,11112122x08,1111211x010,3333x011,1111211x065,",
                "three": "p[0,2,5,8]x07,2x015,2x015,2x015,2x015,2x015,2x015,2x015,2x012,10x15,x09,13111001x08,13x16,x08,1311121x09,2322211x09,101111x010,10121x014,2x08,",
                "four": "p[0,2,5,8]x065,1121111x011,3333x010,1121111x08,22121111x28,01121111x010,112101x011,11101x013,11x073,"
            },
            "HammerBro": {
                "normal": {
                    "normal": "p[0,1,6,14]003333x011,31x35,x08,31113313x09,31133313x08,311x35,x07,221221233x07,x25,122133x05,x25,12113333x06,21231x36,00022210311133313x06,3322113231x06,3222212331x06,x25,1323130000x25,1133233000x25,1133332200x25,313333233x06,33123323330000223311223333000022233111133x05,222x35,11110000222233x26,x05,222033x25,x06,2200002222x013,222",
                    "two": "p[0,1,6,14]003333x011,31x35,x08,31113313x09,31133313x08,311x35,x07,221221233x07,x25,122133x05,x25,1211333300002221231x36,x06,10311133313x06,3322113231x06,3222212331x06,3x25,32313x05,33x25,3233x05,33312222322x06,3313333233x06,3312333233x06,3311223333x07,33111133x08,x35,1111x07,23322233x08,x27,x010,x25,x012,2222000"
                },
                "throwing": {
                    "normal": "p[0,1,6,14]00003333x011,333313x09,3113331x010,31133332x07,231133322x06,x25,12322x06,x25,12222x06,x25,1122233x05,2221x25,333x07,1322223313x06,3322223231x06,33x25,331x06,33322132313x05,33311133233x05,3331x35,22x06,3313333233x06,33123323330000223311223333000022233111133x05,222x35,11110000222233x26,x05,222033x25,x06,2200002222x013,222",
                    "two": "p[0,1,6,14]00003333x011,333313x09,3113331x010,31133332x07,231133322x06,x25,12322x06,x25,12222x06,x25,1122233x05,2221x25,333x07,1322223313x06,3322223231x06,33x25,331x06,33322132313x05,33311133233x05,3331x35,22x06,3313333233x06,3312333233x06,3311223333x07,33111133x08,x35,1111x07,23322233x08,x27,x010,x25,x012,2222000"
                },
                "thrown": {
                    "normal": "p[0,1,6,14]003333x011,31x35,x08,31113313x09,31133313x08,311x35,x07,221221233x07,x25,122133x05,x25,12113333x06,21231x36,00022210311133313x06,3322113231x06,3222212331x06,x25,1323130000x25,1133233000x25,1133332200x25,313333233x06,33123323330000223311223333000022233111133x05,222x35,11110000222233x26,x05,222033x25,x06,2200002222x013,222",
                    "two": "p[0,1,6,14]003333x011,31x35,x08,31113313x09,31133313x08,311x35,x07,221221233x07,x25,122133x05,x25,12113333x06,21231x36,00022210311133313x06,3322113231x06,3222212331x06,x25,1323130000x25,1133233000x25,113333220022223313333233x06,3312333233x06,3311223333x07,33111133x08,x35,1111x07,23322233x08,x27,x010,x25,x012,2222000"
                }
            },
            "Koopa": {
                "normal": {
                    "normal": {
                        "jumping": {
                            "normal": "p[0,1,6,14]x019,1x09,11000111x07,1111001112x05,x15,0231122000x15,0023112200112110002311220012111100211122011211110222122201211110023x25,012111010x26,0012x15,022202203312111002200220331113330220221333232333002022133233323200002212x36,23000221132x35,2300002132323332320000212333232333x05,1x35,23333x05,113332323111000221112331110000x25,x15,22200x25,x06,2222",
                            "two": "p[0,1,6,14]00001x014,111x012,2111x012,23112x010,223112x010,223112x010,2211120011100002322122011211000x27,0121111002220022012x15,022000213x17,x05,22133x17,00022133331131110222213332323311002221232333232000021132x35,2300002132323332320000212333232333x05,1x35,23333x05,113332323111000021112331112x05,222x15,222x06,2220000222x07,2220022200"
                        },
                        "flying": {
                            "normal": "p[0,1,6,14]x019,1x09,11000111x07,1111001112x05,x15,0231122000x15,0023112200112110002311220012111100211122011211110222122201211110023x25,012111010x26,0012x15,022202203312111002200220331113330220221333232333002022133233323200002212x36,23000221132x35,2300002132323332320000212333232333x05,1x35,23333x05,113332323111000221112331110000x25,x15,22200x25,x06,2222",
                            "two": "p[0,1,6,14]00001x014,111x012,2111x012,23112x010,223112x010,223112x010,2211120011100002322122011211000x27,0121111002220022012x15,022000213x17,x05,22133x17,00022133331131110222213332323311002221232333232000021132x35,2300002132323332320000212333232333x05,1x35,23333x05,113332323111000021112331112x05,222x15,222x06,2220000222x07,2220022200"
                        },
                        "normal": {
                            "normal": "p[0,1,6,14]x019,1x014,111x013,1112x011,231122x010,231122x010,231122x010,211122x09,2221222x09,23x25,x09,x26,00x35,0002220220323332300220022033232333022022133332311300202213332323130000221232333232000221132x35,2300002132323332320000212333232333x05,1x35,23333x05,113332323111000221112331110000x25,x15,22200x25,x06,2222",
                            "two": "p[0,1,6,14]00001x014,111x012,2111x012,23112x010,223112x010,223112x010,221112x09,2322122x09,x27,x09,22200220x35,00022000213233323x06,2213323233x05,22133332311300222213332323130002221232333232000021132x35,2300002132323332320000212333232333x05,1x35,23333x05,113332323111000021112331112x05,222x15,222x06,2220000222x07,2220022200"
                        }
                    }
                },
                "smart": ["filter", ["characters", "Koopa", "normal", "normal"], "Smart"],
                "Underworld": {
                    "smart": ["same", ["characters", "Koopa", "smart"]],
                    "normal": ["filter", ["characters", "Koopa", "normal", "normal"], "UnderworldKoopa"]
                },
                "Castle": ["filter", ["characters", "Koopa", "normal", "normal"], "Castle"]
            },
            "Lakitu": {
                "normal": "p[0,1,6,14]x05,x25,x010,x27,x08,333233322x06,3111311132x06,3x17,323x05,3113131132330000311313113233x05,3332x37,x05,222333322233000x25,33x25,3003x25,11x25,30031222111122213003x112,303x114,33x15,3113x15,33x15,3113x15,33x15,3113x15,33x114,3313x110,3130311131111311130031111333311113003x112,3000311113311113x05,3333003333000",
                "hiding": "p[0,1,6,14]x0131,2220000222x05,x25,33x25,0000x25,11x25,00003222111122230003x112,303x114,33x15,3113x15,33x15,3113x15,33x15,3113x15,33x114,3313x110,3130311131111311130031111333311113003x112,3000311113311113x05,3333003333000"
            },
            "Player": {
                "dead": "p[0,6,8,10]x05,x25,x07,11x27,1100111131311313x16,3313113133x15,33311113331100x35,113333x05,331333313x06,33x16,3x05,222211112220003332233332233003333223322333003333212212333003333x26,333000333x26,3300",
                "normal": {
                    "normal": {
                        "jumping": "p[0,6,8,10]x013,111x06,x26,0111x05,x29,11x05,33311311333000031311131133300003133111311130000331111x36,x06,x17,33000x35,2333233000x37,2333220311x36,x26,0311112232212212330113x210,3300333x29,330333x28,x05,330x25,x07,",
                        "normal": {
                            "normal": "p[0,6,8,10]0000x26,x09,x210,x06,33331131x07,33131113111x05,331331113111000033311113333x07,x18,x07,3332333x08,333323323330000x35,2222333300011132122123110001111x26,111000111x28,11x05,222202222x06,333300033330000x35,000x35,00",
                            "hopping": ["same", ["characters", "Player", "normal", "normal", "normal", "running", "normal", "two"]],
                            // hopping": "p[0,6,8,10]x020,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3323333x08,333322333x07,3332212211x06,3333x26,x06,2331112222x07,23112222x09,2223333x09,x38,0000",
                            "running": {
                                "skidding": "p[0,6,8,10]x05,x26,x08,x28,33x07,131x37,0000x16,3113111001133113311311100033x16,3111x05,1123332222x05,3332231112220000x36,1113220000x36,112222x05,3333x26,x07,222233322x07,222x35,x09,2333223333x09,2x36,x010,x35,00",
                                "normal": {
                                    "normal": "p[0,6,8,10]x05,x26,x09,x210,x06,33331131x07,33131113111x05,331331113111000033311113333x07,x18,x05,x35,2233x05,1113333222333x17,3332122233x15,0x28,0330000x210,33000x211,330033322200222233003333x013,3333x010,",
                                    "two": "p[0,6,8,10]x020,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3323333x08,333322333x07,3332212211x06,3333x26,x06,2331112222x07,23112222x09,2223333x09,x38,0000",
                                    "three": "p[0,6,8,10]x021,x26,x09,x210,x06,33331131x07,33131113111x05,331331113111000033311113333x07,x18,x07,x35,2311x06,11x36,11100001112x35,11x05,333x27,x06,33x28,x05,333x27,x06,330003333x012,x35,x05,"
                                }
                            },
                            "paddling": {
                                "normal": {
                                    "normal": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,111x06,2x36,11x06,22233332x06,33x27,x07,33x26,x08,332222x010,30033x014,3x027,",
                                    "paddle1": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,1111x05,2x36,111x05,222333322x05,33x28,x06,33x27,x07,33x25,x09,330333x013,33x026,",
                                    "paddle2": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3233322x09,2x36,x08,222333311x05,33x25,33111000033x27,111000033x26,00110000330333x013,33x026,",
                                    "paddle3": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3332333x08,33332333x06,1333322333x05,1113322122x07,33x27,x07,33x25,x09,330333x013,33x026,"
                                },
                                "swim2": {
                                    "normal": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,111x06,2x36,11x06,22233332x07,3x27,x07,33x26,x010,3322x011,333x013,33x028,",
                                    "paddle1": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,1111x05,2x36,111x05,222333322x06,3x28,x06,33x27,x09,33222x010,3333x012,333x027,",
                                    "paddle2": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3233322x09,2x36,x08,222333311x06,3x25,33111000033x27,111x06,3322220011x05,3333x012,333x027,",
                                    "paddle3": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3332333x08,33332333x06,1333322333x05,1113322122x07,33x27,x09,332222x09,3333x012,333x027,"
                                }
                            },
                            "climbing": {
                                "normal": "p[0,6,8,10]0000x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3323333x09,222x35,x08,222x36,11100002222x35,111100x26,3333111100x211,33300x211,330000x29,x08,x26,x06,",
                                "two": "p[0,6,8,10]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x08,22x35,111x05,22x36,1111000222x36,1111000x25,122x08,x28,00033000x210,3330000x29,333x05,x28,333x016,"
                            }
                        }
                    },
                    "large": {
                        "jumping": "p[0,6,8,10]x012,111x012,11311x06,x25,113310000x27,x15,000x28,x35,000x211,33000333113111333300311311331111330031133x18,30031133111311113033x15,x37,0033331111333313000033x18,33x05,2222332333300x36,223233300x38,23323300x38,2232300033113333223320003111133222231000x15,32221222000x15,x28,0001011x29,003011x210,033000x29,33330003x28,x37,233x26,x37,222332222x37,x25,0022x37,x25,x08,3332222x09,33x014,3x015,",
                        "fiery": ["same", ["characters", "Player", "normal", "fiery"]],
                        "normal": {
                            "normal": "p[0,6,8,10]x06,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x07,2x15,3x09,32333323x07,3323333233x05,3332333323330003333233332333300333223333223330333322333322x38,x28,x38,2122221233331111x28,x18,x28,11110111x28,1110011x210,11000x212,000x26,00x26,00x25,0000x25,00x25,0000x25,000333300003333000033330000333300x36,0000x312,0000x36,",
                            "hopping": ["same", ["characters", "Player", "normal", "large", "normal", "running", "normal", "two"]],
                            "crouching": "p[0,6,8,10]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000331113111311110033x15,x36,000223x15,x35,0033323x19,0033323331113323033332x38,23033332x37,22x36,21x35,22x37,x28,x39,x26,x38,1112222111333231111222211113221111x26,1111202113x06,311200033330000333300x36,0000x36,",
                            "running": {
                                "skidding": "p[0,6,8,10]000x27,x09,11x27,33x06,1x27,333000x26,31133110022113113113111100013311311311110x16,3111213x16,3x15,22313111133331133223110333311113332x05,x15,x35,220003322233111332000333222x15,32000333233x15,3200x37,x15,0000x37,113122200x38,11222200x37,x27,00x36,x27,0000333x25,333x05,x25,x35,x06,x25,x38,0000222333311113x06,233x16,3x07,3112222x010,x27,003x07,222230033x07,22x37,x08,x37,x09,x36,x011,3333x012,3330000",
                                "normal": {
                                    "normal": "p[0,6,8,10]x06,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x08,33311x010,222233200010000333322332011100x36,223231110x37,223321110x37,223323130x36,222332330x36,22212313003333x29,000x15,x28,000x15,x28,0031111x29,0330111x27,x35,00023x26,x35,003223x25,x38,22233222x39,2222000x310,2x011,333x013,333x014,333x011,",
                                    "two": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,22110000322x37,1111003222x36,1111000222x37,1110002222x36,111000x26,3332x06,x210,x06,x29,30003333x27,322003333x25,3322200333322223222200033332220022220003333x05,333300033x07,33330003x08,x36,x010,x36,x017,",
                                    "three": "p[0,6,8,10]x022,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x05,33x18,x07,222211x09,32332233x07,323333223x07,3233332233x06,3233332223x06,32x35,113x06,3233331111x06,22333311112x05,22233311112200002222331112220000x26,332222x05,x25,33322x07,222x36,x07,22x36,x09,223333x010,3222333x09,3333033x08,x35,x011,x37,x011,x35,x05,"
                                }
                            },
                            "paddling": {
                                "normal": {
                                    "normal": "p[0,6,8,10]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x05,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x058,",
                                    "paddle1": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x05,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x042,",
                                    "paddle2": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,2x07,322x36,2x06,3222x36,11x05,222x36,11100002222x35,1111000x26,3331111000x210,011000x29,x06,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x042,",
                                    "paddle3": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x08,x36,233x07,x36,223x06,x36,22233x05,x35,x25,3000011333222122200001113x28,0001111x29,000111x29,x06,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x042,"
                                },
                                "swim2": {
                                    "normal": "p[0,6,8,10]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x043,",
                                    "paddle1": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x027,",
                                    "paddle2": "p[0,6,8,10]x022,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,2x07,322x36,2x06,3222x36,11x05,222x36,11100002222x35,1111000x26,3331111000x210,011000x29,x07,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x028,",
                                    "paddle3": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x08,x36,233x07,x36,223x06,x36,22233x05,x35,x25,3000011333222122200001113x28,0001111x29,000111x29,x07,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x027,"
                                }
                            },
                            "climbing": {
                                "normal": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x29,30330000x27,x35,x05,x26,x35,x07,22223333x011,x35,x013,33x015,3x018,",
                                "two": "p[0,6,8,10]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,22110000322x37,1111003222x36,1111000222x37,1110002222x36,111000x26,3332x06,x210,x06,x29,3x06,x210,033000x29,33330000x28,33330000x28,3333x05,x27,3333x064,"
                            }
                        }
                    },
                    "fiery": {
                        "jumping": {
                            "normal": "p[0,5,6,8]x012,222x012,22322x06,x15,223320000x17,x25,000x18,x35,000x111,33000333223222333300322322332222330032233x28,30032233222322223033x25,x37,0033332222333323000033x28,33x05,1111331333300x36,113133300x38,13313300x38,1131300033223333113310003222233111132000x25,31112111000x25,x18,0002222x19,003022x110,033000x19,33330003x18,x37,133x16,x37,111331111x37,x15,0011x37,x15,x08,3331111x09,33x014,3x015,",
                            "firing": ["same", ["characters", "Player", "normal", "fiery", "normal", "running", "normal", "two"]]
                        },
                        "normal": {
                            "normal": "p[0,5,6,8]x06,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000333x25,x35,x05,33x28,x07,1x25,3x09,31333313x07,3313333133x05,3331333313330003333133331333300333113333113330333311333311x38,x18,x38,1211112133332222x18,x28,x18,22220222x18,2220022x110,22000x112,000x16,00x16,00x15,0000x15,00x15,0000x15,000333300003333000033330000333300x36,0000x312,0000x36,",
                            "hopping": ["same", ["characters", "Player", "normal", "fiery", "normal", "running", "normal", "three"]],
                            "crouching": "p[0,5,6,8]x07,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000332223222322220033x25,x36,000113x25,x35,0033313x29,0033313332223313033331x38,13033331x37,11x36,12x35,11x37,x18,x39,x16,x38,2221111222333132222111122223112222x16,2222101223x06,322100033330000333300x36,0000x36,",
                            "firing": ["same", ["characters", "Player", "normal", "fiery", "normal", "running", "normal", "two"]],
                            "running": {
                                "skidding": "p[0,5,6,8]000x17,x09,22x17,33x06,2x17,333000x16,32233220011223223223222200023322322322220x26,3222123x26,3x25,11323222233332233113220333322223331x05,x25,x35,110003311133222331000333111x25,31000333133x25,3100x37,x25,0000x37,223211100x38,22111100x37,x17,00x36,x17,0000333x15,333x05,x15,x35,x06,x15,x38,0000111333322223x06,133x26,3x07,3221111x010,x17,003x07,111130033x07,11x37,x08,x37,x09,x36,x011,3333x012,3330000",
                                "normal": {
                                    "normal": "p[0,5,6,8]x06,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000333x25,x35,x05,33x28,x08,33322x010,111133100020000333311331022200x36,113132220x37,113312220x37,113313230x36,111331330x36,11121323003333x19,000x25,x18,000x25,x18,0032222x19,0330222x17,x35,00013x16,x35,003113x15,x38,11133111x39,1111000x310,1x011,333x013,333x014,333x011,",
                                    "two": "p[0,5,6,8]x039,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,11220000311x37,2222003111x36,2222000111x37,2220001111x36,222000x16,3331x06,x110,x06,x19,30003333x17,311003333x15,3311100333311113111100033331110011110003333x05,333300033x07,33330003x08,x36,x010,x36,0",
                                    "three": "p[0,5,6,8,10]x022,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000044x25,x35,x05,33x28,x07,111122x09,31331133x07,313333113x07,3133331133x06,3133331113x06,31x35,223x06,3133332222x06,11333322221x05,11133322221100001111332221110000x16,331111x05,x15,33311x07,111x36,x07,11x36,x09,113333x010,3111333x09,3333033x08,x35,x011,x37,x011,x35,x05,"
                                }
                            },
                            "paddling": {
                                "normal": {
                                    "normal": "p[0,6,8,10]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x05,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x058,",
                                    "paddle1": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,332222x05,3223332222x05,311x35,22x05,311x36,2x06,31x36,x08,31x35,13x07,313333113x08,113311133x07,x18,3x07,x15,2111x06,x110,x06,x110,x06,x110,x05,33x18,00003333x17,x05,3333x15,x07,33331113x08,3333033x09,3300033x09,300003x042,",
                                    "paddle2": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,1x07,311x36,1x06,3111x36,22x05,111x36,22200001111x35,2222000x16,3332222000x110,022000x19,x06,33x18,00003333x17,x05,3333x15,x07,33331113x08,3333033x09,3300033x09,300003x042,",
                                    "paddle3": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x08,x36,133x07,x36,113x06,x36,11133x05,x35,x15,3000022333111211100002223x18,0002222x19,000222x19,x06,33x18,00003333x17,x05,3333x15,x07,33331113x08,3333033x09,3300033x09,300003x042,"
                                },
                                "swim2": {
                                    "normal": "p[0,6,8,10]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x043,",
                                    "paddle1": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,332222x05,3223332222x05,311x35,22x05,311x36,2x06,31x36,x08,31x35,13x07,313333113x08,113311133x07,x18,3x07,x15,2111x06,x110,x06,x110,x06,x110,x06,x19,x07,x18,x08,3x15,x09,333111x010,x35,x011,3333x012,333x014,33x027,",
                                    "paddle2": "p[0,5,6,8]x022,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,1x07,311x36,1x06,3111x36,22x05,111x36,22200001111x35,2222000x16,3332222000x110,022000x19,x07,x19,x07,x18,x08,3x15,x09,333111x010,x35,x011,3333x012,333x014,33x028,",
                                    "paddle3": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x08,x36,133x07,x36,113x06,x36,11133x05,x35,x15,3000022333111211100002223x18,0002222x19,000222x19,x07,x19,x07,x18,x08,3x15,x09,333111x010,x35,x011,3333x012,333x014,33x027,"
                                }
                            },
                            "climbing": {
                                "normal": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,332222x05,3223332222x05,311x35,22x05,311x36,2x06,31x36,x08,31x35,13x07,313333113x08,113311133x07,x18,3x07,x15,2111x06,x110,x06,x110,x06,x110,x06,x19,x07,x19,30330000x17,x35,x05,x16,x35,x07,11113333x011,x35,x013,33x015,3x018,",
                                "two": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,11220000311x37,2222003111x36,2222000111x37,2220001111x36,222000x16,3331x06,x110,x06,x19,3x06,x110,033000x19,33330000x18,33330000x18,3333x05,x17,3333x064,"
                            }
                        }
                    },
                    "shrooming": {
                        "normal": "p[0,6,8,10]x0261,x25,x010,x29,x07,3331131x08,3131113111x06,31331113111x05,3311113333x08,x17,x08,332333x09,3332332333x05,33332222333300001132122123110000111x26,111000011x28,11x06,22200222x07,3330000333x05,33330000333300",
                        "shrooming2": "p[0,6,8,10]x0134,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x07,2x15,3x09,32333323x07,3323333233x05,33323333233300033332333323333011002122221200x15,0x28,0x16,x210,11101022220022220100022220000222200003333000033330000333300003333000x35,0000x35,0",
                        "shrooming3": "p[0,6,8,10]x06,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x07,2x15,3x09,32333323x07,3323333233x05,3332333323330003333233332333300333223333223330333322333322x38,x28,x38,2122221233331111x28,x18,x28,11110111x28,1110011x210,11000x212,000x26,00x26,00x25,0000x25,00x25,0000x25,000333300003333000033330000333300x36,0000x312,0000x36,"
                    }
                },
                "star": {
                    "normal": ["filter", ["characters", "Player", "normal"], "StarOne"],
                    "star2": ["filter", ["characters", "Player", "normal"], "StarTwo"],
                    "star3": ["filter", ["characters", "Player", "normal"], "StarThree"],
                    "star4": ["filter", ["characters", "Player", "normal"], "StarFour"]
                }
            },
            "Luigi": {
                "dead": "p[0,6,1,21]x05,x25,x07,11x27,1100111131311313x16,3313113133x15,33311113331100x35,113333x05,331333313x06,33x16,3x05,222211112220003332233332233003333223322333003333212212333003333x26,333000333x26,3300",
                "normal": {
                    "normal": {
                        "normal": "p[0,6,1,21]0000x26,x09,x210,x06,33331131x07,33131113111x05,331331113111000033311113333x07,x18,x07,3332333x08,333323323330000x35,2222333300011132122123110001111x26,111000111x28,11x05,222202222x06,333300033330000x35,000x35,00",
                        "hopping": ["same", ["characters", "Luigi", "normal", "normal", "running", "normal", "two"]],
                        "jumping": "p[0,6,1,21]x013,111x06,x26,0111x05,x29,11x05,33311311333000031311131133300003133111311130000331111x36,x06,x17,33000x35,2333233000x37,2333220311x36,x26,0311112232212212330113x210,3300333x29,330333x28,x05,330x25,x07,",
                        "running": {
                            "skidding": "p[0,6,1,21]x05,x26,x08,x28,33x07,131x37,0000x16,3113111001133113311311100033x16,3111x05,1123332222x05,3332231112220000x36,1113220000x36,112222x05,3333x26,x07,222233322x07,222x35,x09,2333223333x09,2x36,x010,x35,00",
                            "normal": {
                                "normal": "p[0,6,1,21]x05,x26,x09,x210,x06,33331131x07,33131113111x05,331331113111000033311113333x07,x18,x05,x35,2233x05,1113333222333x17,3332122233x15,0x28,0330000x210,33000x211,330033322200222233003333x013,3333x010,",
                                "two": "p[0,6,1,21]x020,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3323333x08,333322333x07,3332212211x06,3333x26,x06,2331112222x07,23112222x09,2223333x09,x38,0000",
                                "three": "p[0,6,1,21]x021,x26,x09,x210,x06,33331131x07,33131113111x05,331331113111000033311113333x07,x18,x07,x35,2311x06,11x36,11100001112x35,11x05,333x27,x06,33x28,x05,333x27,x06,330003333x012,x35,x05,"
                            }
                        },
                        "paddling": {
                            "normal": {
                                "normal": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,111x06,2x36,11x06,22233332x06,33x27,x07,33x26,x08,332222x010,30033x014,3x027,",
                                "paddle1": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,1111x05,2x36,111x05,222333322x05,33x28,x06,33x27,x07,33x25,x09,330333x013,33x026,",
                                "paddle2": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3233322x09,2x36,x08,222333311x05,33x25,33111000033x27,111000033x26,00110000330333x013,33x026,",
                                "paddle3": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3332333x08,33332333x06,1333322333x05,1113322122x07,33x27,x07,33x25,x09,330333x013,33x026,"
                            },
                            "swim2": {
                                "normal": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,111x06,2x36,11x06,22233332x07,3x27,x07,33x26,x010,3322x011,333x013,33x028,",
                                "paddle1": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,32x35,1111x05,2x36,111x05,222333322x06,3x28,x06,33x27,x09,33222x010,3333x012,333x027,",
                                "paddle2": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3233322x09,2x36,x08,222333311x06,3x25,33111000033x27,111x06,3322220011x05,3333x012,333x027,",
                                "paddle3": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3332333x08,33332333x06,1333322333x05,1113322122x07,33x27,x09,332222x09,3333x012,333x027,"
                            }
                        },
                        "climbing": {
                            "normal": "p[0,6,1,21]0000x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x07,3323333x09,222x35,x08,222x36,11100002222x35,111100x26,3333111100x211,33300x211,330000x29,x08,x26,x06,",
                            "two": "p[0,6,1,21]x05,x26,x09,x210,x06,33311311x07,31311131111x05,3133111311110000331111x35,x07,x18,x08,22x35,111x05,22x36,1111000222x36,1111000x25,122x08,x28,00033000x210,3330000x29,333x05,x28,333x016,"
                        }
                    },
                    "large": {
                        "normal": "p[0,6,1,21]x06,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x07,2x15,3x09,32333323x07,3323333233x05,3332333323330003333233332333300333223333223330333322333322x38,x28,x38,2122221233331111x28,x18,x28,11110111x28,1110011x210,11000x212,000x26,00x26,00x25,0000x25,00x25,0000x25,000333300003333000033330000333300x36,0000x312,0000x36,",
                        "jumping": "p[0,6,1,21]x012,111x012,11311x06,x25,113310000x27,x15,000x28,x35,000x211,33000333113111333300311311331111330031133x18,30031133111311113033x15,x37,0033331111333313000033x18,33x05,2222332333300x36,223233300x38,23323300x38,2232300033113333223320003111133222231000x15,32221222000x15,x28,0001011x29,003011x210,033000x29,33330003x28,x37,233x26,x37,222332222x37,x25,0022x37,x25,x08,3332222x09,33x014,3x015,",
                        "hopping": ["same", ["characters", "Luigi", "normal", "large", "running", "normal", "two"]],
                        "crouching": "p[0,6,1,21]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000331113111311110033x15,x36,000223x15,x35,0033323x19,0033323331113323033332x38,23033332x37,22x36,21x35,22x37,x28,x39,x26,x38,1112222111333231111222211113221111x26,1111202113x06,311200033330000333300x36,0000x36,",
                        "running": {
                            "skidding": "p[0,6,1,21]000x27,x09,11x27,33x06,1x27,333000x26,31133110022113113113111100013311311311110x16,3111213x16,3x15,22313111133331133223110333311113332x05,x15,x35,220003322233111332000333222x15,32000333233x15,3200x37,x15,0000x37,113122200x38,11222200x37,x27,00x36,x27,0000333x25,333x05,x25,x35,x06,x25,x38,0000222333311113x06,233x16,3x07,3112222x010,x27,003x07,222230033x07,22x37,x08,x37,x09,x36,x011,3333x012,3330000",
                            "normal": {
                                "normal": "p[0,6,1,21]x06,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x08,33311x010,222233200010000333322332011100x36,223231110x37,223321110x37,223323130x36,222332330x36,22212313003333x29,000x15,x28,000x15,x28,0031111x29,0330111x27,x35,00023x26,x35,003223x25,x38,22233222x39,2222000x310,2x011,333x013,333x014,333x011,",
                                "two": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,22110000322x37,1111003222x36,1111000222x37,1110002222x36,111000x26,3332x06,x210,x06,x29,30003333x27,322003333x25,3322200333322223222200033332220022220003333x05,333300033x07,33330003x08,x36,x010,x36,x017,",
                                "three": "p[0,6,1,21]x022,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x05,33x18,x07,222211x09,32332233x07,323333223x07,3233332233x06,3233332223x06,32x35,113x06,3233331111x06,22333311112x05,22233311112200002222331112220000x26,332222x05,x25,33322x07,222x36,x07,22x36,x09,223333x010,3222333x09,3333033x08,x35,x011,x37,x011,x35,x05,"
                            }
                        },
                        "paddling": {
                            "normal": {
                                "normal": "p[0,6,1,21]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x05,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x058,",
                                "paddle1": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x05,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x042,",
                                "paddle2": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,2x07,322x36,2x06,3222x36,11x05,222x36,11100002222x35,1111000x26,3331111000x210,011000x29,x06,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x042,",
                                "paddle3": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x08,x36,233x07,x36,223x06,x36,22233x05,x35,x25,3000011333222122200001113x28,0001111x29,000111x29,x06,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x042,"
                            },
                            "swim2": {
                                "normal": "p[0,6,1,21]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x043,",
                                "paddle1": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x027,",
                                "paddle2": "p[0,6,1,21]x022,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,2x07,322x36,2x06,3222x36,11x05,222x36,11100002222x35,1111000x26,3331111000x210,011000x29,x07,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x028,",
                                "paddle3": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x08,x36,233x07,x36,223x06,x36,22233x05,x35,x25,3000011333222122200001113x28,0001111x29,000111x29,x07,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x027,"
                            }
                        },
                        "climbing": {
                            "normal": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x29,30330000x27,x35,x05,x26,x35,x07,22223333x011,x35,x013,33x015,3x018,",
                            "two": "p[0,6,1,21]x023,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,x35,x06,3x18,x06,3222111x08,3233323x09,32333323x07,332x35,22110000322x37,1111003222x36,1111000222x37,1110002222x36,111000x26,3332x06,x210,x06,x29,3x06,x210,033000x29,33330000x28,33330000x28,3333x05,x27,3333x064,"
                        }
                    },
                    "fiery": {
                        "normal": "p[0,5,6,8]x06,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000333x25,x35,x05,33x28,x07,1x25,3x09,31333313x07,3313333133x05,3331333313330003333133331333300333113333113330333311333311x38,x18,x38,1211112133332222x18,x28,x18,22220222x18,2220022x110,22000x112,000x16,00x16,00x15,0000x15,00x15,0000x15,000333300003333000033330000333300x36,0000x312,0000x36,",
                        "jumping": "p[0,5,6,8]x012,222x012,22322x06,x15,223320000x17,x25,000x18,x35,000x111,33000333223222333300322322332222330032233x28,30032233222322223033x25,x37,0033332222333323000033x28,33x05,1111331333300x36,113133300x38,13313300x38,1131300033223333113310003222233111132000x25,31112111000x25,x18,0002222x19,003022x110,033000x19,33330003x18,x37,133x16,x37,111331111x37,x15,0011x37,x15,x08,3331111x09,33x014,3x015,",
                        "hopping": ["same", ["characters", "Luigi", "normal", "fiery", "running", "normal", "three"]],
                        "crouching": "p[0,5,6,8]x07,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000332223222322220033x25,x36,000113x25,x35,0033313x29,0033313332223313033331x38,13033331x37,11x36,12x35,11x37,x18,x39,x16,x38,2221111222333132222111122223112222x16,2222101223x06,322100033330000333300x36,0000x36,",
                        "firing": ["same", ["characters", "Luigi", "normal", "fiery", "running", "normal", "two"]],
                        "running": {
                            "skidding": "p[0,5,6,8]000x17,x09,22x17,33x06,2x17,333000x16,32233220011223223223222200023322322322220x26,3222123x26,3x25,11323222233332233113220333322223331x05,x25,x35,110003311133222331000333111x25,31000333133x25,3100x37,x25,0000x37,223211100x38,22111100x37,x17,00x36,x17,0000333x15,333x05,x15,x35,x06,x15,x38,0000111333322223x06,133x26,3x07,3221111x010,x17,003x07,111130033x07,11x37,x08,x37,x09,x36,x011,3333x012,3330000",
                            "normal": {
                                "normal": "p[0,5,6,8]x06,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000333x25,x35,x05,33x28,x08,33322x010,111133100020000333311331022200x36,113132220x37,113312220x37,113313230x36,111331330x36,11121323003333x19,000x25,x18,000x25,x18,0032222x19,0330222x17,x35,00013x16,x35,003113x15,x38,11133111x39,1111000x310,1x011,333x013,333x014,333x011,",
                                "two": "p[0,5,6,8]x039,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,11220000311x37,2222003111x36,2222000111x37,2220001111x36,222000x16,3331x06,x110,x06,x19,30003333x17,311003333x15,3311100333311113111100033331110011110003333x05,333300033x07,33330003x08,x36,x010,x36,0",
                                "three": "p[0,5,6,8,10]x022,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000044x25,x35,x05,33x28,x07,111122x09,31331133x07,313333113x07,3133331133x06,3133331113x06,31x35,223x06,3133332222x06,11333322221x05,11133322221100001111332221110000x16,331111x05,x15,33311x07,111x36,x07,11x36,x09,113333x010,3111333x09,3333033x08,x35,x011,x37,x011,x35,x05,"
                            }
                        },
                        "paddling": {
                            "normal": {
                                "normal": "p[0,6,1,21]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x05,33x28,00003333x27,x05,3333x25,x07,33332223x08,3333033x09,3300033x09,300003x058,",
                                "paddle1": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,332222x05,3223332222x05,311x35,22x05,311x36,2x06,31x36,x08,31x35,13x07,313333113x08,113311133x07,x18,3x07,x15,2111x06,x110,x06,x110,x06,x110,x05,33x18,00003333x17,x05,3333x15,x07,33331113x08,3333033x09,3300033x09,300003x042,",
                                "paddle2": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,1x07,311x36,1x06,3111x36,22x05,111x36,22200001111x35,2222000x16,3332222000x110,022000x19,x06,33x18,00003333x17,x05,3333x15,x07,33331113x08,3333033x09,3300033x09,300003x042,",
                                "paddle3": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x08,x36,133x07,x36,113x06,x36,11133x05,x35,x15,3000022333111211100002223x18,0002222x19,000222x19,x06,33x18,00003333x17,x05,3333x15,x07,33331113x08,3333033x09,3300033x09,300003x042,"
                            },
                            "swim2": {
                                "normal": "p[0,6,1,21]x07,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000033x15,331111x05,3113331111x05,322x35,11x05,322x36,1x06,32x36,x08,32x35,23x07,323333223x08,223322233x07,x28,3x07,x25,1222x06,x210,x06,x210,x06,x210,x06,x29,x07,x28,x08,3x25,x09,333222x010,x35,x011,3333x012,333x014,33x043,",
                                "paddle1": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,332222x05,3223332222x05,311x35,22x05,311x36,2x06,31x36,x08,31x35,13x07,313333113x08,113311133x07,x18,3x07,x15,2111x06,x110,x06,x110,x06,x110,x06,x19,x07,x18,x08,3x15,x09,333111x010,x35,x011,3333x012,333x014,33x027,",
                                "paddle2": "p[0,5,6,8]x022,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,1x07,311x36,1x06,3111x36,22x05,111x36,22200001111x35,2222000x16,3332222000x110,022000x19,x07,x19,x07,x18,x08,3x15,x09,333111x010,x35,x011,3333x012,333x014,33x028,",
                                "paddle3": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x08,x36,133x07,x36,113x06,x36,11133x05,x35,x15,3000022333111211100002223x18,0002222x19,000222x19,x07,x19,x07,x18,x08,3x15,x09,333111x010,x35,x011,3333x012,333x014,33x027,"
                            }
                        },
                        "climbing": {
                            "normal": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,332222x05,3223332222x05,311x35,22x05,311x36,2x06,31x36,x08,31x35,13x07,313333113x08,113311133x07,x18,3x07,x15,2111x06,x110,x06,x110,x06,x110,x06,x19,x07,x19,30330000x17,x35,x05,x16,x35,x07,11113333x011,x35,x013,33x015,3x018,",
                            "two": "p[0,5,6,8]x023,x15,x09,x16,2x08,x16,22x08,x111,x05,333223222x06,322322332222000032233x28,00332233222322220033x25,x36,000033x25,x35,x06,3x28,x06,3111222x08,3133313x09,31333313x07,331x35,11220000311x37,2222003111x36,2222000111x37,2220001111x36,222000x16,3331x06,x110,x06,x19,3x06,x110,033000x19,33330000x18,33330000x18,3333x05,x17,3333x064,"
                        }
                    },
                    "shrooming": {
                        "normal": "p[0,6,1,21]x0261,x25,x010,x29,x07,3331131x08,3131113111x06,31331113111x05,3311113333x08,x17,x08,332333x09,3332332333x05,33332222333300001132122123110000111x26,111000011x28,11x06,22200222x07,3330000333x05,33330000333300",
                        "shrooming2": "p[0,6,1,21]x0134,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x07,2x15,3x09,32333323x07,3323333233x05,33323333233300033332333323333011002122221200x15,0x28,0x16,x210,11101022220022220100022220000222200003333000033330000333300003333000x35,0000x35,0",
                        "shrooming3": "p[0,6,1,21]x06,x25,x09,x26,1x08,x26,11x08,x211,x05,333113111x06,311311331111000031133x18,00331133111311110033x15,x36,000333x15,x35,x05,33x18,x07,2x15,3x09,32333323x07,3323333233x05,3332333323330003333233332333300333223333223330333322333322x38,x28,x38,2122221233331111x28,x18,x28,11110111x28,1110011x210,11000x212,000x26,00x26,00x25,0000x25,00x25,0000x25,000333300003333000033330000333300x36,0000x312,0000x36,"
                    }
                },
                "star": {
                    "normal": ["filter", ["characters", "Luigi", "normal"], "StarOne"],
                    "star2": ["filter", ["characters", "Luigi", "normal"], "StarTwo"],
                    "star3": ["filter", ["characters", "Luigi", "normal"], "StarThree"],
                    "star4": ["filter", ["characters", "Luigi", "normal"], "StarFour"]
                }
            },
            "Mushroom": "p[0,1,6,8]x06,2222x011,332222x09,33332222x07,x35,x25,x05,22333x27,000x29,3332200x28,x35,202233x25,x35,222333x25,x35,22233x27,333x219,02333x16,3332x05,x18,x08,12x16,x08,12x16,x09,121111x05,",
            "Mushroom1Up": "p[0,1,6,14]x06,2222x011,332222x09,33332222x07,x35,x25,x05,22333x27,000x29,3332200x28,x35,202233x25,x35,222333x25,x35,22233x27,333x219,02333x16,3332x05,x18,x08,12x16,x08,12x16,x09,121111x05,",
            "MushroomDeathly": "p[0,5,9,16]x06,2222x011,332222x09,33332222x07,x35,x25,x05,22333x27,000x29,3332200x28,x35,202233x25,x35,222333x25,x35,22233x27,333x219,02333x16,3332x05,x18,x08,12x16,x08,12x16,x09,121111x05,",
            "Piranha": {
                "normal": {
                    "normal": "p[0,6,14]x022,2002x011,210012x09,22200222x08,12200221x07,2221001222x06,2222002222x05,1212200221210000x25,00x25,0000222120021222000021222002221200002222100122220000212220022212x05,2212002122x06,2222002222x07,12100121x010,2002x06,11x05,11x05,11121100011000112101211001100112100112110110112110001121011012110000111211112111x05,x110,000",
                    "two": "p[0,1,6,14]x034,3x010,30003211x06,112300331x08,1330023311000011332033321x06,12333233331100113333233233100001332x37,x06,x36,23333100133332x35,23100132333302x35,00x35,20033233300333233000333320023333x05,32x36,23x08,323323x05,22x05,22x05,22232200022000223202322002200223200223220220223220002232022023220000222322223222x05,x210,000"
                },
                "Underworld": {
                    "normal": "p[0,9,16]x022,2002x011,210012x09,22200222x08,12200221x07,2221001222x06,2222002222x05,1212200221210000x25,00x25,0000222120021222000021222002221200002222100122220000212220022212x05,2212002122x06,2222002222x07,12100121x010,2002x06,11x05,11x05,11121100011000112101211001100112100112110110112110001121011012110000111211112111x05,x110,000",
                    "two": "p[0,5,9,16]x034,3x010,30003211x06,112300331x08,1330023311000011332033321x06,12333233331100113333233233100001332x37,x06,x36,23333100133332x35,23100132333302x35,00x35,20033233300333233000333320023333x05,32x36,23x08,323323x05,22x05,22x05,22232200022000223202322002200223200223220220223220002232022023220000222322223222x05,x210,000"
                },
                "Castle": ["same", ["characters", "Piranha", "Underworld"]]
            },
            "Podoboo": "p[0,1,6,8]0000x36,x07,x38,x05,3332222333000333x26,33300332221122233033322111122x35,22x16,22333322x16,22333322x16,223333222111122233332222112222x35,232222323330x35,22x35,00x35,22x35,0003303333033x05,30033003000",
            "Shell": {
                "normal": {
                    "normal": {
                        "normal": "p[0,1,6,14]x05,233332x09,33222233x07,3323333233x06,32x36,23x05,32x38,230000232x36,2320002333233332333200x35,2222x35,01113323333233x17,2x36,2111100011x36,11x07,11333311x09,x16,x011,1111x06,",
                        "peeking": "p[0,1,6,14]x05,233332x09,33222233x07,3323333233x06,32x36,23x05,32x38,230000232x36,2320002333233332333200x35,2222x35,01113323333233x17,2x36,2111100211x36,11200022211333311222002220x16,02220022000111100022002x012,20"
                    },
                    "smart": ["filter", ["characters", "Shell", "normal", "normal"], "Smart"]
                },
                "Underworld": {
                    "smart": ["same", ["characters", "Shell", "normal", "smart"]],
                    "normal": {
                        "normal": "p[0,5,9,16]x05,233332x09,33222233x07,3323333233x06,32x36,23x05,32x38,230000232x36,2320002333233332333200x35,2222x35,01113323333233x17,2x36,2111100011x36,11x07,11333311x09,x16,x011,1111x06,",
                        "peeking": "p[0,5,6,9,16]x05,344443x09,44333344x07,4434444344x06,43x46,34x05,43x48,340000343x46,3430003444344443444300x45,3333x45,01114434444344x17,3x46,3111100211x46,11200022211444411222002220x16,02220022000111100022002x012,20"
                    }
                },
                "Castle": ["same", ["characters", "Shell", "normal", "normal"]]
            },
            "ShellBeetle": {
                "normal": "p[0,2,5,9]x06,1111x010,x18,x07,1111331111x05,1111322311110000x15,33x15,0000x112,000x114,00x114,00x114,00x114,00x114,00x114,00x114,0x35,x16,x35,000033311333x010,3333x06,",
                "Underworld": "p[0,15,16,18]x06,1111x010,x18,x07,1111221111x05,1111233211110000x15,22x15,0000x112,000x114,00x114,00x114,00x114,00x114,00x114,00x114,0x25,x16,x25,000022211222x010,2222x06,",
                "Castle": "p[0,1,3,4]x06,3333x010,x38,x07,3333223333x05,3333211233330000x35,22x35,0000x312,000x314,00x314,00x314,00x314,00x314,00x314,0x25,x36,x25,000022233222x010,2222x06,"
            },
            "Spiny": {
                "normal": "p[0,1,6,8]x024,1x015,1x014,122x08,10000122000010001200122220012000122012222012200012223222312220001122x35,1222003322331123322301113331122233330033133x25,x36,133133222333111333321x35,111x05,222x16,2220002222x06,2222",
                "two": "p[0,1,6,8]x08,1x015,1x014,122x08,10000122000010001200122220012000122012222012200012223222312220001122x35,1222003322331123322301113331122233330033133x25,x36,133133222333111333321x35,111x05,222x16,22x06,222000222x08,22000220000"
            },
            "SpinyEgg": {
                "normal": "p[0,1,6,8]x06,22x09,22322322x06,2x36,2x05,x310,00022311x35,22002311x37,200331x39,022x310,2222x310,220x39,133002x37,11320022x35,11322000x310,x05,2x36,2x06,22322322x09,22x06,",
                "two": "p[0,1,6,8]0000220022x08,233332x05,22x38,2200233311x35,20003311x36,0022331x37,2222x310,220x312,00x312,022x310,2222x37,1332200x36,11330002x35,1133320022x38,22x05,233332x08,2200220000"
            },
            "Star": {
                "normal": "p[0,6,8]x06,11x012,11x011,1111x010,1111x09,x16,0000x119,2112x15,01111211211110001112112111x05,x18,x06,x18,x05,x110,0000x110,00001111001111000111x06,1110011x08,110",
                "two": "p[0,2,9]x06,22x012,22x011,2222x010,2222x09,x26,0000x219,1221x25,02222122122220002221221222x05,x28,x06,x28,x05,x210,0000x210,00002222002222000222x06,2220022x08,220",
                "three": "p[0,5,8]x06,22x012,22x011,2222x010,2222x09,x26,0000x219,1221x25,02222122122220002221221222x05,x28,x06,x28,x05,x210,0000x210,00002222002222000222x06,2220022x08,220",
                "four": "p[0,6,14]x06,11x012,11x011,1111x010,1111x09,x16,0000x119,2112x15,01111211211110001112112111x05,x18,x06,x18,x05,x110,0000x110,00001111001111000111x06,1110011x08,110"
            },
            "Vine": ["multiple", "vertical", {
                "top": "p[0,6,14]00222x010,x25,x08,2211122x07,x25,12x09,222022x012,22x012,22x012,22x012,22x012,220022x08,2202222x07,2221112x07,x26,12x06,220x25,",
                "topheight": 7,
                "middle": "p[0,6,14]x06,22x012,22x012,22x08,220022x07,2222022x07,2111222x06,21x26,x06,x25,022x012,22x012,22x012,22x012,220022x08,2202222x07,2221112x07,x26,12x06,220x25,"
            }]
        },
        "solids": {
            "Block": {
                "normal": {
                    "used": "p[0,2,9]0x114,01x214,1121x210,1211x214,11x214,11x214,11x214,11x214,11x214,11x214,11x214,11x214,11x214,1121x210,1211x214,10x114,0",
                    "normal": {
                        "normal": "p[0,2,6,9]0x314,03x214,1321x210,12132222x35,x25,132223311133222213222331223312221322233122331222132222112333122213x26,3311122213x26,331x25,13x27,11x25,13x26,33x26,13x26,331x25,1321x25,112221213x214,x117,",
                        "two": "p[0,2,9]0x214,0x215,1221x210,121x215,1x26,111x26,1x26,1222212221x26,1222212221x25,11222212221x29,1112221x29,1x25,1x28,11x25,1x215,1x29,1x25,1221x25,11222121x215,x117,",
                        "three": "p[0,2,9,11]0x214,02x314,1231x310,13123333x25,x35,123332211122333312333221332213331233322133221333123333113222133312x36,2211133312x36,221x35,12x37,11x35,12x36,22x36,12x36,221x35,1231x35,113331312x314,x117,"
                    }
                },
                "Underworld": {
                    "used": "p[0,9,16]0x214,02x114,2212x110,2122x114,22x114,22x114,22x114,22x114,22x114,22x114,22x114,22x114,22x114,2212x110,2122x114,20x214,0",
                    "normal": {
                        "normal": "p[0,6,9,16]0x214,02x114,3213x110,31321111x25,x15,321112233322111132111223112231113211122311223111321111331222311132x16,2233311132x16,223x15,32x17,33x15,32x16,22x16,32x16,223x15,3213x15,331113132x114,x317,",
                        "two": "p[0,9,16]0x114,0x115,2112x110,212x115,2x16,222x16,2x16,2111121112x16,2111121112x15,22111121112x19,2221112x19,2x15,2x18,22x15,2x115,2x19,2x15,2112x15,22111212x115,x217,",
                        "three": "p[0,9,11,16]0x114,01x214,3123x210,32312222x15,x25,312221133311222231222113221132223122211322113222312222332111322231x26,1133322231x26,113x25,31x27,33x25,31x26,11x26,31x26,113x25,3123x25,332223231x214,x317,"
                    },
                },
                "Castle": ["same", ["solids", "Block", "Underworld"]]
            },
            "Brick": {
                "normal": {
                    "normal": "p[2,5,9]x116,x27,0x27,0x27,0x27,x017,2220x27,0x27,0x27,0x27,0x27,02222x016,x27,0x27,0x27,0x27,0x27,0x27,x017,2220x27,0x27,0x27,0x27,0x27,02222x016,",
                    "used": ["same", ["solids", "Block", "normal", "used"]]
                },
                "Underworld": {
                    // Not the same as Overworld because of the top line
                    "normal": "p[2,16]x17,0x17,0x17,0x17,0x17,0x17,x017,1110x17,0x17,0x17,0x17,0x17,01111x016,x17,0x17,0x17,0x17,0x17,0x17,x017,1110x17,0x17,0x17,0x17,0x17,01111x016,",
                    "used": ["same", ["solids", "Block", "normal", "used"]]
                },
                "Castle": ["filter", ["solids", "Brick", "normal"], "Castle"],
                "Alt2": ["filter", ["solids", "Brick", "normal"], "Alt2"]
            },
            "BridgeBase": "p[0,2,5,8]111000112221012222x35,222x35,222x35,222x35,22221012211100011",
            "Cannon": ["multiple", "vertical", {
                "top": "p[0,2,5,9]222x010,2222111x210,11222x110,x26,1x213,111x210,112x112,2112x112,2112x112,2112x15,22221112112111121111311211211121122113121121112121131312112111212113131211211121133113221122212x16,3122221102x16,302110002x18,3x06,2x18,3x05,2x110,300002x110,3000211x38,1130021333222233313021133x26,3313021133232232331132113233223323113211323322332311321132332233231132113x28,3113211333233233311321133322223331132111x38,11132x114,3",
                "middle": "p[2,5,9]1x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,21x014,2"
            }],
            "CastleAxe": {
                "normal": "p[0,2,4,6,9]003x010,3000323300420033130032333322333313032x35,42x35,1332x35,42x35,1332x35,42x35,1332x35,42x35,1332x35,42x35,130323333423333130002330042000313000300002200003x09,42x014,22x014,42x014,22x014,42x07,",
                "two": "p[0,2,4,9]003x010,3000323300320033130032333322333313032x36,2x35,1332x36,2x35,1332x36,2x35,1332x36,2x35,1332x36,2x35,13032x35,23333130002330032000313000300002200003x09,32x014,22x014,32x014,22x014,32x07,",
                "three": "p[0,2,4,9,11]004x010,4000424400320044140042444422444414042x45,32x45,1442x45,32x45,1442x45,32x45,1442x45,32x45,1442x45,32x45,140424444324444140002440032000414000400002200004x09,32x014,22x014,32x014,22x014,32x07,"
            },
            "CastleBlock": "p[0,4,9]0x114,01x214,1121x210,1211x214,11x214,11x214,11x214,11x214,11x214,11x214,11x214,11x214,11x214,1121x210,1211x214,10x114,0",
            "CastleBridge": "p[1,2,4,8]10001000100010001000100010001000122212223222322232223222322232223222322232223222322232221222122213331333133313331333133313331333",
            "CastleChain": "p[0,1,3]x014,1x013,1x014,22x011,12x013,22x011,12x012,102x012,22x011,12x012,102x012,22x011,12x013,22x011,12x012,102x012,22x013,",
            "CastleStone": {
                "normal": "p[1,2,3,4]0031x06,31000022310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,3102223331x37,13333x116,x06,31x06,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,31x37,1x37,x117,",
                "Underwater": "p[2,12,14,20]1103x16,03111122031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,0312220003x07,30000x316,x16,03x16,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,03x07,3x07,x317,"
            },
            "Cloud": "p[0,1,2]000x210,x05,2x110,20002x112,2002x112,2002x112,202x114,22x15,2112x15,22x15,2112x15,22x15,2112x15,22x114,2212x110,2120211121111211120021111222211112002x112,2000211112211112x05,2222002222000",
            "Coral": "p[0,7,8]0000100012x05,110001000120000121001000112000120110100012000020001010011211112000101001x26,100021100120000221000221112x06,2x05,22120001x05,1000012001x06,1011012001000100101001120122010001100012120022000021001122000020000211112x011,22212x06,",
            "DeadGoomba": {
                "normal": "p[0,5,9,15]x06,2222x09,x210,000022333222233322022111133331111x218,000x110,x07,x18,x05,x35,0000x35,0",
                "Underworld": "p[0,15,16,18]x06,2222x09,x210,000022111222211122022333311113333x218,000x310,x07,x38,x05,x15,0000x15,0",
                "Castle": ["filter", ["solids", "DeadGoomba", "normal"], "Castle"]
            },
            "Firework": {
                "normal": "p[0,6,8]x070,2002x010,20222202x09,221122x09,22111122x08,22111122x09,221122x09,20222202x010,2002x070,",
                "n2": "p[0,1,6,8]x020,3x06,3x09,303303x09,x38,x06,303232232303x05,3321221233x06,3221111223x05,3332111123330000333211112333x05,3221111223x06,3321221233x05,303232232303x06,x38,x09,303303x09,3x06,3x020,",
                "n3": "p[0,1,6,8]00030033330030000300x38,003000x35,22x35,00303323233232330300323x26,32300033321211212333033232x16,232x35,22x16,22x36,22x16,22x35,232x16,23233033321211212333000323x26,32300303323233232330300x35,22x35,000300x38,00300003003333003000"
            },
            "Floor": {
                "normal": "p[2,5,9]2x18,02111121x28,01222201x28,01222201x28,01222201x28,01022201x28,02000021x28,0x15,01x28,01222201x28,01222201x28,012222000x26,01x25,01100222201x25,0121100001x26,0122211101x26,01x26,01x25,002x06,21x06,2",
                "Underworld": "p[2,16,18]1x28,01222212x18,02111102x18,02111102x18,02111102x18,02011102x18,01000012x18,0x25,02x18,02111102x18,02111102x18,021111000x16,02x15,02200111102x15,0212200002x16,0211122202x16,02x16,02x15,001x06,12x06,1",
                "Underwater": {
                    "normal": "p[2,12,14]22x112,0221111x29,0011122111222211100122x15,2212221202112222011x25,0211222201x26,021x26,0x25,0221x26,0022201201x26,0000101011112222000100101222122220012011x25,02200122011x25,0200012001x25,001111220012220000122220022x06,2x07,2",
                    "Castle": ["same", ["solids", "Stone", "Castle", "Underwater"]]
                },
                "Castle": ["same", ["solids", "Stone", "Castle"]],
                "Alt2": ["filter", ["solids", "Floor", "normal"], "Alt2"]
            },
            "Pipe": {
                "normal": ["multiple", "vertical", {
                    "top": "p[0,2,13,14]x133,x230,11x35,x26,x319,1122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,232322x133,00x128,00",
                    "middle": "p[0,2,13,14]00122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,2322100"
                }],
                "Castle": {
                    "normal": ["multiple", "vertical", {
                        "top": "p[0,1,3,4]x333,x130,33x25,x16,x219,3311122x16,211x210,1212113311122x16,211x211,121113311122x16,211x210,1212113311122x16,211x211,121113311122x16,211x210,1212113311122x16,211x211,121113311122x16,211x210,1212113311122x16,211x211,121113311122x16,211x210,1212113311122x16,211x211,121113311122x16,211x210,121211x333,00x328,00",
                        "middle": "p[0,1,3,4]00311122x15,211x28,1211130000311122x15,211x29,121130000311122x15,211x28,1211130000311122x15,211x29,121130000311122x15,211x28,1211130000311122x15,211x29,121130000311122x15,211x28,1211130000311122x15,211x29,121130000311122x15,211x28,1211130000311122x15,211x29,121130000311122x15,211x28,1211130000311122x15,211x29,121130000311122x15,211x28,1211130000311122x15,211x29,121130000311122x15,211x28,1211130000311122x15,211x29,1211300"
                    }],
                    "Underwater": ["multiple", "vertical", {
                        "top": "p[0,5,9,17]x133,x230,11x35,x26,x319,1122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,2323221122233x26,322x311,232221122233x26,322x310,232322x133,00x128,00",
                        "middle": "p[5,9,17,20]33011122x15,211x28,1211103333011122x15,211x29,121103333011122x15,211x28,1211103333011122x15,211x29,121103333011122x15,211x28,1211103333011122x15,211x29,121103333011122x15,211x28,1211103333011122x15,211x29,121103333011122x15,211x28,1211103333011122x15,211x29,121103333011122x15,211x28,1211103333011122x15,211x29,121103333011122x15,211x28,1211103333011122x15,211x29,121103333011122x15,211x28,1211103333011122x15,211x29,1211033"
                    }]
                },
                "Alt": ["same", ["solids", "Pipe", "Castle"]],
                "Alt2": ["same", ["solids", "Pipe", "Castle"]]
            },
            "PipeHorizontal": {
                "normal": "p[0,2,13,14]x115,x024,1x213,x122,0001x213,11x220,1001x213,11x220,1001x213,11x220,1001x313,11x221,101x313,11x321,101x213,11x321,101x213,11x221,101x213,11x221,101x213,11x222,11x213,11x222,11x313,11x222,11x213,11x322,11x213,11x222,11x213,11x222,11x213,11x322,11x313,11x322,11x313,11x322,11x313,11x322,11x313,11x322,11x313,11x322,11x313,11x321,101x313,11x321,101x313,11x321,101x313,11323232323232323232323101323232323232311232323232323232323232101232323232323211323232323232323232321001323232323232311x220,1001x213,11x220,1001x213,x122,000x115,x024,",
                "small": "p[0,2,13,14]x115,01x213,111x213,111x213,111x213,111x313,111x313,111x213,111x213,111x213,111x213,111x213,111x313,111x213,111x213,111x213,111x213,111x313,111x313,111x313,111x313,111x313,111x313,111x313,111x313,111x313,111323232323232311123232323232321113232323232323111x213,111x213,x117,0"
            },
            "PipeVertical": {
                "normal": "p[0,2,13,14]012232x310,223x25,332222100122232x39,223x25,33222210012232x310,223x25,332222100122232x39,223x25,33222210012232x310,223x25,332222100122232x39,223x25,33222210012232x310,223x25,332222100122232x39,223x25,33222210012232x310,223x25,332222100122232x39,223x25,33222210012232x310,223x25,332222100122232x39,223x25,33222210012232x310,223x25,332222100122232x39,223x25,33222210012232x310,223x25,332222100122232x39,223x25,33222210",
                "Castle": {
                    "normal": "p[0,1,3,4]00211133x15,311x38,1311120000211133x15,311x39,131120000211133x15,311x38,1311120000211133x15,311x39,131120000211133x15,311x38,1311120000211133x15,311x39,131120000211133x15,311x38,1311120000211133x15,311x39,131120000211133x15,311x38,1311120000211133x15,311x39,131120000211133x15,311x38,1311120000211133x15,311x39,131120000211133x15,311x38,1311120000211133x15,311x39,131120000211133x15,311x38,1311120000211133x15,311x39,1311200",
                    "Underwater": "p[0,7,8,17]00122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,232210000122233x25,322x38,2322210000122233x25,322x39,2322100"
                }
            },
            "Platform": {
                "normal": "p[0,1,6,9]x18,x38,220000222x05,322x05,32223333x210,x38,",
                "Sky": "p[0,1,6]001111000x15,2012x15,212x15,212211112112211220111122000222200"
            },
            "RestingStone": ["same", ["solids", "Stone"]],
            "Scale": {
                "normal": ["multiple", "horizontal", {
                    "left": "p[0,2,5,9]000x27,00x28,0222333000022x35,00223331333022331113302233313330220x35,00220033300022x08,",
                    "middle": "p[0,5]x120,x080,",
                    "right": "p[0,2,5,9]x27,000x28,x05,333222000x35,22003331333220331113322033313332200x35,0220003330022x08,22"
                }],
                "Alt": ["multiple", "horizontal", {
                    "left": "p[0,1,2,9]000x17,00x18,0111333000011x35,00113332333011332223301133323330110x35,00110033300011x08,",
                    "middle": "p[0,1]x120,x080,",
                    "right": "p[0,1,2,9]x17,000x18,x05,333111000x35,11003332333110332223311033323331100x35,0110003330011x08,11"
                }]
            },
            "Springboard": {
                "normal": ["multiple", "vertical", {
                    "top": "p[8]x032,",
                    "topheight": 1,
                    "middle": "p[0,1,6]x05,110011x010,210012x010,200002x010,200002x09,2x06,2x08,2x06,2x08,2x06,2x07,2x08,2x05,12x08,21000011x08,11000011x08,11000012x08,21x05,2x08,2x07,2x06,2x08,2x06,2x08,2x06,2x09,200002x010,200002x010,210012x010,110011x05,",
                    "middleStretch": true,
                    "bottom": "p[2,8,9]x132,x27,0x27,0x27,0x27,x017,2220x27,0x27,0x27,0x27,0x27,02222x016,",
                    "bottomheight": 4,
                }]
            },
            "Stone": {
                "normal": "p[2,5,9]2x114,012x112,00112x110,0001112x18,00001111x28,00001111x28,00001111x28,00001111x28,00001111x28,00001111x28,00001111x28,00001111x28,0000111x09,200011x011,2001x013,2x016,2",
                "Underwater": ["same", ["solids", "Floor", "Underwater", "normal"]],
                "Underworld": ["filter", ["solids", "Stone", "normal"], "Underworld"],
                "Castle": {
                    "normal": "p[1,2,3,4]0031x06,31000022310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,3102223331x37,13333x116,x06,31x06,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,310x25,31x37,1x37,x117,",
                    "Underwater": "p[2,3,14,20]1103x16,03111122031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,0312220003x07,30000x316,x16,03x16,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,031x25,03x07,3x07,x317,"
                },
                "Sky": "p[0,1,2]000x210,x05,2x110,20002x112,2002x112,2002x112,202x114,22x15,2112x15,22x15,2112x15,22x15,2112x15,22x114,2212x110,2120211121111211120021111222211112002x112,2000211112211112x05,2222002222000",
                "Alt": ["filter", ["solids", "Stone", "normal"], "Alt"],
                "Alt2": ["filter", ["solids", "Stone", "normal"], "Alt2"],
            },
            "ShroomTop": ["multiple", "horizontal", {
                "left": "p[0,2,6,8]000x113,001x36,x27,01x37,x27,01x37,x27,1x38,x27,1x37,x28,1x37,222333221x36,222x35,21x35,222x37,1x28,x37,1x28,x37,1x29,x35,21x210,333221x215,011x213,000x113,",
                "middle": "p[2,6,8]x016,1x28,x18,x28,x19,x26,x132,x25,x110,x27,x19,x27,x18,x29,x17,x29,x17,x29,x17,x29,x18,x27,x19,x27,x110,x25,111x016,",
                "right": "p[0,2,6,8]x113,000x38,x25,100x38,x26,10x38,x26,10x38,222333212x36,222x35,1223333222x36,1x29,x36,1x29,x36,1x210,x35,1x211,33321x215,1x215,1x215,1x214,x117,0"
            }],
            "TreeTop": {
                "normal": ["multiple", "horizontal", {
                    "left": "p[0,2,13]00x114,011x213,01x214,11x214,1x215,1x215,1x215,1x215,1x215,1x215,1x215,1x215,1x215,1x26,1x27,1012222101x25,10001111000x15,00",
                    "middle": "p[2,8,13]x016,x2199,0x27,00x25,010x25,011x05,111x05,11",
                    "right": "p[0,2,13]x114,00x213,110x214,10x214,11x215,1x215,1x215,1x215,1x215,1x215,1x215,1x215,1x215,11x27,1x26,101x25,10122221000x15,000111100"
                }],
                "Alt": ["multiple", "horizontal", {
                    "left": "p[0,1,4]00x214,022x113,02x114,22x114,2x115,2x115,2x115,2x115,2x115,2x115,2x115,2x115,2x115,2x16,2x17,2021111202x15,20002222000x25,00",
                    "middle": "p[1,3,4]x216,x0199,2x07,22x05,212x05,211x25,111x25,11",
                    "right": "p[0,1,4]x213,000x113,200x114,20x114,20x115,2x115,2x115,2x115,2x115,2x115,2x115,2x115,2x115,22x17,2x16,202x15,20211112000x25,000222200"
                }],
                "Alt2": ["same", ["solids", "TreeTop", "Alt"]]
            },
            "WaterBlock": "20"
        },
        "scenery": {
            "BrickHalf": {
                "normal": "p[2,9]x17,0x17,0x17,0x17,0x17,0x17,x017,1110x17,0x17,0x17,0x17,0x17,01111x016,",
                "Alt2": ["filter", ["scenery", "BrickHalf", "normal"], "Alt2"]
            },
            "BrickPlain": {
                "normal": "p[2,9]x17,0x17,0x17,0x17,0x17,0x17,x017,1110x17,0x17,0x17,0x17,0x17,01111x016,x17,0x17,0x17,0x17,0x17,0x17,x017,1110x17,0x17,0x17,0x17,0x17,01111x016,x17,0x17,0",
                "Alt2": ["filter", ["scenery", "BrickPlain", "normal"], "Alt2"]
            },
            "BridgeBase": "p[0,2,5,9]111000112221012222x35,222x35,222x35,222x35,22221012211100011",
            "Bush1": "p[0,2,13,14]x014,1111x027,122221x024,11x26,1x022,1x28,101x020,1x29,121x019,1x26,3x25,1x017,122233222322221x016,12223x210,1x013,111x216,1001x08,1x219,10121x06,1x221,1221x06,x225,1010011x226,1211x230,11x230,101x228,10",
            "Bush2": "p[0,2,13,14]x014,1111x012,1111x027,122221x010,122221x024,11x26,1x07,11x26,1x022,1x28,10100001x28,101x020,1x29,1210001x29,121x019,1x26,3x25,1001x26,3x25,1x017,1222332223222210122233222322221x016,12223x210,112223x210,1x013,111x232,1001x08,1x235,10121x06,1x237,1221x06,x241,1010011x242,1211x246,11x246,101x244,10",
            "Bush3": "p[0,2,13,14]x014,1111x012,1111x012,1111x027,122221x010,122221x010,122221x024,11x26,1x07,11x26,1x07,11x26,1x022,1x28,10100001x28,10100001x28,101x020,1x29,1210001x29,1210001x29,121x019,1x26,3x25,1001x26,3x25,1001x26,3x25,1x017,12223322232222101222332223222210122233222322221x016,12223x210,112223x210,112223x210,1x013,111x248,1001x08,1x251,10121x06,1x253,1221x06,x257,1010011x258,1211x262,11x262,101x260,10",
            "CastleBridge": "p[1,2,4,9]10001000100010001000100010001000122212223222322232223222322232223222322232223222322232221222122213331333133313331333133313331333",
            "CastleChain": "p[0,1,3]x014,1x013,1x014,22x011,12x013,22x011,12x012,102x012,22x011,12x012,102x012,22x011,12x013,22x011,12x012,102x012,22x013,",
            "CastleDoor": {
                "normal": "p[2,9]x17,0x17,0x17,0x17,0x17,0x17,x017,1110x17,0x17,0x17,0x17,0x17,01111x016,x15,x06,11110111x010,11011x012,1x017,1x014,11x014,1x0416,",
                "Alt2": ["filter", ["scenery", "CastleDoor", "normal"], "Alt2"]
            },
            "CastleFlag": "p[0,1,6,8]02x011,222x011,2x012,3x111,03x15,3x15,03x15,3x15,0311x37,1103111x35,11103111133311110311133133111031113111311103x111,03x012,3x012,3x012,3x012,3x012,3x012,3x012,3x011,",
            "CastleRailing": {
                "normal": "p[0,2,5,9]2222x07,x25,3332x07,2x37,2x07,2x37,2x07,2x37,2x07,2x37,2x07,2x37,2x07,23333111x29,1111",
                "Alt2": ["filter", ["scenery", "CastleRailing", "normal"], "Alt2"]
            },
            "CastleRailingFilled": {
                "normal": "p[2,5,9]11112220222x15,222122202221x27,122202221x27,1x07,1x27,1x27,1x27,1x27,1x27,1x27,12222000x19,0000",
                "Alt2": ["filter", ["scenery", "CastleRailingFilled", "normal"], "Alt2"]
            },
            "CastleTop": {
                "normal": "p[2,9]x17,0x17,0x17,0x17,0x17,0x17,0x17,0x17,0x17,x025,1110x17,0x17,0x17,0x17,0x17,0x17,0x17,0x17,01111x024,x17,x09,x17,0x17,x09,x17,0x17,x09,x17,x025,11101111x08,1110x17,01111x08,1110x17,01111x08,11101111x024,x17,x09,x17,0x17,x09,x17,0x17,x09,x17,x025,11101111x08,1110x17,01111x08,1110x17,01111x08,11101111x024,",
                "Alt2": ["filter", ["scenery", "CastleTop", "normal"], "Alt2"]
            },
            "CastleWall": {
                "normal": "p[0,2,5,9]2222x07,x25,3332x07,2x37,2x07,2x37,2x07,2x37,2x07,2x37,2x07,2x37,2x07,23333111x29,1111x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,x37,1x37,1x37,1x37,1x37,1x37,x117,3331x37,1x37,1x37,1x37,1x37,13333x116,",
                "Alt2": ["filter", ["scenery", "CastleWall", "normal"], "Alt2"]
            },
            "Cloud1": {
                "normal": "p[0,1,2,19]x014,2222x027,211112x024,22x16,2x022,2x18,202x020,2x19,212x019,2x16,3x15,2x017,211133111311112x016,21113x110,2x013,222x116,2002x08,2x119,20212x06,2x121,2112x06,x125,2020022x126,2122x130,22x130,202x128,20002113x111,3x111,2x05,2113113x16,3x113,2x05,2113333111333311113x18,200002x15,x36,1x35,x19,x06,2221111331111333x18,22x09,2x16,2x18,21122x012,221112022111122022x016,22200002222x010,",
                "Alt2": ["filter", ["scenery", "Cloud1", "normal"], "Alt2"]
            },
            "Cloud2": {
                "normal": "p[0,1,2,19]x014,2222x012,2222x027,211112x010,211112x024,22x16,2x07,22x16,2x022,2x18,20200002x18,202x020,2x19,2120002x19,212x019,2x16,3x15,2002x16,3x15,2x017,2111331113111120211133111311112x016,21113x110,221113x110,2x013,222x132,2002x08,2x135,20212x06,2x137,2112x06,x141,2020022x142,2122x146,22x146,202x144,20002113x111,3x115,3x111,2x05,2113113x16,3x18,3x16,3x113,2x05,21133331113333111131333111333311113x18,200002x15,x36,1x35,1111x36,1x35,x19,x06,2221111331111333x17,331111333x18,22x09,2x16,2x18,2x16,2x18,21122x012,2211120221111220221112022111122022x016,22200002222x05,22200002222x010,",
                "Alt2": ["filter", ["scenery", "Cloud2", "normal"], "Alt2"]
            },
            "Cloud3": {
                "normal": "p[0,1,2,19]x014,2222x012,2222x012,2222x027,211112x010,211112x010,211112x024,22x16,2x07,22x16,2x07,22x16,2x022,2x18,20200002x18,20200002x18,202x020,2x19,2120002x19,2120002x19,212x019,2x16,3x15,2002x16,3x15,2002x16,3x15,2x017,21113311131111202111331113111120211133111311112x016,21113x110,221113x110,221113x110,2x013,222x148,2002x08,2x151,20212x06,2x153,2112x06,x157,2020022x158,2122x162,22x162,202x160,20002113x111,3x115,3x115,3x111,2x05,2113113x16,3x18,3x16,3x18,3x16,3x113,2x05,211333311133331111313331113333111131333111333311113x18,200002x15,x36,1x35,1111x36,1x35,1111x36,1x35,x19,x06,2221111331111333x17,331111333x17,331111333x18,22x09,2x16,2x18,2x16,2x18,2x16,2x18,21122x012,22111202211112202211120221111220221112022111122022x016,22200002222x05,22200002222x05,22200002222x010,",
                "Alt2": ["filter", ["scenery", "Cloud3", "normal"], "Alt2"]
            },
            "Fence": "p[0,2,5,9]000023222331x08,2322333100003322232233312222333323223331333311112322333x15,000023223331x08,23223331x08,23232331x08,23232331x08,2323233100003322232323312222333323232331333311112322233x15,000023222331x08,23222331x08,232223310000",
            "Flag": {
                "normal": "p[0,1,14]x116,0x18,x25,1100x16,22121221000x15,211211210000111121222121x05,11122212221x06,11x27,1x07,111222111x08,x18,x09,x17,x010,x16,x011,x15,x012,1111x013,111x014,11x015,1",
                "Alt": "p[0,5,16]x116,0x18,x25,1100x16,22121221000x15,211211210000111121222121x05,11122212221x06,11x27,1x07,111222111x08,x18,x09,x17,x010,x16,x011,x15,x012,1111x013,111x014,11x015,1",
                "Alt2": ["same", ["scenery", "Flag", "Alt"]]
            },
            "FlagPole": {
                "normal": "p[13]x0288,",
                "Alt": "p[1]x0288,",
                "Alt2": ["same", ["scenery", "FlagPole", "Alt"]]
            },
            "FlagTop": {
                "normal": "p[0,2,13,14]001111000123331012x35,112x35,11x36,11x36,10133331000111100",
                "Alt": "p[0,1,3,4]002222000213332021x35,221x35,22x36,22x36,20233332000222200",
                "Alt2": ["same", ["scenery", "FlagTop", "Alt"]]
            },
            "HillLarge": "p[0,2,14]x037,x16,x071,111x26,111x066,11x212,11x063,1x213,1221x061,1x213,111221x059,1x214,1112221x057,1x215,11122221x055,1x213,112111x25,1x053,1x214,11221x27,1x051,1x215,11x211,1x049,1x216,11x212,1x047,1x232,1x045,1x234,1x043,1x236,1x041,1x238,1x039,1x240,1x037,1x242,1x035,1x244,1x033,1x246,1x031,1x213,1x223,1x210,1x029,1x213,111x221,111x210,1x027,1x214,111x221,111x211,1x025,1x215,111x221,111x212,1x023,1x213,112111x218,112111x213,1x021,1x214,11221x219,11221x215,1x019,1x215,11x222,11x219,1x017,1x216,11x222,11x220,1x015,1x264,1x013,1x266,1x011,1x268,1x09,1x270,1x07,1x272,1x05,1x274,10001x276,101x278,1",
            "HillSmall": "p[0,2,14]x021,x16,x039,111x26,111x034,11x212,11x031,1x213,1221x029,1x213,111221x027,1x214,1112221x025,1x215,11122221x023,1x213,112111x25,1x021,1x214,11221x27,1x019,1x215,11x211,1x017,1x216,11x212,1x015,1x232,1x013,1x234,1x011,1x236,1x09,1x238,1x07,1x240,1x05,1x242,10001x244,101x246,1",
            "Peach": "p[0,1,2,6,8]x019,303303x010,x36,x09,x48,x07,x410,x07,4443234444x07,433233434x06,x37,434x07,x38,44x05,3444x35,44x05,34433334444x06,x36,4444x06,4413341444x05,44133111144x05,431111331440000x39,144x05,x37,1444x07,44111144x07,x110,x05,x112,0000x112,0001111x46,111100x414,00x45,1111x45,0",
            "PlatformString": {
                "normal": "x008,",
                "Castle": "x018,"
            },
            "PlantLarge": {
                "normal": "p[0,2,5,13]x06,1111x010,11333311x07,1x38,1x05,1x310,10001x312,1001x312,101x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,11x314,101x312,1001x312,1001x312,10001x310,1000011x38,11x05,1113333111x07,x18,x09,x17,x08,1x26,1x08,12222121x08,12222121x08,12222121x08,12222121x08,11222211x09,121121x09,12122121x08,1x26,1x08,12222121x08,12222121x08,12222121x08,12222121x08,11222211x09,121121x09,121221210000",
                "Alt": "p[0,1,2,3,5]x06,3333x010,33111133x07,3x18,3x05,3x110,30003x112,3003x112,303x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,33x114,303x112,3003x112,3003x112,30003x110,3000033x18,33x05,3331111333x07,x38,x09,x37,x08,2x46,2x08,24444242x08,24444242x08,24444242x08,24444242x08,22444422x09,242242x09,24244242x08,2x46,2x08,24444242x08,24444242x08,24444242x08,24444242x08,22444422x09,242242x09,242442420000",
                "Alt2": ["same", ["scenery", "PlantLarge", "Alt"]]
            },
            "PlantSmall": {
                "normal": "p[0,2,5,13]x05,1111x08,11333311x05,1x38,10001x310,101x312,11x312,11x312,11x312,11x312,101x310,10011x38,110001113333111x05,x18,x07,x17,x06,1x26,1x06,12222121x06,12222121x06,12222121x06,12222121x06,11222211x07,121121x07,12122121x06,1x26,1x06,12222121x06,12222121x06,12222121x06,12222121x06,11222211x07,121121x07,12122121000",
                "Alt": "p[0,1,2,3,5]x05,3333x08,33111133x05,3x18,30003x110,303x112,33x112,33x112,33x112,33x112,303x110,30033x18,330003331111333x05,x38,x07,x37,x06,2x46,2x06,24444242x06,24444242x06,24444242x06,24444242x06,22444422x07,242242x07,24244242x06,2x46,2x06,24444242x06,24444242x06,24444242x06,24444242x06,22444422x07,242242x07,24244242000",
                "Alt2": ["same", ["scenery", "PlantSmall", "Alt"]]
            },
            "Railing": {
                "normal": "p[0,2,13]2x06,221x05,12010001220100012200111022x06,22x06,22x06,2",
                "Night": "p[0,1,3]1x06,112x05,21020002110200021100222011x06,11x06,11x06,1"
            },
            "ShroomTrunk": ["multiple", "vertical", {
                "top": "p[2,5,9]0x114,00x114,00x114,00x114,00x114,00111121111211110021121211212112001221112211122100x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,0",
                "middle": "p[2,5]0x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,00x114,0"
            }],
            "String": "x058,",
            "StringCornerLeft": "p[0,5,9]000x17,00x18,0111222000011x25,00112220222011220002201122202220110x25,00110022200011x08,",
            "StringCornerRight": "p[0,5,9]x17,000x18,x05,222111000x25,11002220222110220002211022202221100x25,0110002220011x08,11",
            "Toad": "p[0,1,2,6,8]x038,1111x010,x18,x06,144411114441000114441441444110011441444414411044111144441111x45,1114444111x46,1111441111x46,x110,x45,1133233233114401143323323341100300x38,00303330333223330x37,443333443333003x410,300004444333344440000444x36,4440000444x36,444x05,x110,x05,x112,000444x18,444041444x16,4441x47,1111x412,1111x46,",
            "TreeTrunk": {
                "normal": "p[2,9]x112,0x17,0x17,0x16,0x17,0x17,0x112,",
                "Underworld": ["filter", ["scenery", "TreeTrunk", "normal"], "Underworld"],
                "Alt2": ["filter", ["scenery", "TreeTrunk", "normal"], "Alt2"]
            },
            // 17 for normal, 19 for night, 8 for red/castle
            "Water": {
                "normal": ["multiple", "vertical", {
                    "top": "p[0,1,17]x028,1x06,121000012210011222100x26,1121x26,1212222122122112",
                    "middle": "p[17]x088,"
                }],
                "Underwater": ["multiple", "vertical", {
                    "top": "p[1,17,0]x212,0x26,010222201102200111022x16,0010x16,010111101101100x19,",
                    "middle": "p[17]x088,"
                }],
                "Night": ["multiple", "vertical", {
                    "top": "p[2,1,19]x028,1x06,121000012210011222100x26,1121x26,1212222122122112",
                    "middle": "p[19]x088,"
                }],
                "Castle": {
                    "normal": ["multiple", "vertical", {
                        "top": "p[0,1,8]x028,1x06,121000012210011222100x26,1121x26,1212222122122112",
                        "middle": "p[8]x088,"
                    }],
                    "Underwater": ["multiple", "vertical", {
                        "top": "p[1,17,20]x212,0x26,010222201102200111022x16,0010x16,010111101101100x19,",
                        "middle": "p[20]x088,"
                    }]
                }
            }
        },
        "Text": {
            "DecorativeBack": ["multiple", "corners", {
                "top": "x054,",
                "topRight": "00",
                "right": "x024,",
                "bottomRight": "00",
                "bottom": "x024,",
                "bottomLeft": "00",
                "left": "x054,",
                "topLeft": "00",
                "middle": "x094,"
            }],
            "DecorativeDot": "p[0,2,22]220221011",
            "TextA": "p[0,1]00111000110110110001111000x111,000111100011",
            "TextB": "p[0,1]x16,0110001111000x18,0110001111000x18,0",
            "TextC": "p[0,1]0011110011001111x05,11x05,11x06,1100110011110",
            "TextD": "p[0,1]x15,0011001101100011110001111000111100110x15,00",
            "TextE": "p[0,1]x19,x05,11x05,x16,011x05,11x05,x17,",
            "TextF": "p[0,1]x19,x05,11x05,x16,011x05,11x05,11x05,",
            "TextG": "p[0,1]0011110011001111x05,1100x15,00011011001100x15,",
            "TextH": "p[0,1]1100011110001111000x111,0001111000111100011",
            "TextI": "p[0,1]0x16,00011x05,11x05,11x05,11x05,11000x16,",
            // "textJ": ,
            "TextK": "p[0,1]1100011110011011011001111000x15,0011011101100111",
            "TextL": "p[0,1]011x05,11x05,11x05,11x05,11x05,11x05,x16,",
            "TextM": "p[0,1]11000x15,0x119,0101111000111100011",
            "TextN": "p[0,1]11000x15,00x16,0x111,0x16,00x15,00011",
            "TextO": "p[0,1]0x15,0110001111000111100011110001111000110x15,0",
            "TextP": "p[0,1]x16,01100011110001111000x18,011x05,11x05,",
            "TextQ": "p[0,1]0x15,0110001111000111100011110x16,001100111101",
            "TextR": "p[0,1]x16,0110001111000111100x18,0011011101100111",
            "TextS": "p[0,1]0111100110011011x06,x15,x06,1111000110x15,0",
            "TextT": "p[0,1]0x16,00011x05,11x05,11x05,11x05,11x05,1100",
            "TextU": "p[0,1]1100011110001111000111100011110001111000110x15,0",
            "TextV": "p[0,1]1100011110001111000x15,01110x15,000111x05,1000",
            "TextW": "p[0,1]1100011110001111010x119,0x15,00011",
            // "textX": ,
            "TextY": "p[0,1]011001101100110110011001111000011x05,11x05,1100",
            // "textZ": ,
            "Text0": "",
            "Text1": "p[0,1]001100011100001100001100001100001100x16,",
            "Text2": "p[0,1]0x15,011000110000111001111001111001110000x17,",
            "Text3": "p[0,1]0x16,00001100001100001111x06,1111000110x15,0",
            "Text4": "p[0,1]0001110001111001101101100110x17,000011x05,110",
            "Text5": "p[0,1]x16,011x05,x16,x06,11x05,1111000110x15,0",
            "Text6": "p[0,1]0011110011000011x05,x16,0110001111000110x15,0",
            "Text7": "p[0,1]x19,00011000011000011000011x05,11x05,11000",
            "Text8": "p[0,1]0x15,0110001111000110x15,0110001111000110x15,0",
            "Text9": "p[0,1]0x15,0110001111000110x16,x05,1100001100111100",
            "TextPeriod": "p[0,1]x032,11000110",
            "TextExclamationMark": "p[0,1]00110011110111101111001100011x08,110",
            "TextColon": "p[0,1]x06,1100011x08,1100011x012,",
            "TextSlash": "p[0,1]x06,1x05,1x05,1x05,1x05,1x05,1x05,1x06,",
            "Text1up": "p[0,1]0110011001011110111001100101100101100110010110010110011001011001011001100101111001100x15,0110001111001110011000",
            "Text100": "p[0,1]001000100010011001010101001001010101001001010101001001010101001001010101011101110111011100100010",
            "Text200": "p[0,1]01100010001010010101010100010101010100100101010101000101010110000101010x15,01110x17,00100010",
            "Text400": "p[0,1]10100010001010100101010110100101010110100101010x15,0101010x15,01010101001001110111001000100010",
            "Text500": "p[0,1]11110010001010000101010110000101010111100101010100010101010100010101010x15,01110x16,000100010",
            "Text800": "p[0,1]011000100010100101010101010101010101011001010101101101010101100101010101100101110111011000100010",
            "Text1000": "p[0,1]00100010001000100110010101010101001001010101010100100101010101010010010101010101001001010101010101110111011101110111001000100010",
            "Text2000": "p[0,1]01100010001000101001010101010101000101010101010100100101010101010100010101010101100001010101010x15,011101110x17,001000100010",
            "Text4000": "p[0,1]101000100010001010100101010101011010010101010101101001010101010x15,01010101010x15,01010101010100100111011101110010001000100010",
            "Text5000": "p[0,1]11110010001000101000010101010101100001010101010111100101010101010001010101010101000101010101010x15,011101110x16,0001000100010",
            "Text8000": "p[0,1]01100010001000101001010101010101010101010101010101100101010101011011010101010101100101010101010110010111011101110110001000100010",
            "TextColoredCopyright": "p[0,22]0011110001000010100110011010000110100001100110010100001000111100",
            "TextColoredD": "p[0,22]x15,0011001101100011110001111000111100110x15,00",
            "TextColoredE": "p[0,22]x19,x05,11x05,x16,011x05,11x05,x17,",
            "TextColoredI": "p[0,22]0x16,00011x05,11x05,11x05,11x05,11000x16,",
            "TextColoredN": "p[0,22]11000x15,00x16,0x111,0x16,00x15,00011",
            "TextColoredO": "p[0,22]0x15,0110001111000111100011110001111000110x15,0",
            "TextColoredT": "p[0,22]0x16,00011x05,11x05,11x05,11x05,11x05,1100",
            "TextColored1": "p[0,22]001100011100001100001100001100001100x16,",
            "TextColored5": "p[0,22]x16,011x05,x16,x06,11x05,1111000110x15,0",
            "TextColored8": "p[0,22]0x15,0110001111000110x15,0110001111000110x15,0",
            "TextColored9": "p[0,22]0x15,0110001111000110x16,x05,1100001100111100",
            "TextLargeE": "p[0,2,22]000x211,000x212,000x212,00x213,00x213,1x214,1x214,1x214,1x26,x19,x26,1x26,11x26,1x26,11x26,1x26,11x26,1x26,00x26,1x26,10x26,1x26,10x26,10x16,0x214,0x214,0x214,00x213,00x213,101x212,101x212,1001x211,100x113,000x112,000x112,0000x111,",
            "TextLargeP": "p[0,2,22]x211,0000x212,000x212,000x213,00x213,00x214,0x214,0x214,0x26,1x27,1x26,1x27,1x26,1x27,1x26,1x26,11x26,1x26,11x26,1x25,111x26,1x25,111x26,122221110x26,10x16,0x26,10x15,00x26,10x15,00x26,101111000x26,1x08,x26,1x08,x26,1x08,x26,1x09,x16,x09,x16,x09,x16,x09,x16,x08,",
            "TextLargeR": "p[0,2,22]x211,0000x212,000x212,000x213,00x213,00x214,0x214,0x214,0x26,1x27,1x26,1x27,1x26,1x27,1x26,1x26,11x26,1x25,111x26,1x26,11x26,1x27,1x26,1x27,0x26,10x26,0x26,10x26,0x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,10x16,00x16,0x16,00x16,0x16,00x16,0x16,00x16,",
            "TextLargeS": "p[0,2,22]000x28,x06,x210,x05,x210,0000x212,000x212,00x214,0x214,0x214,0x27,x17,0x28,x17,0x29,x15,0x211,11101x211,000111x29,00001111x28,000x16,x26,0x214,0x214,0x214,10x212,110x212,1101x210,11101x210,111001x28,111000x112,0000x110,x05,x110,x06,x18,000",
            "TextLargeU": "p[0,2,22]x26,00x26,0x26,00x26,0x26,00x26,0x26,00x26,0x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x214,1x214,1x214,10x212,110x212,1101x210,11101x210,111001x28,111000x112,0000x110,x05,x110,x06,x18,000",
            "TextHugeA": "p[0,2,22]000x28,x06,x210,x05,x210,0000x212,000x212,00x214,0x214,0x214,0x26,11x26,1x26,11x26,1x26,11x26,1x26,11x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x214,1x214,1x214,1x214,1x214,1x214,1x214,1x214,1x26,11x26,1x26,11x26,1x26,11x26,1x26,11x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,10x16,00x16,0x16,00x16,0x16,00x16,0x16,00x16,",
            "TextHugeB": "p[0,2,22]x211,0000x212,000x212,000x213,00x213,00x214,0x214,0x214,0x26,11x26,1x26,11x26,1x26,11x26,1x26,11x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,1x27,1x26,1x27,1x26,1x27,1x26,1x26,11x26,1x25,111x26,1x26,11x26,1x27,1x26,1x27,0x26,11x26,0x26,11x26,0x26,11x26,1x26,11x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,1x27,1x26,1x27,1x26,1x27,1x26,1x26,11x26,1x26,11x26,1x25,111x26,1x25,111x26,1222211100x16,0x16,00x16,0x15,000x16,0x15,000x16,01111000",
            "TextHugeI": "p[0,2,22]x26,0x26,0x26,0x26,0x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,1x26,10x16,0x16,0x16,0x16,",
            "TextHugeM": "p[0,2,22]000x25,x06,x25,x06,x27,0000x27,x05,x27,0000x27,0000x29,00x29,000x29,00x29,00x222,0x222,0x222,0x26,11x26,11x26,1x26,11x26,11x26,1x26,11x26,11x26,1x26,11x26,11x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,1x26,10x26,10x26,10x16,00x16,00x16,0x16,00x16,00x16,0x16,00x16,00x16,0x16,00x16,00x16,",
            "TextHugeO": "p[0,2,22]000x28,x06,x210,x05,x210,0000x212,000x212,00x214,0x214,0x214,0x26,11x26,1x26,11x26,1x26,11x26,1x26,11x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x214,1x214,1x214,10x212,110x212,1101x210,11101x210,111001x28,111000x112,0000x110,x05,x110,x06,x18,000",
            "TextHugeR": "p[0,2,22]x211,0000x212,000x212,000x213,00x213,00x214,0x214,0x214,0x26,11x26,1x26,11x26,1x26,11x26,1x26,11x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,1x27,1x26,1x27,1x26,1x27,1x26,1x26,11x26,1x25,111x26,1x26,11x26,1x27,1x26,1x27,0x26,10x26,0x26,10x26,0x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,10x16,00x16,0x16,00x16,0x16,00x16,0x16,00x16,",
            "TextHugeS": "p[0,2,22]000x28,x06,x210,x05,x210,0000x212,000x212,00x214,0x214,0x214,0x26,11x26,1x26,11x26,1x26,11x26,1x26,11x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x27,00x16,x28,0x16,0x29,x15,0x211,11101x211,000111x29,00001111x28,000x16,x26,0x26,11x26,0x26,11x26,0x26,01x26,1x26,01x26,1x26,10x26,1x26,10x26,1x26,10x26,1x26,10x26,1x214,1x214,1x214,10x212,110x212,1101x210,11101x210,111001x28,111000x112,0000x110,x05,x110,x06,x18,000",
            "TextHugePeriod": "p[0,2,22]x0224,x26,0x26,0x26,0x26,0x26,1x26,1x26,1x26,10x16,0x16,0x16,0x16,"
        }
    }
};
FullScreenMario.prototype.settings.statistics = {
    "prefix": "FullScreenMario",
    "doMakeContainer": true,
    "containers": [
        ["table", {
            "id": "dataDisplay",
            "style": {
                "position": "absolute",
                "top": 0,
                "width": "100%",
                "fontSize": "21px",
                "textTransform": "uppercase"
            }
        }],
        ["tr", {
            "style": {
                "padding": "7px 14px 0 14px",
                "textAlign": "center"
            }
        }]
    ],
    "defaults": {
        "element": "td"
    },
    "values": {
        "power": {
            "valueDefault": 1,
            "storeLocally": false
        },
        "traveled": {
            "valueDefault": 0
        },
        "score": {
            "valueDefault": 0,
            "digits": 6,
            "hasElement": true,
            "modularity": 100000,
            "onModular": function (EightBitter) {
                EightBitter.gainLife();
            }
        },
        "time": {
            "valueDefault": 0,
            "digits": 3,
            "hasElement": true,
            "minimum": 0,
            "triggers": {
                100: function (EightBitter) {
                    EightBitter.AudioPlayer.playThemePrefixed("Hurry");
                }
            },
            "onMinimum": function (EightBitter) {
                EightBitter.killPlayer(FSM.player, true);
            }
        },
        "world": {
            "valueDefault": 0,
            "hasElement": true
        },
        "coins": {
            "valueDefault": 0,
            "hasElement": true,
            "modularity": 100,
            "onModular": function (EightBitter) {
                EightBitter.player.gainLife();
            }
        },
        "lives": {
            "valueDefault": 3,
            "storeLocally": true,
            "hasElement": true
        },
        "luigi": {
            "valueDefault": 0,
            "storeLocally": true
        }
    }
};
FullScreenMario.prototype.settings.ui = {
    "globalName": "FSM",
    "helpSettings": {
        "globalNameAlias": "{%%%%GAME%%%%}",
        "openings": [
            "Hi, thanks for playing FullScreenMario! It looks like you're using the console.",
            "There's not really any way to stop you from messing around so if you'd like to know the common cheats, enter '{%%%%GAME%%%%}.UserWrapper.displayHelpOptions()' here.",
            "If you'd like, go ahead and look around the source code. There are a few surprises you might have fun with... ;)",
            "http://www.github.com/DiogenesTheCynic/FullScreenMario"
        ],
        "options": {
            "Map": [{
                "title": "{%%%%GAME%%%%}.MapsHandler.setMap",
                "description": "Go to a specified map and location.",
                "usage": "{%%%%GAME%%%%}.MapsHandler.setMap(<map>[, <location>]);",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.MapsHandler.setMap('1-1');",
                    "comment": "Starts map 1-1."
                }, {
                    "code": "{%%%%GAME%%%%}.MapsHandler.setMap('1-2', 1);",
                    "comment": "Starts map 1-2, at the second location."
                }, {
                    "code": "{%%%%GAME%%%%}.MapsHandler.setMap('Random');",
                    "comment": "Starts the random map."
                }, {
                    "code": "{%%%%GAME%%%%}.MapsHandler.setMap('Random', 'Underworld');",
                    "comment": "Starts the random map in the Underworld."
                }]
            }],
            "Things": [{
                "title": "{%%%%GAME%%%%}.addThing",
                "description": "Adds a new Thing to the game.",
                "usage": "{%%%%GAME%%%%}.addThing(<thing>, left, top);",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.addThing('Goomba', 256, 384);",
                    "comment": "Adds a Goomba to the game."
                }, {
                    "code": "{%%%%GAME%%%%}.addThing('Mushroom', {%%%%GAME%%%%}.player.right + 80, {%%%%GAME%%%%}.player.top);",
                    "comment": "Adds a Mushroom to the right of the player."
                }, {
                    "code": "{%%%%GAME%%%%}.addThing(['Koopa', { 'smart': true }], 256, 368);",
                    "comment": "Adds a smart Koopa to the game."
                }, {
                    "code": "{%%%%GAME%%%%}.addThing({%%%%GAME%%%%}.ObjectMaker.make('Koopa', { 'smart': true, 'jumping': true }), 256, 368);",
                    "comment": "Adds a smart, jumping Koopa to the game."
                }]
            }, {
                "title": "{%%%%GAME%%%%}.ObjectMaker.getProperties",
                "description": "Retrieves the defaults for different types of objects.",
                "usage": "{%%%%GAME%%%%}.ObjectMaker.getProperties();"
            }, {
                "title": "{%%%%GAME%%%%}.GroupHolder.get*******Group",
                "description": "Retrieves the appropriate group of Things being manipulated. Choices are 'Text', 'Character', 'Solid', and 'Scenery'",
                "usage": "{%%%%GAME%%%%}.get*******Group();",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.GroupHolder.getCharacterGroup();",
                    "comment": "Retrieves the currently playing Characters."
                }]
            }, {
                "title": "{%%%%GAME%%%%}.GroupHolder.get*******",
                "description": "Retrieves the numbered Thing from its group.",
                "usage": "{%%%%GAME%%%%}.GroupHolder.get*******(<index>);",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.GroupHolder.getCharacter(0);",
                    "comment": "Retrieves the first playing Character."
                }, {
                    "code": "{%%%%GAME%%%%}.GroupHolder.getCharacter({%%%%GAME%%%%}.GroupHolder.getCharacterGroup().length - 1);",
                    "comment": "Retrieves the last playing Character."
                }]
            }],
            "Physics": [{
                "title": "{%%%%GAME%%%%}.shiftBoth",
                "description": "Shifts a Thing horizontally and/or vertically.",
                "usage": "{%%%%GAME%%%%}.shiftBoth(<thing>, <dx>[, <dy>]);",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.shiftBoth({%%%%GAME%%%%}.player, 700);",
                    "comment": "Shifts the player 700 spaces to the right"
                }, {
                    "code": "{%%%%GAME%%%%}.shiftBoth({%%%%GAME%%%%}.player, 0, -{%%%%GAME%%%%}.MapScreener.height);",
                    "comment": "Shifts the player to the top of the screen."
                }]
            }, {
                "title": "{%%%%GAME%%%%}.killNormal",
                "description": "Kills a specified Character with animation.",
                "usage": "{%%%%GAME%%%%}.killNormal(<thing>)",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.killNormal({%%%%GAME%%%%}.GroupHolder.getCharacter(0)",
                    "comment": "Kills the first playing Character."
                }, {
                    "code": "{%%%%GAME%%%%}.GroupHolder.getSceneryGroup().forEach({%%%%GAME%%%%}.killNormal)",
                    "comment": "Kills all playing Scenery."
                }]
            }, {
                "title": "{%%%%GAME%%%%}.player.gravity",
                "description": "Sets the current Player's gravity.",
                "usage": "{%%%%GAME%%%%}.player.gravity = <number>;",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.player.gravity = {%%%%GAME%%%%}.MapScreener.gravity / 2;",
                    "comment": "Sets the player's gravity to half the default."
                }]
            }],
            "Powerups": [{
                "title": "{%%%%GAME%%%%}.playerShroom",
                "description": "Simulates the player hitting a Mushroom.",
                "usage": "{%%%%GAME%%%%}.playerShroom({%%%%GAME%%%%}.player)"
            }, {
                "title": "{%%%%GAME%%%%}.playerStar",
                "description": "Simulates the player hitting a Star.",
                "usage": "{%%%%GAME%%%%}.playerStar({%%%%GAME%%%%}.player)"
            }],
            "Statistics": [{
                    "title": "{%%%%GAME%%%%}.StatsHolder.set('coins')",
                "description": "Sets the number of coins you have.",
                "usage": "{%%%%GAME%%%%}.StatsHolder.set('coins', <number>);",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.StatsHolder.set('coins', 7);",
                    "comment": "Sets your number of coins to seven."
                }]
            }, {
                "title": "{%%%%GAME%%%%}.StatsHolder.set('lives')",
                "description": "Sets the number of lives you have left.",
                "usage": "{%%%%GAME%%%%}.StatsHolder.set('lives', <number>);",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.StatsHolder.set('lives', 7);",
                    "comment": "Sets your number of lives to seven."
                }, {
                    "code": "{%%%%GAME%%%%}.StatsHolder.set('lives', Infinity);",
                    "comment": "Sets your number of lives to Infinity and beyond."
                }]
            }, {
                "title": "{%%%%GAME%%%%}.StatsHolder.set('time')",
                "description": "Sets the amount of time left in the map.",
                "usage": "{%%%%GAME%%%%}.StatsHolder.set('time', <number>)",
                "examples": [{
                    "code": "{%%%%GAME%%%%}.StatsHolder.set('time', 700);",
                    "comment": "Sets your amount of lifes to seven hundred."
                }, {
                    "code": "{%%%%GAME%%%%}.StatsHolder.set('time', Infinity);",
                    "comment": "Sets your amount of time left to Infinity and beyond."
                }]
            }]
        }
    },
    "sizeDefault": "Wide",
    "sizes": {
        "NES": {
            "width": 512,
            "height": 464,
            "full": false
        },
        "Wide": {
            "width": Infinity,
            "height": 464,
            "full": false
        },
        "Large": {
            "width": Infinity,
            "height": Infinity,
            "full": false
        },
        "Full!": {
            "width": Infinity,
            "height": Infinity,
            "full": true
        }
    },
    "schemas": [
        {
            "title": "Options",
            "generator": "OptionsTable",
            "options": [
                {
                    "title": "Volume",
                    "type": "Number",
                    "minimum": 0,
                    "maximum": 100,
                    "source": function (GameStarter) {
                        return Math.round(GameStarter.AudioPlayer.getVolume() * 100);
                    },
                    "update": function (GameStarter, value) {
                        GameStarter.AudioPlayer.setVolume(value / 100);
                    }
                },
                {
                    "title": "Mute",
                    "type": "Boolean",
                    "source": function (GameStarter) {
                        return GameStarter.AudioPlayer.getMuted();
                    },
                    "enable": function (GameStarter) {
                        GameStarter.AudioPlayer.setMutedOn();
                    },
                    "disable": function (GameStarter) {
                        GameStarter.AudioPlayer.setMutedOff();
                    }
                },
                {
                    "title": "Speed",
                    "type": "Select",
                    "options": function (GameStarter) {
                        return [".25x", ".5x", "1x", "2x", "5x"];
                    },
                    "source": function (GameStarter) {
                        return "1x";
                    },
                    "update": function (GameStarter, value) {
                        GameStarter.GamesRunner.setSpeed(
                            Number(value.replace('x', ''))
                        );
                    },
                    "storeLocally": true
                },
                {
                    "title": "View Mode",
                    "type": "ScreenSize"
                },
                {
                    "title": "Framerate",
                    "type": "Select",
                    "options": function (GameStarter) {
                        return ["60fps", "30fps"];
                    },
                    "source": function (GameStarter) {
                        return (1 / GameStarter.PixelDrawer.getFramerateSkip() * 60) + "fps";
                    },
                    "update": function (GameStarter, value) {
                        var numeric = Number(value.replace("fps", ""));
                        GameStarter.PixelDrawer.setFramerateSkip(1 / numeric * 60);
                    },
                    "storeLocally": true
                },
                {
                    "title": "Tilt Controls",
                    "type": "Boolean",
                    "storeLocally": true,
                    "source": function (GameStarter) {
                        return false;
                    },
                    "enable": function (GameStarter) {
                        window.ondevicemotion = GameStarter.InputWriter.makePipe("ondevicemotion", "type");
                    },
                    "disable": function (GameStarter) {
                        window.ondevicemotion = undefined;
                    }
                }
            ],
            "actions": [
                {
                    "title": "Screenshot",
                    "action": function (GameStarter) {
                        GameStarter.takeScreenshot();
                    }
                }
            ]
        }, {
            "title": "Controls",
            "generator": "OptionsTable",
            "options": (function (controls) {
                return controls.map(function (title) {
                    return {
                        "title": title[0].toUpperCase() + title.substr(1),
                        "type": "Keys",
                        "storeLocally": true,
                        "source": function (GameStarter) {
                            return GameStarter.InputWriter
                                .getAliasAsKeyStrings(title)
                                .map(function (string) {
                                    return string.toLowerCase();
                                });
                        },
                        "callback": function (GameStarter, valueOld, valueNew) {
                            GameStarter.InputWriter.switchAliasValues(
                                title,
                                [GameStarter.InputWriter.convertKeyStringToAlias(valueOld)],
                                [GameStarter.InputWriter.convertKeyStringToAlias(valueNew)]
                            );
                        }
                    };
                });
            })(["left", "right", "up", "down", "sprint", "pause"])
        }, {
            "title": "Mods!",
            "generator": "OptionsButtons",
            "keyActive": "enabled",
            "assumeInactive": true,
            "options": function (GameStarter) {
                return GameStarter.ModAttacher.getMods();
            },
            "callback": function (GameStarter, schema, button) {
                GameStarter.ModAttacher.toggleMod(button.getAttribute("value") || button.textContent);
            }
        }, {
            "title": "Editor",
            "generator": "LevelEditor"
        }, {
            "title": "Maps",
            "generator": "MapsGrid",
            "rangeX": [1, 4],
            "rangeY": [1, 8],
            "extras": {
                "Map Generator!": (function () {
                    var shuffle = function (string) {
                        return string
                            .split('')
                            // Same function used in browserchoice.eu :)
                            .sort(function () {
                                return 0.5 - Math.random()
                            })
                            .reverse()
                            .join('');
                    };
                    
                    var getNewSeed = function () {
                        return shuffle(String(new Date().getTime()));
                    };
                    
                    return {
                        "title": "Map Generator!",
                        "callback": function (GameStarter, schema, button, event) {
                            var parent = event.target.parentNode,
                                randomizer = parent.querySelector(".randomInput");
                                
                            randomizer.value = randomizer.value.replace(/[^\d]/g, '');
                            if (!randomizer.value) {
                                randomizer.value = getNewSeed();
                            }
                            
                            GameStarter.NumberMaker.resetFromSeed(randomizer.value);
                            GameStarter.setMap("Random");
                            
                            if (!randomizer.getAttribute("custom")) {
                                randomizer.value = getNewSeed();
                            }
                        },
                        "extraElements": [
                            [
                                "input", {
                                    "className": "randomInput maps-grid-input",
                                    "type": "text",
                                    "value": getNewSeed(),
                                    "onchange": function (event) {
                                        event.target.setAttribute("custom", true)
                                    }
                                }
                            ]
                        ]
                    };
                })()
            },
            "callback": function (GameStarter, schema, button, event) {
                GameStarter.setMap(button.getAttribute("value") || button.textContent);
            }
        }
    ]
};